
// This builds and tests several generations of the compiler,
//  immediately and on every compiler source change,
//   always starting from a base bootstrap of
//    a known-to-work historical compiler version.
//
// Effectively, this limits the dialect of the language
//  that is usable in the compiler itself
//   to whatever is supported by the committed-in-repo
//    known-to-work C++ sources.
//
// These sources are periodically updated,
//  akin to an internal release, making newer syntax
//   and language features available for compiler development.
//
//
fn main()
{
    mut run_no = 0;

    mut dirty: bool;
    mut rebuild_now: f64;
    mut rebuild_pid: spawn::PID;

    mut fswatch: ev::Loop::WatchID;

    fn spawn(argv: string[]): spawn::PID
    {
        let pid = ev::Loop::spawn(:argv,
            stdout: "Parent",
            stderr: "Parent",
            else: |err|
            {
                println("SPWN ER argv(" argv.join(" ") ") err(" err ")");
            });

        // println("SPAWN   argv(" argv.join(" ") ") pid(" pid ")");
        return pid;
    }

    fn respawn_fswatch()
    {
        // TODO instead of this, update the watch with the new file list,
        //  should give the monitor a chance to do something smart
        //   instead of re-creating the watch from scratch,
        //    which is what we'd have if we broke out the loop on every event.
        //
        if (fswatch)
            return;

        mut files: string[];

        fn collect(dir: string)
        {
            fs::readdir(dir): |path, type, recurse|
            {
                if (path.ends(with: ".fu"))
                    files ~= path;
                else if (type == fs::DT_DIR || type == fs::DT_UNKNOWN)
                    recurse();
            }
        }

        collect("./src");
        collect("./lib");

        if !(files)
        {
            println("  WATCH Found no source files to watch.");
        }
        else
        {
            fswatch = ev::Loop::watch_files(files, else: |err|
            {
                println("  WATCH err(" err ") files:\n\t" files.join(",\n\t"));
            });
        }
    }

    fn respawn_rebuild()
    {
        let now = now::utc();

        if (rebuild_pid)
        {
            if (abs(now - rebuild_now) > 0.125)
            {
                // println("REBUILD Make dirty.");
                dirty = true;
            }

            // println("REBUILD Skip, already running.");
            return;
        }

        // println("REBUILD Launch.");
        dirty       = false;
        rebuild_now = now;
        rebuild_pid = spawn([ run_no++ ? "./cycle" : "./recycle" ]);
    }

    ev::Loop(

        loop_start: ||
        {
            respawn_fswatch();
            respawn_rebuild();
        },

        watch_event: |watch_id!wid|
        {
            // println("REBUILD A watch has triggered wid(" ~ wid ~ ").");

            assert(wid == fswatch);

            respawn_fswatch();
            respawn_rebuild();
        },

        child_closed: |pid, lax signo, lax code|
        {
            // println("  CHILD EXIT pid(" pid ") signo(" signo ") code(" code ")");

            assert(pid == rebuild_pid);

            // println("REBUILD Done.");
            rebuild_pid = 0;
            if (dirty)
            {
                // println("REBUILD Re-run because dirty.");
                respawn_rebuild();
            }
        },
    );

    return 0;
}
