
struct TEA
{
    v0: u32;
    v1: u32;
}

inline fn u64(tea: TEA): u64
{
    return tea.v0.u64 | (tea.v1.u64 << 32);
}

fn non_zero(ref tea: TEA)
{
    if !(tea)
        tea.v0 = 0xffffffff;

    return tea;
}


//

fn r4(using ref _: TEA)
{
    mut sum: u32;
    mut delta: u32 = 0x9e3779b9;

    for (mut i = 0; i < 4; i++) {
        sum += delta;

        v0 += ((v1<<4) + 0xA341316C) ^ (v1 + sum) ^ ((v1>>5) + 0xC8013EA4);
        v1 += ((v0<<4) + 0xAD90777D) ^ (v0 + sum) ^ ((v0>>5) + 0x7E95761E);
    }
}

fn r8(using ref _: TEA)
{
    mut sum: u32;
    mut delta: u32 = 0x9e3779b9;

    for (mut i = 0; i < 8; i++) {
        sum += delta;

        v0 += ((v1<<4) + 0xA341316C) ^ (v1 + sum) ^ ((v1>>5) + 0xC8013EA4);
        v1 += ((v0<<4) + 0xAD90777D) ^ (v0 + sum) ^ ((v0>>5) + 0x7E95761E);
    }
}

fn r16(using ref _: TEA)
{
    mut sum: u32;
    mut delta: u32 = 0x9e3779b9;

    for (mut i = 0; i < 16; i++) {
        sum += delta;

        v0 += ((v1<<4) + 0xA341316C) ^ (v1 + sum) ^ ((v1>>5) + 0xC8013EA4);
        v1 += ((v0<<4) + 0xAD90777D) ^ (v0 + sum) ^ ((v0>>5) + 0x7E95761E);
    }
}


//

fn hash(ref res: TEA, other: TEA)
{
    res.v0 ^= other.v1;         // NOTE! Criss-crossing v0 and v1
    res.v1 ^= other.v0;         //  so that hashing with self by a.hash(a)
    res.r16();                  //   doesn't reset the hash (ran into this when sighashing self-recursive fns)
}

fn hash(ref res: TEA, v: u64)
{
    res.v0 ^= (v >> 32).u32;    // Same as above -
    res.v1 ^= v.u32;            //  flip the hi/lo u32 around, so that hashing with self by a.hash(a.u64)
    res.r16();                  //   doesn't reset the hash
}

fn hash(ref res: TEA, v: u32)
{
    res.v0 ^= v.u32;
    res.r16();
}

fn hash(ref res: TEA, u8view: byte[])
{
    // First off, a view over most of the array as u32s.
    let u32len  = u8view.len & ~3;
    let u32view = u8view[.. u32len].view(u32);

    // First, tuples.
    for (mut i = 1; i < u32view.len; i += 2)
    {
        res.v0 ^= u32view[i - 1];
        res.v1 ^= u32view[i];
        res.r16();
    }

    if (u8view.len & 7)
    {
        // A lone trailer.
        if (u32view.len & 1)
            res.v0 ^= u32view[u32view.len - 1];

        // The trailing bytes.
        {
            mut last: u32;
            for (mut i = u32len; i < u8view.len; i++)
            {
                last <<= 8;
                last |= u8view[i].u32;
            }

            res.v1 ^= last;
        }

        // Finally, let's go for a good final shuffle.
        res.r16();
    }
}


// Digests.

fn digest62(mut v.u64: u64, mut chars!?: int): string
{
    chars = chars > 0 && chars < 11 ? chars : 11;

    mut res: string;
    for (mut i = 0; i < chars; i++)
    {
        //*/
        let c = v % 62;
        v = v / 62;
        /*/
        mut c = v;
        v /= 62;
        c -= v * 62;
        //*/

        if (c < 10)
            res ~= byte(c -  0 + '0'.u64);
        else if (c < 36)
            res ~= byte(c - 10 + 'a'.u64);
        else
            res ~= byte(c - 36 + 'A'.u64);
    }

    return res;
}

fn digest16(mut v.u64: u64, mut chars!?: int): string
{
    chars = chars > 0 && chars < 16 ? chars : 16;

    mut res: string;
    for (mut i = 0; i < chars; i++)
    {
        let c = v % 16;
        v = v / 16;

        if (c < 10)
            res ~= byte(c -  0 + '0'.u64);
        else
            res ~= byte(c - 10 + 'a'.u64);
    }

    return res;
}


// Shorthands.

fn hash(u8view: byte[])
{
    mut res: TEA;
    res.hash(u8view);
    return res;
}

fn hash62(str: byte[], chars = 11): string
{
    mut res: TEA;
    res.hash(str);
    return res.digest62(:chars);
}

fn hash16(str: byte[], chars = 16): string
{
    mut res: TEA;
    res.hash(str);
    return res.digest16(:chars);
}
