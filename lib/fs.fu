
pub let RWX_RWX_RWX = 0x7 << 6
                    | 0x7 << 3
                    | 0x7 << 0;

pub fn mkdir_p(mut path: string, mode = RWX_RWX_RWX): i32
{
    // Try create,
    //  on ENOENT try parent and repeat.
    //
    fn visit(shadow ref path: byte[..])
    {
        let N           = path.len - 1;

        path[N]         = '\0';
        defer path[N]   = '/';

        mut err: i32;
        mut is_ENOENT   = false;

        pragma include(
            "<sys/stat.h>",
            "<errno.h>");

        pragma output(
        `
            if (mkdir(`path`.data(), mode_t(`mode`)))
                `is_ENOENT` = (`err` = errno) == ENOENT;
        `);

        if (is_ENOENT) for (mut i = N; i --> 1; )
        {
            if (path[i] != '/')
                continue;

            ref parent = path[.. i + 1];
            if (parent.visit() == 0)
            {
                pragma emit(`

                    if (mkdir(`path`.data(), mode_t(`mode`)))
                        `err` = errno;
                `);
            }

            break;
        }

        return err;
    }

    // Alloc enough space for a nullterm.
    if !(path.ends(with: '/'))
        path ~= '/';

    return path.visit();
}


//

pub fn cwd(): string
{
    pragma include(
        "<stdlib.h>",   // free
        "<unistd.h>",   // getcwd
        "<fu/defer.h>");

    shadow mut cwd: string;

    pragma emit(`

        const auto& init = []()
        {
            // As an extension to the POSIX.1-2001 standard, glibc's getcwd()
            //  allocates the buffer dynamically using malloc(3) if buf is NULL.
            //
            // In this case, the allocated buffer has the length size unless
            //  size is zero, when buf is allocated as big as necessary.
            //
            // The caller should free(3) the returned buffer.
            //
            char* cstr_cwd  = getcwd(/*buf*/NULL, /*size*/0);
            fu_DEFER( free(cstr_cwd); );

            return fu::to_str(cstr_cwd);
        };

        static const fu::str value = init();

        `cwd` = value;
    `);

    return cwd;
}


//

pub primitive DirentType: u8;

pub fn DT_UNKNOWN(): DirentType = __native("<dirent.h>", "DT_UNKNOWN");
pub fn DT_REG(): DirentType = __native("<dirent.h>", "DT_REG");
pub fn DT_DIR(): DirentType = __native("<dirent.h>", "DT_DIR");
pub fn DT_FIFO(): DirentType = __native("<dirent.h>", "DT_FIFO");
pub fn DT_SOCK(): DirentType = __native("<dirent.h>", "DT_SOCK");
pub fn DT_CHR(): DirentType = __native("<dirent.h>", "DT_CHR");
pub fn DT_BLK(): DirentType = __native("<dirent.h>", "DT_BLK");
pub fn DT_LNK(): DirentType = __native("<dirent.h>", "DT_LNK");

pub fn readdir(mut path: string, each): int
{
    pragma include(
        "<dirent.h>",
        "<errno.h>");

    //
    if !(path.ends(with: '/')) path ~= '/';
    path ~= '\0';

    // Open & close.
    mut err = 0;
    pragma input(
    `
        DIR* dir = opendir(`path`.data());
        struct dirent* entry;
        if (!dir) {
            `err` = errno;
            if (!`err`)
                `err` = ENOENT;
        }
    `);

    if (err)
        return err;

    defer pragma emit(
    `
        if (!closedir(dir))
            `err` = errno;
    `);

    //
    mut name_buf: string;

    // Traverse.
    for (;;)
    {
        mut done: bool;
        pragma input(
        `
            entry = readdir(dir);
            `done` = !entry;
        `);

        if (done) break;

        //
        mut name_data: u64;
        mut name_size = 0;
        mut type: DirentType;

        pragma input(
        `
            `name_data` = (uintptr_t) entry->d_name;
            `name_size` = (fu::i) _D_EXACT_NAMLEN(entry);
            `type` = entry->d_type;
            (void) `type`;
        `);

        //
        const ref name = unsafe::cstr_view_or_copy(
            name_buf, cstr: name_data, size: name_size);

        if (name == "." || name == "..")
            continue;

        each(:name, ?:type);
    }

    //
    return err;
}
