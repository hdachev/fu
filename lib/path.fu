
fn ext(path: string): string
{
    for (mut i = path.len; i --> 0; )
    {
        let c = path[i];
        if (c == '.') return path.slice(i);
        if (c == '/') break;
    }

    return "";
}

fn noext(path: string): string
{
    for (mut i = path.len; i --> 0; )
    {
        let c = path[i];
        if (c == '.') return path.slice(0, i);
        if (c == '/') break;
    }

    return "";
}

fn dirname(path: string): string
{
    for (mut i = path.len - 1; i --> 0; )
        if (path[i] == '/')
            return path.slice(0, i + 1);

    return "";
}

fn filename(path: string): string
{
    for (mut i = path.len; i --> 0; )
        if (path[i] == '/')
            return path.slice(i + 1);

    return path;
}

fn normalize(p: string): string
{
    mut path = p.split('/');

    for (mut i = path.len; i --> 0; ) {
        let part = path[i];
        if (part == "." || !part && i > 0 && i < path.len - 1)
            path.splice(i, 1);
    }

    for (mut i = 1; i < path.len; i++) {
        if (path[i] == "..")
        {
            path.splice(--i, 2);
            if (i) i--;
        }
    }

    return path.join('/');
}

fn relative(from: string, to: string): string
{
    let min = from.len < to.len ? from.len : to.len;

    mut same = 0;
    for (mut i = 0; i < min; i++) {
        let a = from[i];
        let b = to[i];

        if (b != a)
            break;

        if (b == '/')
            same = i + 1;
    }

    mut res: string;
    for (mut i = same; i < from.len; i++)
        if (from[i] == '/')
            res ~= "../";

    res ~= to.slice(same);
    return res;
}

fn join(a: string, b: string): string
{
    return normalize(b.starts(with: '/') ?           b
                   :   a.ends(with: '/') ? a       ~ b
                                         : a ~ '/' ~ b);
}
