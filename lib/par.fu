
pub purectx fn each(arr: [$T], visit, min! = 1)
    parallel_for(:min, end: arr.len): |i|
        visit(arr[i], idx?: i);


// **noflow** must be on the inside, otherwise it doesn't catch breaks.
//  This is way to hacky for comfort but it's the best we can do
//   without function types with noflow & purectx assertions.

novec noflow fn parallel_for(min!, mut end!, visit)
{
    mut start   = end * 0;

    compiler include("../hacking/task_stack.hpp");

    compiler emit(`
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    (void) start;

    typedef decltype(`, start, `) start_t;
    typedef decltype(`, end,   `) end_t;

    parallel_for(size_t(end), size_t(`, min, ` > 1 ? `, min, ` : 1), [&](size_t Start, size_t End)
    {
        auto start = (start_t) Start;
        auto end   = (end_t  ) End;

    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    `);

    {
        for (mut i = start; i < end; i++)
        {
            // And this magically still looks like a loop -
            //  no linear / affine nonsense etc.
            visit(i);
        }
    }

    compiler emit(`
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////

    });
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    `);
}
