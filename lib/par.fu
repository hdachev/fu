

// CRITICAL: arr MUST be a view, not a vec
//  we don't want indexing to lazily reserve inside worker threads.
//
// TODO FIX currently DOES NOT codegen a view
//  - add a novec annot here and see why that fails.
//
// TODO FIX add a ctxpure annot
//  - must enforce no mutation to implicit arguments.
//
// TODO FIX add a flowpure annot
//  - must enforce no foreign control flow.

fn each(arr: [$T], fn, min! = 1)
{
    mut start   = 0;
    mut end     = arr.len;

    compiler include("../hacking/task_stack.hpp");

    compiler emit(`
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    (void) start;

    typedef decltype(`, start, `) start_t;
    typedef decltype(`, end,   `) end_t;

    parallel_for(size_t(end), size_t(`, min, ` > 1 ? `, min, ` : 1), [&](size_t Start, size_t End)
    {
        auto start = (start_t) Start;
        auto end   = (end_t  ) End;

    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    `);

    {
        for (mut i = start; i < end; i++)
        {
            // And this magically still looks like a loop -
            //  no linear / affine nonsense etc.
            fn(arr[i], idx?: i);
        }
    }

    compiler emit(`
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////

    });
    ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////
    `);
}
