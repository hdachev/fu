
pub purectx fn each(arr: [$T], visit, min!?: int)
    parallel_for(:min, end: arr.len): |i|
        visit(arr[i], i?: i);

pub purectx fn zip(arr: [$T], barr: [$U], visit, min!?: int)
    parallel_for(:min, end: arr.len.min(barr.len)): |i|
        visit(arr[i], barr[i], i?: i);

pub purectx fn map(arr: [$T], visit, min!?: int)
{
    mut result: (visit(arr[0], i?: 0))[];
    result.grow_junk(arr.len);

    parallel_for(:min, end: arr.len): |i|
        result[i] = visit(arr[i], i?: i);

    return result;
}


// **noflow** must be on the inside, otherwise it doesn't catch breaks.
//  This is way to hacky for comfort but it's the best we can do
//   without function types with noflow & purectx assertions.

// TODO nothrow - can't deal with exceptions here, we need a check for this

novec noflow fn parallel_for(min!, mut end!, visit)
{
    mut start = end & 0;

    pragma include("<task/parallel_for.hpp>");

    pragma emit(
    `
        (void) start;

        typedef decltype(`start`) start_t;
        typedef decltype(`end  `) end_t;

        task::parallel_for(size_t(end), size_t(`min` > 1 ? `min` : 1), [&](size_t Start, size_t End)
        {
            auto start = (start_t) Start;
            auto end   = (end_t  ) End;
    `);

    for (mut i = start; i < end; i++)
    {
        // And this magically still looks like a loop -
        //  no linear / affine nonsense etc.
        visit(i);
    }

    pragma emit(
    `
        });
    `);
}
