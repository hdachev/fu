
let RW_RW_RW    = 0x6 << 6
                | 0x6 << 3
                | 0x6 << 0;

fn write(mut path: string, data: [byte], mode = RW_RW_RW): i32
{
    // C-str ok.
    path ~= '\0';

    mut err: i32;

    //*
    pragma include(
        "<errno.h>",
        "<fcntl.h>",
        "<unistd.h>");

    pragma emit(
    `
        auto fd = open(`path`.data(), O_WRONLY | O_CREAT | O_TRUNC, mode_t(`mode`));
        if (fd == -1)
            return (`err` = errno);

        auto* buf = `data`.data();
        auto size = size_t(`data`.size());

        while (size > 0)
        {
            auto written = write(fd, buf, size);
            if (written <= 0)
            {
                if (written < 0)
                    `err` = errno;

                break;
            }

            buf  +=        written;
            size -= size_t(written);
        }

        if (close(fd) && !`err`)
            `err` = errno;
    `);

    /*/
    pragma include(
        "<stdio.h>",
        "<errno.h>",
        "<fu/defer.h>");

    pragma emit(
    `
        // Used by posix open, ignored here.
        (void) `mode`;

        FILE* file = fopen(`path`.data(), "w");
        if (file)
        {
            fu_DEFER( fclose(file) );

            size_t expect = (size_t) `data`.size();
            size_t actual = fwrite(`data`.data(), 1, expect, file);

            if (actual == expect)
                return 0;

            `err` = ferror(file);
        }

        if (!`err`)
            `err` = errno ? errno : -1;
    `);

    //*/
    return err;
}

fn read(mut path: string): string
{
    mut output: string;
    if (read(path, output))
        output.clear();

    return output;
}

fn read(mut path: string, ref output: string): i32
{
    // C-str ok.
    path ~= '\0';

    mut err: i32;

    //*
    // Block around the thing to scope the defer
    //  to set errnos before we return.
    {
        pragma include(
            "<sys/stat.h>",
            "<errno.h>",
            "<fcntl.h>",    // open
            "<unistd.h>",   // read
            "<limits.h>",   // SSIZE_MAX
            "<fu/defer.h>");

        mut size: i64;

        pragma emit(
        `
            struct stat sb;
            if (stat(`path`.data(), &sb))
                return (`err` = errno);

            `size` = sb.st_size;
        `);

        mut len0 = output.len;

        // Smallvecs should fit up to (2GB - 16b),
        //  but this is vec size-type agnostic.
        let len1 = len0.i64 + size;
        if (len1 > len0.MAX.i64 - 16)
        {
            // Try to return a meaningful error code.
            pragma emit(
            `
                return (`err` = EFBIG);
            `);
        }

        // Last chance for things to fail before we alloc.
        pragma emit(
        `
            auto fd = open(`path`.data(), O_RDONLY);
            if (fd == -1)
                return (`err` = errno);
        `);

        // Cleanup.
        defer
        {
            // Shrink result in case of error,
            //  and again trying to return a meaningful errno
            //   when we're about to return the wrong number of bytes.
            //
            pragma emit(
            `
                if (close(fd) && !`err`)
                    `err` = errno;

                if (`len0` != `len1`)
                {
                    output.UNSAFE__WriteSize(`len0`);
                    `err` = ERANGE;
                }
            `);
        }

        // Allocate.
        output.grow(len1.i32);

        // We request an extra byte when we have the capa for it,
        //  so the OS can confirm the file size by stopping one byte early,
        //   this is intended to detect concurrent file writes.
        //
        pragma emit(
        `
            auto* buf = `output`.data_mut();

            ssize_t check = `output`.capa() > `len1` ? 1 : 0;
            ssize_t request;
            while ((request = `len1` - `len0`) > 0)
            {
                request += check;
                request = request < SSIZE_MAX ? request : SSIZE_MAX;

                auto count = read(fd, buf, size_t(request));
                if (count <= 0)
                {
                    if (count < 0)
                        `err` = errno;

                    break;
                }

                `len0` += (decltype(`len0`)) count;
            }
        `);
    }

    /*/
    pragma include(
        "<stdio.h>",
        "<errno.h>",
        "<fu/defer.h>");

    pragma emit(
    `
        auto file = fopen(`path`.data(), "r");
        if (!file)
            return (`err` = errno);

        fu_DEFER( fclose(file); );

        const size_t BUF_SIZE = 64 * 1024;
        fu::byte BUF[BUF_SIZE];

        auto size = `output`.size();

        for (;;)
        {
            void*  data = BUF;
            size_t capa = BUF_SIZE;

            // Write directly onto the string
            //  if it has more capa than the buffer here.
            //
            auto avail = `output`.capa() - size;
            if (avail > 0 && size_t(avail) > BUF_SIZE)
            {
                data = `output`.data_mut() + size;
                capa = size_t(avail);
            }

            auto count = fu::i(fread(data, 1, capa, file));
            if (!count)
                break;

            size += count;

            // Copy if using the local buffer.
            if (data == BUF)
                `output`.append_copy(fu_ZERO(), BUF, count);
            else
                `output`.UNSAFE__WriteSize(size);
        }
    `);

    //*/
    return err;
}

fn rename(mut from: string, mut to: string): i32
{
    // C-str ok.
    from ~= '\0';
    to   ~= '\0';

    pragma include(
        "<stdio.h>",
        "<errno.h>");

    mut err: i32;

    pragma emit(
    `
        if (rename(`from`.data(), `to`.data()))
            `err` = errno;
    `);

    return err;
}

fn size(mut path: string): i64
{
    // C-str ok.
    path ~= '\0';

    pragma include("<sys/stat.h>")

    pragma emit(
    `
        struct stat sb;
        if (stat(`path`.data(), &sb) == 0)
            return (signed long long) sb.st_size;
    `);

    return -1;
}
