
fn only(ref s: <T>[..])
    s.len == 1 ? s[0] : throw (
        "len != 1: " ~ s.len);

fn first(ref s: <T>[..])
    s.len ? s[0] : throw("len == 0");

fn last(ref s: <T>[..])
    s.len ? s[s.len - 1] : throw("len == 0");

fn if_only(ref s: <T>[..])
    s.len == 1 && s[0];

fn if_first(ref s: <T>[..])
    s.len && s[0];

fn if_last(ref s: <T>[..])
    s.len && s[s.len - 1];

fn grow_if_oob(ref a: <T>[], i: i32): &mut T
{
    if (a.len <= i)
        a.grow(i + 1);

    return a[i];
}

fn unless_oob(ref a: <T>[..], i: i32)
    i.unsigned < a.len.unsigned && a[i];

fn try_steal(ref a: <T>[..], i: i32)
{
    if (i.unsigned < a.len.unsigned)
    {
        mut slot: T;
        swap(slot, a[i]);
        return slot;
    }

    return [];
}


//

fn hasIdentifierChars(id: string)
{
    for (mut i = 0; i < id.len; i++)
    {
        let c = id[i];
        if (c == '_' || c >= 'a' && c <= 'z'
                     || c >= 'A' && c <= 'Z'
                     || c >= '0' && c <= '9')
        {
            return true;
        }
    }

    return false;
}

fn hasNonIdentifierChars(id: string)
{
    for (mut i = 0; i < id.len; i++)
    {
        let c = id[i];
        if (c == '_' || c >= 'a' && c <= 'z'
                     || c >= 'A' && c <= 'Z'
                     || c >= '0' && c <= '9')
        {
            //
        }
        else
        {
            return true;
        }
    }

    return false;
}


//

fn zip_each(ref a: <T>[..], ref b: <U>[..], fn)
{
    a.len == b.len || throw("a.len != b.len");
    for (mut i = 0; i < a.len; i++)
        fn(a[i], b[i], i?: i);
}

fn zip_all(ref a: <T>[..], ref b: <U>[..], pred)
{
    zip_each(a, b): |shadow a, shadow b, i|
        if !(pred(a, b, i?: i))
            return false;

    return true;
}


//

fn clone(a: <T>)
case (T.is::copy) a;
case (T -> _[..]) a.map(fn clone);
case (T -> T) // <- weird, whats this for?
{
    mut res: T;
    for (fieldname i: T)
        res.i = a.i.clone();

    return res;
}

fn steal(ref a: <T>[], start!: i32, end!: i32)
{
    let size = end - start;

    mut ret: T[];
    ret.resize(size);

    for (mut i = 0; i < size; i++)
        swap(ret[i], a[i + start]);

    a.splice(start, count: size);
    return ret;
}

fn steal(ref a: <T>[], start!: i32)
{
    mut ret: T[];
    ret.resize(a.len - start);

    for (mut i = 0; i < ret.len; i++)
        swap(ret[i], a[i + start]);

    a.shrink(start);
    return ret;
}


//

fn parse10u32(ref offset: i32, str: string)
{
    mut result: u32;
    while (offset < str.len)
    {
        let c = str[offset];
        if (c < '0' || c > '9')
            break;

        offset++;
        result = result * 10 + (c.u32 - '0'.u32);
    }

    return result;
}

fn parse10s32(ref offset: i32, str: string)
{
    if (offset >= str.len)
        return 0;

    let mul = str[offset] == '-'
        ? { offset++; -1 }
        : +1;

    return parse10u32(offset, str).i32 * mul;
}


// WARNING dont use BACKTICKS elsewhere
//
// Varints -
//  Any number of msb-set bytes (>= 128),
//   followed by one [0-9], [A-Z], "_", "`" or [a-z] byte -
//    so ascii punctuation except for BACKTICKS and UNDERSCORES
//     can be used unambiguously elsewhere.
//
// WARNING dont use BACKTICKS elsewhere

fn parseVarint(ref offset: i32, str: byte[])
{
    mut shift:  u32;
    mut result: u32;

    mut c: byte;
    while (offset < str.len
            && (c = str[offset++]).u32 >= 128)
    {
        result |= (c.u32 & 0x7f) << shift;
        shift  += 7;
    }

    let sub = c >= '0' && c <= '9' ? '0'.u32
            : c >= 'A' && c <= 'Z' ? 'A'.u32 - 10
            : c >= '_' && c <= 'z' ? '_'.u32 - 36
            : throw("parseVarint: missing trailer");

    return result | (c.u32 - sub) << shift;
}

fn appendVarint(ref str: byte[], mut v: u32)
{
    while (v >= 64)
    {
        str ~= byte(v | 0x80);
        v  >>= 7;
    }

    let add = v < 10 ? '0'.u32
            : v < 36 ? 'A'.u32 - 10
                     : '_'.u32 - 36;

    str ~= (v + add).byte;
}


//

fn print(arr: <T>[..]) case (T.is::arithmetic)
{
    mut result = "";
    for (mut i = 0; i < arr.len; i++)
    {
        if (i == 5 && arr.len > 16)
        {
            i = arr.len - 5;
            result ~= ", ... (" ~ arr.len - 10 ~ " more) ...";
        }

        result ~= (i ? ", " : "[ ");
        result ~= arr[i];
    }

    result ~= result ? " ]" : "[]";
    return result;
}

fn print(arr: string[..]) {
    return arr ? "[ \"" ~ arr.join("\", \"") ~ "\" ]" : "[]";
}


//

fn trim(str: string)
{
    for (mut first = 0; first < str.len; first++)
        if (str[first] > ' ')
            for (mut last = str.len; last-- >= first; )
                if (str[last] > ' ')
                    return str.slice(first, last + 1);

    return "";
}


//

fn parse(v: byte[..], type as!<T>)
    case (T.is::enum || T.is::bitfield /*TODO .is::flags*/ )
{
    // now supported, there's a test for it, this parser is wrong though
    // if (T.is::bitfield)
    //     for (mut i = 1; i < v.len; i++)
    //         if (v[i] == "|")
    //             return parse(v[: i]) | parse(v[i + 1 :]);

    for (fieldname i: T)
        if (v == "i")
            return i; // TODO "i", was only allowed for enums

    return [];
}

fn parseWild(v: byte[..], type as!<T>)
{
    mut result: T;
    for (mut i = 0; i < v.len; i++)
    {
        if (v[i] == '*')
        {
            let prefix = v[.. i];
            let suffix = v[i + 1 ..];

            for (fieldname i: T)
            {
                let opt = "i";
                if (opt.starts(with: prefix) && opt.ends(with: suffix))
                    result |= i;
            }

            return result;
        }
    }

    return parse(:v, as: T);
}


//

fn cleanID(id: string)
{
    let start   = id.find('!') + 1;
    let end     = id.find('.', :start);
    if (start || end >= 0 && end < id.len)
        return id.slice(start, end >= 0 ? end : id.len)
            || throw("cleanID: ended up with an empty string");

    return id;
}


//

fn steal(ref v: <T>) {
    mut ret: T;
    swap(v, ret);
    return ret;
}

fn exchange(ref a: <T>, mut b: T) {
    swap(a, b);
    return b;
}

// TODO using this for _nestingFnort got me in trouble
//  with COW police, but there's no COW, Target is trivial
//
fn shadow(ref a: <T>, mut b: T) unwrap {
    swap(a, b);
    defer:ok swap(a, b);
}


//

fn leftpad(.str, minw: int, mut pad = "               ")
{
    if (str.len >= minw)
        return str;

    let needed = minw - str.len;
    while (pad.len < needed)
        pad ~= pad;

    pad.shrink(needed);
    return pad ~= str;
}


// Sketch, cursor-like empty ranges.

inline fn start  (ref arr: <T>[]) arr[.. 0];
inline fn end    (ref arr: <T>[]) arr[arr.len ..];
inline fn before (ref arr: <T>[], index: int) arr[i .. i];
inline fn after  (ref arr: <T>[], index: int) arr.before(i + 1);
