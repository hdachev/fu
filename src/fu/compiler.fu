// expect_lambda



///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Lexer.

let OPTOKENS = '{}[]()!?~@#$%^&*/-+<=>,.;:|';

let OPERATORS =
[
    '+', '++', '-', '--',
    '*', '**', '/', '%',
    '<', '<<', '<<<', '>', '>>', '>>>',
    '===', '==', '!=', '!==', '<=', '>=', '=>', '->', '<=>',
    '!', '!!', '?', '??',
    '.', '..', '...', ':', '::', ',', ';',
    '&', '&&', '|', '||', '^', '~',
    '{', '}', '[', ']', '(', ')', '[]',
    '=',
    '+=', '-=', '*=', '**=', '/=', '%=',
    '&=', '|=', '^=',
    '&&=', '||=',
    '@', '#', '$'
];

struct Token
{
    kind:   string;
    value:  string;
    fname:  string;

    idx0:   i32;
    idx1:   i32;
    line:   i32;
    col:    i32;
};

struct LexErr
{
    reason: string;
    kind:   string;
    value:  string;
    fname:  string;

    idx0:   i32;
    idx1:   i32;
    line:   i32;
    col:    i32;
};

struct LexResult
{
    fname:  string;
    errors: LexErr[];
    tokens: Token[];
};

fn lex(src: &string, fname: &string): LexResult
{
    let end     = src.len;
    mut line    = 1;
    mut lidx    = -1;
    mut idx     = 0;

    mut errors: LexErr[];
    mut tokens: Token[];

    fn token(kind: &string, value: &string, idx0: i32, idx1: i32)
    {
        let col = idx0 - lidx;

        tokens.push(
            Token(  :kind, :value, :idx0, :idx1,
                    :fname, :line, :col ));
    }

    fn err_str(kind: &string, idx0: i32, reason: &string)
    {
        // exit to nearest whitespace
        while (idx < end && src[idx] > ' ')
            idx++;

        let col = idx0 - lidx;
        let value = src.slice(idx0, idx);

        errors.push(
            LexErr( :reason, :kind, :value, :idx0, idx,
                    :fname, :line, :col ));
    }

    fn err(kind: &string, idx0: i32, reason: i32)
    {
        err_str(kind, idx0, src[reason]);
    }

    fn checkNum(kind: &string, src: string): string
    {
        ////////////
        //  TODO  //
        ////////////

        if (kind == 'int')
        {}
        else
        {}

        return src;
    }

    fn unescapeStr(src: &string, idx0: i32, idx1: i32): string
    {
        mut out = '';

        mut n = idx1 - 1;
        for (mut i = idx0 + 1; i < n; i++)
        {
            let c = src[i];
            if (c == '\\')
            {
                let c1 = src[++i];

                if      (c1 == 'n') out += '\n';
                else if (c1 == 'r') out += '\r';
                else if (c1 == 't') out += '\t';
                else if (c1 == 'v') out += '\v';
                else                out += c1;
            }
            else
            {
                if (c == '\n')
                {
                    line++;
                    lidx = idx - 1;
                }

                out += c;
            }
        }

        return out;
    }

    while (idx < end)
    {
        let idx0 = idx;
        let c = src[idx++];

        // whitespace
        if (c <= ' ')
        {
            if (c == '\n')
            {
                line++;
                lidx = idx - 1;
            }
        }

        // identifiers & keywords
        else if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z' || c == '_')
        {
            while (idx < end)
            {
                let c = src[idx++];
                if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z' || c == '_' || c >= '0' && c <= '9')
                {
                    //
                }
                else
                {
                    idx--;
                    break;
                }
            }

            let idx1 = idx;

            token(
                'id', src.slice(idx0, idx1),
                idx0, idx1);
        }

        // numeric literals
        else if (c >= '0' && c <= '9')
        {
            mut hex = false;
            mut dot = false;
            mut exp = false;

            if (c == '0' && idx < end && src[idx] == 'x')
            {
                hex = true;
                idx++;
            }

            while (idx < end)
            {
                let c = src[idx++];

                if (c >= '0' && c <= '9')
                {
                    //
                }
                else if (c == '.')
                {
                    if (hex || dot || exp)
                    {
                        err('num', idx0, idx - 1);
                        break;
                    }

                    dot = true;
                }
                else if ((c == 'e' || c == 'E') && !hex)
                {
                    if (hex || exp)
                    {
                        err('num', idx0, idx - 1);
                        break;
                    }

                    if (idx < end && (src[idx] == '-' || src[idx] == '+'))
                        idx++;

                    exp = true;
                }
                else if (c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F')
                {
                    if (!hex)
                    {
                        err('num', idx0, idx - 1);
                        break;
                    }
                }
                else
                {
                    idx--;
                    break;
                }
            }

            let trail = src[idx - 1];
            if (trail < '0' || trail > '9')
            {
                err('num', idx0, idx - 1);
            }
            else
            {
                let idx1 = idx;
                let str = src.slice(idx0, idx1);

                token(
                    checkNum(dot || exp ? 'num' : 'int', str), str,
                    idx0, idx1);
            }
        }

        // string literals
        else if (c == '\'' || c == '"' || c == '`')
        {
            mut esc = false;
            mut ok  = false;

            while (idx < end)
            {
                let c1 = src[idx++];
                if (c1 == c)
                {
                    ok = true;
                    break;
                }
                else if (c1 == '\\')
                {
                    esc = true;
                    idx++;
                }
            }

            if (!ok)
            {
                err_str('str', idx0, 'Unterminated string literal.');
            }
            else
            {
                let idx1 = idx;
                let str  = esc  ? unescapeStr(src, idx0, idx1)
                                : src.slice(idx0 + 1, idx1 - 1);

                token(
                    'str', str,
                    idx0, idx1);
            }
        }

        // comments
        else if (c == '/' && idx < end && src[idx] == '/')
        {
            idx++;
            while (idx < end)
            {
                let c1 = src[idx++];
                if (c1 == '\n')
                {
                    line++;
                    lidx = idx - 1;
                    break;
                }
            }
        }

        // multiline comments
        else if (c == '/' && idx < end && src[idx] == '*')
        {
            idx++;
            while (idx < end)
            {
                let c = src[idx++];
                if (c == '\n')
                {
                    line++;
                    lidx = idx - 1;
                }
                else if (c == '*' && idx < end && src[idx] == '/')
                {
                    idx++;
                    break;
                }
            }
        }

        // operators
        else if (OPTOKENS.has(c))
        {
            while (idx < end)
            {
                let c = src[idx++];
                if (!OPTOKENS.has(c))
                {
                    idx--;
                    break;
                }
            }

            // split off adjacent operators
            {
                mut begin   = idx0;
                mut end     = idx;
                while (begin < end)
                {
                    let candidate = src.slice(begin, end);
                    let ok = OPERATORS.has(candidate);
                    if (end > begin + 1 && !ok)
                    {
                        end--;
                        continue;
                    }

                    if (!ok)
                    {
                        err('op', begin, end);
                    }
                    else
                    {
                        token(
                            'op', candidate,
                            begin, end);
                    }

                    begin = end;
                    end = idx;
                }
            }
        }

        // dunno
        else
        {
            err('?', idx0, idx0);
        }
    }

    // end of file token
    line++;
    lidx = idx + 0;

    token(
        'eof', 'eof',
        idx, idx);

    // err, data
    return LexResult( :fname, :errors, :tokens );
}




///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Parser.

pub struct Node
{
    kind:       string;
    flags:      i32;
    value:      string;
    items:      Node[];
    token:      Token;
};


// Calltypes, probably an enum is better for the 4 kinds,
//  can't be mixed and matched.

pub let F_METHOD       = 1 << 0;
pub let F_INFIX        = 1 << 1;
pub let F_PREFIX       = 1 << 2;
pub let F_POSTFIX      = 1 << 3;
pub let F_ACCESS       = 1 << 4;
pub let F_ID           = 1 << 5;
pub let F_INDEX        = 1 << 6;

pub let F_LOCAL        = 1 << 8;
pub let F_ARG          = 1 << 9;
pub let F_FIELD        = 1 << 10;

pub let F_MUT          = 1 << 16;
pub let F_IMPLICIT     = 1 << 17;
pub let F_USING        = 1 << 18;

pub let F_UNTYPED_ARGS = 1 << 23;
pub let F_NAMED_ARGS   = 1 << 24;
pub let F_FULLY_TYPED  = 1 << 25;
pub let F_CLOSURE      = 1 << 26;
pub let F_HAS_CLOSURE  = 1 << 27;
pub let F_PATTERN      = 1 << 28;
pub let F_TEMPLATE     = 1 << 29;
pub let F_DESTRUCTOR   = 1 << 30;
pub let F_ELISION      = 1 << 31;


// Operator precedence table.

let P_RESET           = 1000;
let P_PREFIX_UNARY    = 3   ;

let PREFIX:  string[] = [ '++', '+', '--', '-', '!', '!!', '~', '?', '*', '&', '&mut' ];
let POSTFIX: string[] = [ '++', '--', '[]' ];

struct BINOP {
    PRECEDENCE:     Map(string, i32);
    RIGHT_TO_LEFT:  Map(i32,   bool);
};

fn setupOperators()
{
    mut out: BINOP;

    mut precedence  = P_PREFIX_UNARY;
    mut rightToLeft = false;

    fn binop(ops: string[])
    {
        precedence++;
        out.RIGHT_TO_LEFT[precedence] = rightToLeft;

        for (mut i = 0; i < ops.len; i++)
            out.PRECEDENCE[ops[i]] = precedence;
    }

    binop([ 'as', 'is' ]);

    rightToLeft = true;
    binop([ '**' ]);

    rightToLeft = false;
    binop([ '*', '/', '%' ]);
    binop([ '+', '-' ]);
    binop([ '<<', '>>' ]);
    binop([ '&' ]); // Notice this is not js/c precedence, it's just never usefu]l.
    binop([ '^' ]); // We're doing the rust thing her]e.
    binop([ '|' ]);
    binop([ '<', '<=', '>', '>=' ]);
    binop([ '==', '!=', '<=>' ]);
    binop([ '->' ]);
    binop([ '&&' ]);
    binop([ '||' ]);

    rightToLeft = true;
    binop([ '?' ]);
    binop([ '=', '+=', '-=', '**=', '*=', '/=', '%=', '<<=', '>>=', '&=', '^=', '|=', '||=', '&&=' ]);

    rightToLeft = false;
    binop([ ',' ]);

    //
    return out;
}

let BINOP     = setupOperators();
let P_COMMA   = BINOP.PRECEDENCE[','] || assert();


// Commons.

pub let LET_TYPE       = 0;
pub let LET_INIT       = 1;

pub let FN_RET_BACK    = -2;
pub let FN_BODY_BACK   = -1;
pub let FN_ARGS_BACK   = FN_RET_BACK;

pub let LOOP_INIT      = 0;
pub let LOOP_COND      = 1;
pub let LOOP_POST      = 2;
pub let LOOP_BODY      = 3;
pub let LOOP_POST_COND = 4;


//

pub fn parse(_fname: string, _tokens: Token[])
{
    mut _idx        = 0;
    mut _loc: Token = _tokens[0];
    mut _col0       = 0;
    mut _precedence = P_RESET;
    mut _fnDepth    = 0;
    mut _numDollars = 0;
    mut _numReturns = 0;
    mut _implicits  = 0;
    mut _structName = '';


    //

    fn fail(mut reason: string = '')
    {
        let here = _tokens[_idx];

        if (!reason)
            reason = 'Unexpected `' + here.value + '`.';

        let l0 = _loc.line;
        let c0 = _loc.col;

        let l1 = here.line;
        let c1 = here.col;

        let addr = l1 == l0
            ? '@' + l1 + ':' + c1
            : '@' + l0 + ':' + c0 + '..' + l1 + ':' + c1;

        return throw(_fname + ' ' + addr + ':\n\t' + reason);
    }

    fn fail_Lint(reason: string)
    {
        // TODO allow opt out
        return fail('Lint: ' + reason);
    }

    fn make(
        kind:  string,
        items: Node[] = [],
        flags: i32    =  0,
        value: string = '')
    {
        return Node(
            :kind, :flags, :value, :items,
                token: _loc || throw('no loc'));
    };

    fn miss() Node();


    //

    fn consume(kind: string, value: string = ''): Token
    {
        let token = _tokens[_idx];
        if (token.kind == kind && (!value || token.value == value))
        {
            _idx++;
            return token;
        }

        return fail('Expected `' + (value || kind) + '`, got `' + token.value + '`.');
    }

    fn tryConsume(kind: string, value: string = ''): Token
    {
        let token = _tokens[_idx];
        if (token.kind == kind && (!value || token.value == value))
        {
            _idx++;
            return token;
        }

        return Token();
    }


    //

    fn parseRoot(): Node
    {
        _loc = _tokens[_idx];

        // Imports only ok on top of files.
        // for (;;) {
        //     if (!peek('id', 'import'))
        //         break;

        //     loc = ctx.idx
        //     consume()
        //     items += parseImport()
        // }

        mut out = make('root',
            parseBlockLike('eof', 'eof'));

        if (_implicits)
            out.flags |= F_IMPLICIT;

        return out;
    }


    //

    fn parseBlock(): Node
    {
        return createBlock(
            parseBlockLike('op', '}'));
    }

    fn createBlock(items: &Node[]): Node
    {
        return make('block', items);
    }


    //

    fn parseStructDecl(): Node
    {
        let name = tryConsume('id');
        let id = name && name.value || fail('Anon structs.');

        ////////////////////////////////
        let structName0 = _structName;
        _structName = id;

        consume('op', '{');
        let items = parseBlockLike(
            'op', '}', 'struct');

        _structName = structName0;
        //////////////////////////

        return make(
            'struct', items, 0,
                name ? name.value : '');
    }

    fn parseStructItem(): Node
    {
        //////////////////////////////
        let token = _tokens[_idx++];

        if (token.kind == 'op' || token.kind == 'id')
            if (token.value == 'fn')
                return parseStructMethod();

        _idx--;
        //////////////////////////////

        mut member = parseLet();
        member.flags |= F_FIELD;

        consume('op', ';');
        return member;
    }

    fn parseStructMethod(): Node
    {
        mut fnNode = parseFnDecl();

        // `this` arg annotation -
        //  -----------------------------------
        //  Now what the fuck is happening here -
        //      how do we deal with const/mut here?
        //  --------------------------------------------------------
        //  We dont want cpp-style double definitions for everything,
        //      so how do we go about this?

        let typeAnnot =
            createPrefix('&',
                createRead(_structName || fail()));

        fnNode.items.unshift(
            createLet('this', F_USING, typeAnnot, miss));

        fnNode.flags |= F_METHOD;
        return fnNode;
    }


    //

    fn parseBlockLike(
        endKind: string, endVal: string,
        mode: string = ''): Node[]
    {
        mut line0 = _tokens[_idx].line;
        mut col00 = _col0;

        mut items: Node[] = [];
        while (true)
        {
            let token = _tokens[_idx];
            if (token.kind == endKind && token.value == endVal)
            {
                // Done.
                _col0 = col00;
                _idx++;

                // Style-check, makes for more helpful errors.
                let line1 = token.line;
                let col1  = token.col;

                line1 == line0 || col1 == _col0 || fail_Lint(
                    'Bad closing `' + token.value + '` indent, expecting ' + (_col0 - 1)
                        + ', got ' + (col1 - 1)
                        + '. Block starts on line ' + line0 + '.');

                break;
            }

            _col0 = token.col;

            _col0 > col00 || fail_Lint(
                'Bad indent, expecting more than ' + col00
                    + '. Block starts on line ' + line0 + '.');

            mut expr = mode /*== 'struct'*/
                ? parseStructItem()
                : parseStatement();

            expr.kind != 'call'
                || ((expr.flags & (F_ID | F_ACCESS)) == 0)
                || expr.items.len > 1
                || fail_Lint('Orphan pure-looking expression.');

            // Filter out excess semicolons.
            if (expr.kind != 'empty')
                items.push(expr);

            // Unpacking & ungrouping node types.
            if (expr.kind == 'struct')
                unwrapStructMethods(items, expr);
        }

        return items;
    }

    fn unwrapStructMethods(
        out: &mut Node[], structNode: &mut Node): void
    {
        mut items = structNode.items;
        for (mut i = 0; i < items.len; i++)
        {
            mut item = items[i];
            if (item && item.kind == 'fn')
            {
                if (item.value == 'free')
                {
                    structNode.flags |= F_DESTRUCTOR;
                    item.flags |= F_DESTRUCTOR;
                }

                items.splice(i--, 1);
                out.push(item);
            }
        }
    }


    //

    fn parseStatement(): Node
    {
        ///////////////////////////////////////////////
        let loc0  = _loc;
        let token = _loc = _tokens[_idx++] || fail();
        ///////////////////////////////////////////////

        if (token.kind == 'op' || token.kind == 'id')
        {
            let v = token.value;

            if (v == '{')           return parseBlock();
            if (v == 'let')         return parseLetStmt();
            if (v == 'mut')         return (_idx--, parseLetStmt());

            if (v == 'if')          return parseIf();
            if (v == 'return')      return parseReturn();

            if (v == 'for')         return parseFor();
            if (v == 'while')       return parseWhile();
            if (v == 'do')          return parseDoWhile();
            if (v == 'break')       return parseJump('break');
            if (v == 'continue')    return parseJump('continue');

            if (v == ';')           return parseEmpty();
            if (v == 'fn')          return parseFnDecl();
            if (v == 'struct')      return parseStructDecl();

            if (v == ':')           return parseLabelledStatement();

            // Ignore pubs for now.
            if (v == 'pub')         return parseStatement();
        }

        ////////////
        _idx--;
        _loc = loc0;
        ////////////

        // Expression statement, followed by a semi.
        return parseExpressionStatement();
    }

    fn parseLabelledStatement(): Node
    {
        let label = consume('id');
        mut stmt  = parseStatement();

        if (stmt.kind == 'loop')
        {
            stmt.value && fail();
            stmt.value = label.value || fail();
            return stmt;
        }

        return fail();
    }

    fn parseEmpty(): Node
    {
        return make('empty');
    }

    fn parseExpressionStatement(): Node
    {
        let expr = parseExpression(P_RESET);
        consume('op', ';');
        return expr;
    }

    fn parseFnDecl(): Node
    {
        ////////////////////////////////
        let numDollars0 = _numDollars;
        let numReturns0 = _numReturns;
        ////////////////////////////////

        // fn hello(), fn +()
        mut name = tryConsume('id');
        name ||= tryConsume('op');

        // Opening parens.
        consume('op', '(');

        mut items: Node[] = [];
        mut flags = parseArgsDecl(items, 'op', ')');

        ////////////////////////////////
        _fnDepth++;
        ////////////////////////////////

        // Return type annot.
        mut type = tryPopTypeAnnot();
        let retIdx = items.len;
        items.push(type);

        // Body or pattern (case/case).
        flags |= parseFnBodyOrPattern(items);

        // Inject `: void` annot here, easy,
        //  one less thing to deal with later.
        if (!type && _numReturns == numReturns0)
            items[retIdx] = type = createRead('void');

        if (type)
            flags |= F_FULLY_TYPED;

        ////////////////////////////////
        {
            _fnDepth--;
            _numReturns = numReturns0;

            let numDollars1 = _numDollars;
            _numDollars = numDollars0;
            if (numDollars1 != numDollars0)
                flags |= F_TEMPLATE;
        }
        ////////////////////////////////

        return make('fn', items, flags, name.value);
    }

    fn parseFnBodyOrPattern(
        out_push_body: &mut Node[]): i32
    {
        mut flags = 0;
        mut body: Node;
        //

        if (tryConsume('id', 'case'))
        {
            mut branches: Node[] = [];

            flags |= F_PATTERN;

            do
            {
                let cond = parseUnaryExpression();
                let type = tryPopTypeAnnot();
                let body = parseFnBodyBranch();

                branches.push(
                    make('fnbranch', [ cond, type, body ]));
            }
            while (tryConsume('id', 'case'));

            body = make('pattern', branches);
        }
        else
        {
            body = parseFnBodyBranch();
        }

        //
        out_push_body.push(body);
        return flags;
    }

    fn parseFnBodyBranch(): Node
    {
        let body = parseStatement();

        return body.kind == 'block' || body.kind == 'return'
             ? body
             : (_numReturns++, createReturn(body));
    }

    fn tryPopTypeAnnot(): Node
    {
        return tryConsume('op', ':')
             ? parseTypeAnnot()
             : miss;
    }

    fn parseTypeAnnot(): Node
    {
        return parseUnaryExpression();
    }

    fn parseArgsDecl(
        outArgs: &mut Node[],
        endk: string, endv: string): i32
    {
        mut first = true;
        mut outFlags = 0;

        mut implicit: Node[];
        mut defaults = false;

        while (true)
        {
            if (tryConsume(endk, endv))
                break;

            if (!first)
                consume('op', ',');

            first = false;

            mut arg = parseLet();

            if (!arg.items[LET_TYPE])
                outFlags |= F_UNTYPED_ARGS;

            if (arg.items[LET_INIT])
            {
                if (arg.flags & F_IMPLICIT)
                    fail('TODO default implicit arguments');

                defaults = true;
            }
            else if (defaults)
            {
                fail('TODO non-trailing default arguments');
            }

            arg.flags &= ~F_LOCAL;
            arg.flags |= F_ARG;

            if (arg.flags & F_IMPLICIT)
                implicit.push(arg);
            else
                outArgs.push(arg);
        }

        // Ensures implicit arguments always come last.
        if (implicit)
            for (mut i = 0; i < implicit.len; i++)
                outArgs.push(implicit[i]);

        return outFlags;
    }

    fn parseLetStmt(): Node
    {
        let ret = parseLet();
        consume('op', ';');
        return ret;
    }

    fn parseLet(): Node
    {
        mut flags = F_LOCAL;

        let numDollars0 = _numDollars;

        if (tryConsume('id', 'using'   )) flags |= F_USING;
        if (tryConsume('id', 'implicit')) flags |= F_IMPLICIT;
        if (tryConsume('id', 'mut'     )) flags |= F_MUT;

        let id      = consume('id').value;
        let type    = tryPopTypeAnnot();
        let init    = tryConsume('op', '=')
                    ? parseExpression(P_COMMA)
                    : Node();

        if (numDollars0 != _numDollars)
            flags |= F_TEMPLATE;

        if (flags & F_IMPLICIT)
            _implicits++;

        return createLet(id, flags, type, init);
    }

    fn createLet(
        id: string, flags: i32,
        type: Node, init: Node): Node
    {
        return make('let', [ type, init ], flags, id);
    }

    fn parseExpression(p1 = _precedence): Node
    {
        let p0      = _precedence;
        let loc0    = _loc;

        //////////////////////////////
        _precedence = p1;
        _loc        = _tokens[_idx] || fail();
        //////////////////////////////

        mut head    = parseExpressionHead();
        {
            mut out: Node;
            while (out  = tryParseExpressionTail(head))
            {
                _loc    = _tokens[_idx] || fail();
                head    = out;
            };
        }

        //////////////////////////////
        _precedence = p0;
        _loc        = loc0;
        //////////////////////////////

        return head;
    }

    fn tryParseBinary(left: Node, op: string, p1: i32): Node
    {
        if (p1 > _precedence || p1 == _precedence && !BINOP.RIGHT_TO_LEFT[p1])
            return miss;

        // consume
        _idx++;

        mut mid: Node;
        if (op == '?')
        {
            mid = parseExpression();
            consume('op', ':');
        }

        mut right = parseExpression(p1);
        if (mid)
            return createIf(left, mid, right);

        mut flags = F_INFIX;

        // We'll treat these two differently,
        //  no operator overloading for those guys.
        if (op == '||') return createOr (left, right);
        if (op == '&&') return createAnd(left, right);

        //
        return createCall(
            op, flags, [ left, right ]);
    }

    fn tryParseExpressionTail(head: &Node): Node
    {
        // Consume.
        let token = _tokens[_idx++];
        if (token.kind == 'op')
        {
            let v = token.value;

            if (v == ';') return (_idx--, miss);
            if (v == '.') return parseAccessExpression(head);
            if (v == '(') return parseCallExpression(head);
            if (v == '[') return parseIndexExpression(head);

            let p1 = BINOP.PRECEDENCE[v];
            if (p1)
                return (_idx--, tryParseBinary(head, v, p1));

            if (POSTFIX.has(v))
                return createCall(v, F_POSTFIX, [ head ]);
        }

        // Backtrack.
        return (_idx--, miss);
    }

    fn parseExpressionHead(): Node
    {
        //////////////////////////////
        let token = _tokens[_idx++];
        //////////////////////////////

        {
            let k = token.kind;

            // Literals.
            if (k == 'int' || k == 'num' || k == 'str')
                return createLeaf(
                    token.kind, token.value);

            // Identifier expression.
            if (k == 'id')
                return createRead(token.value);

            // Operators.
            if (k == 'op')
            {
                let v = token.value;

                if (v ==  '(') return parseParens();
                if (v ==  '[') return parseArrayLiteral();
                if (v ==  '$') return parseTypeParam();
                if (v ==  '@') return parseTypeTag();
                if (v == '[]') return make('definit');

                return parsePrefix(token.value);
            }
        }

        ///////
        _idx--;
        ///////

        return fail();
    }

    fn parseParens(): Node
    {
        mut items: Node[] = [];

        do
        {
            items.push(parseExpression(P_COMMA));
        }
        while (tryConsume('op', ','));

        consume('op', ')');

        return items.len > 1
             ? createComma(items)
             : items[0];
    }

    fn createComma(nodes: &Node[]): Node
    {
        return make('comma', nodes);
    }

    fn parseTypeParam(): Node
    {
        _numDollars++;
        return createTypeParam(consume('id').value);
    }

    fn createTypeParam(value: string): Node
    {
        return make('typeparam', :value);
    }

    fn parseTypeTag(): Node
    {
        return createTypeTag(consume('id').value);
    }

    fn createTypeTag(value: string): Node
    {
        return make('typetag', :value);
    }

    fn parsePrefix(mut op: string): Node
    {
        PREFIX.has(op) || (_idx--, fail());

        if (op == '&' && tryConsume('id', 'mut'))
            op = '&mut';

        return createPrefix(
            op, parseUnaryExpression());
    }

    fn parseUnaryExpression(): Node
    {
        return parseExpression(P_PREFIX_UNARY);
    }

    fn createPrefix(op: string, expr: &Node): Node
    {
        return createCall(op, F_PREFIX, [ expr ]);
    }

    fn parseAccessExpression(expr: &Node): Node
    {
        return createCall(
            consume('id').value,
            F_ACCESS, [ expr ]);
    }


    //

    fn parseCallArgs(endop: string, out_args: &mut Node[]): i32
    {
        mut flags = 0;

        mut first = true;
        while (true)
        {
            if (tryConsume('op', endop))
                break;

            // Comma juggle.
            if (!first)
                consume('op', ',');

            first = false;

            // Named arguments.
            mut name = '';
            mut autoName = false;

            if (_tokens[_idx    ] .kind == 'id' &&
                _tokens[_idx + 1] .kind == 'op' &&
                _tokens[_idx + 1].value == ':')
            {
                name = _tokens[_idx].value;
                _idx += 2;

                flags |= F_NAMED_ARGS;
            }
            else if (_tokens[_idx].kind == 'op'
                  && _tokens[_idx].value == ':')
            {
                autoName = true;
                _idx++;

                flags |= F_NAMED_ARGS;
            }

            let expr = parseExpression(P_COMMA);
            if (autoName)
            {
                expr.kind == 'call' && (expr.flags & F_ID)
                    || fail('Can\'t :auto_name this expression.');

                name = expr.value;
            }

            out_args.push(
                name    ? createLabel(name, expr)
                        : expr);
        }

        return flags;
    }

    fn createLabel(id: string, value: &Node): Node
    {
        return make('label', [ value ], 0, id);
    }

    fn parseCallExpression(expr: &Node): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs(')', args);

        // Uniform call syntax.
        if (expr.kind == 'call' && (expr.flags & F_ACCESS))
        {
            let head = expr.items
                    && expr.items.len == 1
                    && expr.items[0] || fail();

            args.unshift(head);

            return createCall(
                expr.value || fail(), F_METHOD | argFlags,
                args);
        }

        if (expr.kind == 'call' && (expr.flags & F_ID))
            return createCall(
                expr.value || fail(), argFlags, args);

        return fail('TODO dynamic call');
    }

    fn parseArrayLiteral(): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs(']', args);

        return createArrayLiteral(argFlags, args);
    }

    fn createArrayLiteral(argFlags: i32, items: Node[]): Node
    {
        return make('arrlit', items, argFlags);
    }

    fn parseIndexExpression(expr: Node): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs(']', args);

        args.unshift(expr);

        return createCall('[]',
            F_INDEX & argFlags, args);
    }

    fn createLeaf(kind: string, value: string): Node
    {
        return make(kind, :value);
    }

    fn createCall(id: string, flags: i32, args: Node[] = []): Node
    {
        return make('call', args, flags, id);
    }

    fn createRead(id: string): Node
    {
        return createCall(id || fail(), F_ID);
    }


    //

    fn parseReturn(): Node
    {
        _fnDepth > 0 || (_idx--, fail());
        _numReturns++;

        if (tryConsume('op', ';'))
            return createReturn();

        return createReturn(
            parseExpressionStatement());
    }

    fn createReturn(node: Node = Node()): Node
    {
        if (!node)
            return make('return');

        return make('return', [ node ]);
    }

    fn parseJump(kind: string /*'break'|'continue'*/): Node
    {
        mut label = '';

        mut jump = tryConsume('op', ':')
            ? createJump(kind, consume('id').value)
            : createJump(kind, label);

        consume('op', ';');
        return jump;
    }

    fn createJump(kind: string/*'break'|'continue'*/, label: string): Node
    {
        return make(kind, value: label);
    }


    //

    fn parseIf(): Node
    {
        consume('op', '(');
        let cond = parseExpression();
        consume('op', ')');

        let cons: Node = parseStatement();

        let alt: Node = tryConsume('id', 'else')
            ? parseStatement()
            : miss;

        return createIf(cond, cons, alt);
    }


    //

    fn createIf(cond: Node, cons: Node, alt: Node): Node
    {
        return make('if', [ cond, cons, alt ]);
    }

    fn createOr(left: Node, right: Node): Node
    {
        return flattenIfSame('or', left, right);
    }

    fn createAnd(left: Node, right: Node): Node
    {
        return flattenIfSame('and', left, right);
    }

    fn flattenIfSame(kind: string, left: Node, right: Node): Node
    {
        let k_left  =  left.kind;
        let k_right = right.kind;

        let items =
            k_left == kind && k_right == kind
                ? left.items.concat(right.items)
                : k_left == kind
                    ? left.items.concat([ right ])
                    : k_right == kind
                        ? [ left ].concat(right.items)
                        : [ left, right ];

        return make(kind, items);
    }


    //

    fn parseFor(): Node
    {
        consume('op', '(');

        tryConsume('id', 'let');
        let init = parseLetStmt();
        let cond = parseExpressionStatement();

        let token = _tokens[_idx];
        let post = token.kind == 'op' && token.value == ')'
            ? parseEmpty()
            : parseExpression();

        consume('op', ')');
        let body = parseStatement();

        return createLoop(init, cond, post, body, miss);
    }

    fn parseWhile(): Node
    {
        consume('op', '(');
        let cond = parseExpression();
        consume('op', ')');
        let body = parseStatement();

        return createLoop(miss, cond, miss, body, miss);
    }

    fn parseDoWhile(): Node
    {
        let body = parseStatement();
        consume('id', 'while');
        consume('op', '(');
        let cond = parseExpression();
        consume('op', ')');
        consume('op', ';');

        return createLoop(miss, miss, miss, body, cond);
    }

    fn createLoop(init: Node, cond: Node, post: Node, body: Node, postcond: Node): Node
    {
        return make('loop', [ init, cond, post, body, postcond ]);
    }

    // -------------------------------
    // Good to go.

    // Check EOF.
    _tokens[_tokens.len - 1].kind == 'eof' || fail(
        'Missing `eof` token.');

    //
    return parseRoot();
}




///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Types.

// pub struct Primitive
//     'i8'  | 'u8'  |
//     'i16' | 'u16' |
//     'i32' | 'u32' |
//     'i64' | 'u64' | 'bool' | 'void' | 'never'
//                   | 'template'
//                   | 'string';

pub let q_mutref       = 1 << 0;
pub let q_ref          = 1 << 1;
pub let q_prvalue      = 1 << 2;
pub let q_copy         = 1 << 3;
pub let q_move         = 1 << 4;

pub let q_trivial      = 1 << 5;
pub let q_primitive    = 1 << 6;
pub let q_arithmetic   = 1 << 7;
pub let q_integral     = 1 << 8;
pub let q_signed       = 1 << 9;

let TAGS =
[
    'mutref',
    'ref',
    'prvalue',
    'copy',
    'move',

    'trivial',
    'primitive',
    'arithmetic',
    'integral',
    'signed'
];

pub struct Type
{
    canon: string;
    quals: i32;
};


//

pub let Trivial        = q_copy | q_trivial;
pub let Primitive      = Trivial | q_primitive;
pub let Arithmetic     = Primitive | q_arithmetic;
pub let Integral       = Arithmetic | q_integral;
pub let SignedInt      = Integral | q_signed;

pub let t_i32          = Type('i32', SignedInt);
pub let t_void         = Type('void', 0);
pub let t_bool         = Type('bool', Primitive);
pub let t_never        = Type('never', 0);
pub let t_template     = Type('template', 0);
pub let t_string       = Type('string', q_copy);


// https://doc.rust-lang.org/nomicon/subtyping.html:

// Re: covariance of `T` in `Box<T>`:
//
// As it turns out, the argument for why it's ok for Box
//  (and Vec, Hashmap, etc.) to be covariant is pretty similar
//   to the argument for why it's ok for lifetimes to be covariant:
//    as soon as you try to stuff them in something like a mutable
//     reference, they inherit invariance and you're prevented
//      from doing anything bad.

pub fn isAssignable(host: Type, guest: Type)
{
    return host.canon == guest.canon
            && (host.quals == guest.quals ||
                  !(host.quals & q_mutref) // mut invariance
                    && (host.quals & guest.quals) == host.quals)
        || guest.canon == t_never.canon
            && guest.quals == 0;
}


//

pub fn qadd(type: Type, q: i32)
{
    return Type(type.canon, type.canon ? type.quals | q : 0);
}

pub fn qsub(type: Type, q: i32)
{
    return Type(type.canon, type.quals &~ q);
}

pub fn qhas(type: Type, q: i32)
{
    return type.quals & q == q;
}

fn tryClear(type: Type, q: i32): Type
{
    if (!type || !qhas(type, q))
        return Type();

    return qsub(type, q);
}


//

pub fn add_ref(type: Type)
{
    return qadd(type, q_ref);
}

pub fn add_mutref(type: Type)
{
    return qadd(type, q_ref | q_mutref);
}

pub fn add_prvalue_ref(type: Type)
{
    return qadd(type, q_ref | q_prvalue);
}


//

pub fn tryClear_mutref(type: Type)
{
    return tryClear(type, q_ref | q_mutref);
}

pub fn tryClear_ref(type: Type)
{
    let t = tryClear(type, q_ref);

    return t
         ? qsub(t, q_mutref)
         : t;
}

pub fn clear_refs(type: Type)
{
    return qsub(type, q_ref | q_mutref | q_prvalue);
}

pub fn add_refs_from(src: Type, dest: Type)
{
    return qadd(dest, src.quals & (q_ref | q_mutref));
}


//

pub fn serializeType(type: Type)
{
    if (type.quals)
        return '(' + type.canon + '{' + type.quals + '})';

    return '(' + type.canon + ')';
}

pub fn type_has(type: Type, tag: string)
{
    let idx = TAGS.find(tag);
    idx >= 0 || throw('Unknown type tag: `' + tag + '`.');
    let mask = 1 << idx;
    return (type.quals & mask) == mask;
}


//

pub fn type_tryInter(a: Type, b: Type)
{
    if (a.canon != b.canon)
        return Type();

    return Type(
        a.canon,
        a.quals & b.quals);
}


//

pub struct Struct
{
    kind:   string; // 'struct'|'array'|'map';
    id:     string;
    fields: StructField[];
    flags:  i32;
};

pub struct StructField
{
    id:     string;
    type:   Type;
};


// The temp context -
//  TBD what this will look like in the end -
//   we'll likely need a typespace per module,
//    so everyone can read from immut shared concurrently,
//     and write into their own without having to sync.

pub struct TEMP_Context
{
    types:  Map(string, Struct);
};

pub fn registerType(
    implicit ctx: &mut TEMP_Context,
    canon: string, def: Struct): void
{
    ctx.types[canon] = def;
}

pub fn lookupType(
    implicit ctx: &mut TEMP_Context,
    canon: string): Struct
{
    return ctx.types[canon] || assert();
}


//

pub fn registerStruct(id: string, fields: StructField[], flags: i32)
{
    // TODO struct data goes on compile context.
    // TODO use module id.

    let canon = 's_' + id;
    let def = Struct(
        kind:   'struct',
        id:     id      || assert(),
        fields: fields  || assert(),
        flags:  flags|0
    );

    registerType(canon, def);

    return Type(canon,
        copyOrMove(flags, fields, true));
}

fn copyOrMove(
    flags: i32,
    fields: StructField[],
    tryTrivial: bool = false): i32
{
    if ((flags & F_DESTRUCTOR) || someFieldNonCopy(fields))
        return q_move;

    if (tryTrivial && !someFieldNotTrivial(fields))
        return Trivial;

    return q_copy;
}

fn someFieldNonCopy(fields: StructField[]): bool
{
    for (mut i = 0; i < fields.len; i++)
        if (!(fields[i].type.quals & q_copy))
            return true;

    return false;
}

fn someFieldNotTrivial(fields: StructField[]): bool
{
    for (mut i = 0; i < fields.len; i++)
        if (!(fields[i].type.quals & q_trivial))
            return true;

    return false;
}


//

pub fn createArray(item: Type): Type
{
    let flags = 0;
    let fields: StructField[] =
    [
        StructField(
            id:  'Item',
            type: item)
    ];

    let canon = 'Array(' + serializeType(item) + ')';

    registerType(canon, Struct(
        kind:   'array',
        id:     canon,
        :fields,
        :flags));

    return Type(canon,
        copyOrMove(flags, fields));
}

pub fn isArray(type: Type): bool
{
    return type.canon.starts(with: 'Array(');
}

pub fn tryClear_array(type: Type): Type
{
    if (!isArray(type))
        return Type();

    let def = lookupType(type.canon);

    return def.kind == 'array'
        && def.fields[0].type
        || assert();
}


//

pub fn type_isMap(type: Type): bool
{
    return type.canon.starts(with: 'Map(');
}

pub fn createMap(key: Type, value: Type): Type
{
    let flags  = 0;
    let fields =
    [
        StructField(id:  'Key',   type: key  ),
        StructField(id:  'Value', type: value)
    ];

    let canon = 'Map(' + serializeType(key) + ',' + serializeType(value) + ')';

    registerType(canon, Struct(
        kind:   'map',
        id:     canon,
        :fields,
        :flags
    ));

    return Type(canon,
        copyOrMove(flags, fields));
}

pub struct MapFields
{
    key:   Type;
    value: Type;
}

pub fn tryClear_map(type: Type): MapFields
{
    if (!type_isMap(type))
        return MapFields();

    let def = lookupType(type.canon);
    def.kind == 'map' || assert();

    return MapFields(
        key:   def.fields[0].type || assert(),
        value: def.fields[1].type || assert());
}




///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Scope.

struct ScopeIdx { raw: i32; };

struct SolvedNode
{
    kind:       string;
    flags:      i32;
    value:      string;
    items:      SolvedNode[];
    token:      Token;

    type:       Type;
    target:     ScopeIdx;
};

struct Specialization
{
    node: SolvedNode;
    index: ScopeIdx;
};

struct Template
{
    node: Node;
    specializations: Map(string, Specialization); // mangle -> spec
};

struct Partial
{
    via: ScopeIdx;
    target: ScopeIdx;
};

struct Overload
{
    kind: string;
    name: string;
    type: Type;

    // Arity.
    min: i32;
    max: i32;
    args: Type[];
    names: string[];
    defaults: SolvedNode[];

    // Amazing stuff.
    partial: Partial;
    template: Template;
};

struct ScopeItem
{
    id:         string;
    index:      ScopeIdx;
};

pub struct Scope
{
    items:      ScopeItem[];
    overloads:  Overload[];
};

pub fn Scope_lookup(scope: &Scope, id: string): ScopeIdx[]
{
    mut results: ScopeIdx[] = [];

    let items = scope.items;
    for (mut i = items.len; i --> 0; )
    {
        let item = items[i];
        if (item.id == id)
            results.push(item.index);
    }

    return results;
}

pub fn Scope_keys(scope: &Scope): string[]
{
    mut keys: string[] = [];

    let items = scope.items;
    for (mut i = items.len; i --> 0; )
    {
        let id = items[i].id;
        if (!keys.has(id))
            keys.push(id);
    }

    return keys;
}

pub fn Scope_get(scope: &Scope, idx: ScopeIdx): Overload
{
    return scope.overloads[idx.raw - 1];
}


////////////////////////////////

pub fn Scope_push(scope: &mut Scope): i32
{
    return scope.items.len;
}

pub fn Scope_pop(scope: &mut Scope, memo: i32): void
{
    scope.items.shrink(memo);
}


////////////////////////////////

pub fn Scope_add(
    scope: &mut Scope,
    kind: string, id: string, type: Type,

    min: i32 = 0,
    max: i32 = 0,
    arg_n: string[]     = [],
    arg_t: Type[]       = [],
    arg_d: SolvedNode[] = [],
    template: Template  = [],
    partial: Partial    = []): ScopeIdx
{
    let index = ScopeIdx(scope.overloads.len + 1);

    let item = Overload(
        :kind,
        name: id, :type,
        :min, :max, args: arg_t,
        names: arg_n, defaults: arg_d,
        :partial, :template);

    scope.items.push(ScopeItem( :id, :index ));
    scope.overloads.push(item);

    return index;
}




///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Solver.

pub struct SolveResult
{
    root:       SolvedNode;
    scope:      Scope;
};

fn Scope_Typedef(scope: Scope, id: string, type: Type)
{
    return Scope_add(scope, 'type', id, type);
}


//

fn runSolver(parse: &Node, globals: &Scope): SolveResult
{
    mut _scope:         Scope       = globals;

    mut _here:          Token;
    mut _current_fn:    SolvedNode;
    mut _current_strt:  Type;
    mut _typeParams:    Map(string, Type);

    mut TEST_expectImplicits: bool = false;


    //

    fn GET(idx: ScopeIdx): Overload
    {
        return Scope_get(_scope, idx);
    }


    //

    fn fail(mut reason: string = '')
    {
        if (!reason)
            reason = 'Unexpected `' + _here.value + '`.';

        let fname = _here.fname;
        let l0    = _here.line;
        let c0    = _here.col;

        let addr = '@' + l0 + ':' + c0;

        return Fail.fail(fname + ' ' + addr + ':\n\t' + reason);
    }


    //

    fn Template(node: Node): Template
    {
        return Template( :node );
    }

    fn Binding(id: string, type: Type)
    {
        return Scope_add(_scope, 'var', id, type);
    }

    fn Field(id: string, structType: Type, fieldType: Type)
    {
        return Scope_add(
            _scope,
            'field', id, fieldType,
            1, 1, [ 'this' ], [ structType ]);
    }

    fn TemplateDecl(node: Node)
    {
        let id = node.value;

        let min = node.kind == 'fn'
            ? node.items.length + FN_ARGS_BACK
            : fail('TODO');

        let max = node.kind == 'fn'
            ? 0xffffff // implicit args etc, dunno whats happening, allow it all
            : min;

        let template = Template(node);

        mut arg_n: string[] = null;
        if (node.kind == 'fn')
        {
            arg_n = [];

            let items = node.items;
            for (mut i = 0, n = items.length + FN_ARGS_BACK; i < n; i++)
            {
                let arg = items[i] || fail();
                arg.kind == 'let' || fail();
                let name = arg.value || fail();
                arg_n[i] = name;
            }
        }

        return Scope_add(
            _scope,
            'template', id, t_template,
            min, max, arg_n, null, null,
            template);
    }

    fn FnDecl(id: string, node: SolvedNode)
    {
        let items: SolvedNodes = node.items;
        let rnode = items[items.length + FN_RET_BACK];
        let ret   = rnode && rnode.type || fail();

        let max   = items.length + FN_RET_BACK;
        let args  = items.slice(0, max);

        let arg_t: Type[]      = [];
        let arg_n: string[]    = [];
        let arg_d: SolvedNodes = [];

        mut min = 0;
        for (mut i = 0; i < max; i++)
        {
            let arg = args[i]  || fail();
            arg.kind == 'let'   || fail();
            arg_t[i] = arg.type  || fail();
            arg_n[i] = arg.value || fail();

            //
            let implicit = !!(arg.flags & F_IMPLICIT);

            // Non-implicit, non-defaulted argument?
            if (!implicit)
            {
                arg_d.length >= i || fail();

                let def = arg.items[LET_INIT] || null;
                arg_d[i] = def;
                if (!def)
                    min++;
            }
        }

        let overload = Scope_add(
            _scope,
            'fn', id, ret,
            min, max, arg_n, arg_t, arg_d);

        node.target = overload;

        return overload;
    }

    fn DefaultCtor(id: string, type: Type, members: SolvedNode[])
    {
        let arg_t:   Type[] = [];
        let arg_n: string[] = [];

        for (mut i = 0; i < members.length; i++)
        {
            let member = members[i];

            arg_t[i] = member && member.type  || fail();
            arg_n[i] = member && member.value || fail();
        }

        //
        let max   = members.length;
        let   min   = 0;
        let   arg_d: SolvedNode[] = null;

        {
            let defaults: SolvedNode[] = [];
            arg_d = defaults;
            for (mut i = 0; i < members.length; i++)
            {
                let member = members[i];
                let init   = member.items[LET_INIT] || tryDefaultInit(member.type);

                // Disable defaulting if any member is non-defaulted.
                if (!init)
                {
                    arg_d = null;
                    min   = max;
                    break;
                }

                defaults[i] = init;
            }
        }

        return Scope_add(
            _scope,
            'defctor', id, type,
            min, max, arg_n, arg_t, arg_d);
    }

    fn tryDefaultInit(type: Type): SolvedNode
    {
        // Reference? No init, else default.
        if (type.quals & q_ref)
            return null;

        return createDefaultInit(type);
    }

    fn createDefaultInit(type: Type): SolvedNode
    {
        return {
            kind:   'definit',
            flags:  0,
            value:  '',

            items:  [],
            token:  (_here || fail()),
            type,
            target: 0,
        };
    }

    fn solveDefinit(type: Type): SolvedNode
    {
        if (!type)
            return fail(
                'Cannot solve definit, no inferred type.');

        return tryDefaultInit(type)
            || fail('Cannot definit: ' + serializeType(type));
    }


    //

    fn Partial(id: string, viaIdx: ScopeIdx, overloadIdx: ScopeIdx)
    {
        let via      = GET(viaIdx);
        let overload = GET(overloadIdx);

        mut kind: 'p-unshift'|'p-wrap' = 'p-unshift';
        mut min = overload.min - 1;
        mut max = overload.max - 1;
        min >= 0 && max >= min || fail();

        let o_args     = overload.args || fail();
        let o_names    = overload.names;
        let o_defaults = overload.defaults;

        // Fixed.
        mut arg_t = o_args     && o_args    .length > 1 ? o_args    .slice(1) : null;
        mut arg_n = o_names    && o_names   .length > 1 ? o_names   .slice(1) : null;
        mut arg_d = o_defaults && o_defaults.length > 1 ? o_defaults.slice(1) : null;

        // Everything that's not a local/namespace/static/constant
        //  needs a value through which to activate.
        if (via.kind != 'var')
        {
            kind = 'p-wrap';
            min++;
            max++;

            let via_t = via.args && via.args[0] || fail();

            //
            if (!arg_t)
                arg_t = [];

            arg_t.unshift(via_t);
            if (arg_n)
                arg_n.unshift('using');
            if (arg_d)
                arg_d.unshift(null);
        }

        return Scope_add(
            _scope,
            kind, id, overload.type,
            min, max, arg_n, arg_t, arg_d,
            null, [ viaIdx, overloadIdx ]);
    }


    //

    function scope_using(viaIdx: ScopeIdx)
    {
        let via = GET(viaIdx);
        let actual = via.type || fail();

        for (let id of Scope_keys(_scope))
        {
            // Skip over operators.
            if (!/[a-zA-Z_]/.test(id))
                continue;

            let overloads = Scope_lookup(_scope, id);
            if (!overloads)
                continue;

            mut arity0 = false;
            for (mut i = 0, MUT_n0 = overloads.length; i < MUT_n0; i++)
            {
                let overloadIdx = overloads[i];
                let overload = GET(overloadIdx);

                if (overload.min < 1)
                {
                    arity0 = true;
                    continue;
                }

                // TODO using + templates, the fuck do we do?
                if (overload.template)
                    continue;

                let expect = (overload.args || fail())[0] || fail();
                if (!isAssignable(expect, actual))
                    continue;

                if (overload.min < 2 && arity0)
                    fail('`using` arity-0 conflict: `' + id + '`.');

                // MUT DURING ITER!
                Partial(id, viaIdx, overloadIdx);
            }
        }
    }

    function arr_move<T>(arr: T[], from: i32, to: i32)
    {
        // memcpy, memmove, mempcy.
        let pivot = arr[from];

        if (from < to)
            for (mut i = from; i < to; i++)
                arr[i] = arr[i + 1];

        if (from > to)
            for (mut i = from; i > to; i--)
                arr[i] = arr[i - 1];

        arr[to] = pivot;
    }

    function scope_tryMatch__mutargs(
        id: string, args: SolvedNodes,
        retType: Type, flags: i32): ScopeIdx
    {
        let overloads = Scope_lookup(_scope, id);
        if (!overloads)
            return 0;

        //
        mut matchIdx: ScopeIdx = 0;

        // Arity 0 - blind head match.
        // Allows simple shadowing of variables and such, latest wins.
        if (!args.length)
        {
            let headIdx = overloads[0];
            if (GET(headIdx).min == 0)
                matchIdx = headIdx;
        }

        if (!matchIdx)
        {
            let arity = args.length;

            // Prep labelled args for remap.
            mut names: (string)[]|null = null;
            if (flags & F_NAMED_ARGS)
            {
                names = [];
                mut some = false;

                for (mut i = 0; i < arity; i++)
                {
                    let arg = args[i];
                    names[i] =
                        arg && arg.kind == 'label'
                            ? (some = true, arg.value) || fail()
                            : null;
                }

                some || fail();
            }

            //
            NEXT: for (mut i = 0; i < overloads.length; i++)
            {
                mut overloadIdx = overloads[i];
                mut overload = GET(overloadIdx);

                TEST_AGAIN: for (;;)
                {
                    if (overload.min > arity || overload.max < arity)
                        continue NEXT;

                    // Match by return.
                    if (retType && !isAssignable(retType, overload.type || fail()))
                        continue NEXT;

                    // Remap named arguments.
                    if (names)
                    {
                        let overloadNames = overload.names;
                        if (!overloadNames)
                            continue NEXT;

                        // Move named arguments around.
                        for (mut i = 0; i < names.length; i++)
                        {
                            let id = names[i];
                            if (!id)
                                continue;

                            let idx = overloadNames.indexOf(id);
                            if (idx < 0)
                                continue NEXT;

                            arr_move(args, i, idx);
                            arr_move(names, i, idx);
                        }
                    }

                    // Specialize.
                    if (overload.template)
                    {
                        let specIdx = trySpecialize(overload.template, args);
                        if (!specIdx)
                            continue NEXT;

                        overloadIdx = specIdx;
                        overload = GET(specIdx);

                        // Repeat arity checks and such.
                        continue TEST_AGAIN;
                    }

                    // Done here.
                    break TEST_AGAIN;
                }

                // Type check args.
                let arg_t = overload.args || fail();
                let arg_d = overload.defaults;
                for (mut i = 0; i < args.length; i++)
                {
                    let arg = args[i];
                    if (!arg)
                    {
                        arg_d && arg_d[i] || fail();
                        continue;
                    }

                    if (!isAssignable(arg_t[i], (args[i] || fail()).type))
                        continue NEXT;
                }

                // Forbid ambiguity.
                if (matchIdx)
                    fail('Ambiguous callsite, matches multiple functions in scope: `' + id + '`.');

                // Done!
                matchIdx = overloadIdx;
            }
        }

        if (matchIdx)
        {
            let matched = GET(matchIdx);

            // Mutate call args last thing.
            let arg_d = matched && matched.defaults;
            if (arg_d)
                for (mut i = 0; i < arg_d.length; i++)
                    args[i] = args[i] || arg_d && arg_d[i] || fail();

            // Implicit argument injection.
            let arg_t = matched.args;

            if (arg_t && args.length < arg_t.length)
            {
                let arg_n = matched.names || fail();
                for (mut i = args.length; i < arg_t.length; i++)
                {
                    let id   = arg_n[i];
                    let type = arg_t[i];

                    // Propagate implicit.
                    bindImplicitArg(args, i, id, type);
                }
            }
        }

        return matchIdx;
    }

    fn repeat<T>(value: T, len: i32): T[]
    {
        let result = [];
        for (mut i = 0; i < len; i++)
            result[i] = value;

        return result;
    }

    function scope_match__mutargs(id: string, args: SolvedNodes, flags: i32): ScopeIdx
    {
        return scope_tryMatch__mutargs(id, args, null, flags)
            || Scope_lookup(_scope, id) && fail('No overload of `' + id + '` matches call signature.', args)
            || fail('`' + id + '` is not defined.');
    }

    fn solveNode(node: Node, type: Type = null): SolvedNode
    {
        let k = node.kind;

        if (k == 'root')       return solveRoot(node);
        if (k == 'block')      return solveBlock(node);
        if (k == 'label')      return solveComma(node);
        if (k == 'comma')      return solveComma(node);

        if (k == 'let')        return solveLet(node);
        if (k == 'call')       return solveCall(node);
        if (k == 'arrlit')     return solveArrayLiteral(node, type);
        if (k == 'if')         return solveIf(node);
        if (k == 'or')         return solveOr(node);
        if (k == 'and')        return solveAnd(node);
        if (k == 'loop')       return solveBlock(node);

        if (k == 'return')     return solveReturn(node);
        if (k == 'break')      return solveJump(node);
        if (k == 'continue')   return solveJump(node);

        if (k == 'int')        return solveInt(node);
        if (k == 'str')        return solveStr(node);
        if (k == 'empty')      return solveEmpty(node);

        if (k == 'definit')    return solveDefinit(type);

        return fail('TODO: ' + k);
    }

    fn isUnordered(kind: string)
    {
        return kind == 'fn'
            || kind == 'struct';
    }

    fn unorderedPrep(node: Node): SolvedNode
    {
        let k = node.kind;

        if (k == 'fn')         return uPrepFn(node);
        if (k == 'struct')     return uPrepStruct(node);

        return fail('TODO: ' + k);
    }

    fn unorderedSolve(node: Node, prep: SolvedNode)
    {
        let k = node.kind;

        if (k == 'fn')         return uSolveFn(node, prep);
        if (k == 'struct')     return uSolveStruct(node, prep);

        return fail('TODO: ' + k);
    }


    //

    fn solveRoot(node: Node): SolvedNode
    {
        TEST_expectImplicits = !!(node.flags & F_IMPLICIT);

        return SolvedNode(node, solveNodes(node.items), t_void);
    }

    fn solveBlock(node: Node): SolvedNode
    {
        let scope0 = Scope_push(_scope);
        let out = SolvedNode(node, solveNodes(node.items), t_void);
        Scope_pop(_scope, scope0);
        return out;
    }

    fn solveComma(node: Node): SolvedNode
    {
        let items = solveNodes(node.items);
        let last = items[items.length - 1] || fail();

        return SolvedNode(node, items, last.type || fail());
    }


    //

    let i32_min = 0xffffffff|0;
    let i32_max = 0x7fffffff|0;

    fn solveInt(node: Node): SolvedNode
    {
        let v = Number(node.value);
        if (v >= i32_min && v <= i32_max)
        {
            mut type = t_i32;
            // if (v != 0)
            //     type = qadd(type, q_non_zero);

            return SolvedNode(node, null, type);
        }

        return fail(
            'Out of range for an i32 literal.');
    }

    fn solveStr(node: Node): SolvedNode
    {
        let v = node.value;
        typeof v == 'string' || fail();

        return SolvedNode(node, null, t_string);
    }

    fn solveEmpty(node: Node): SolvedNode
    {
        return SolvedNode(node, null, t_void);
    }


    //

    fn uPrepFn(node: Node): SolvedNode
    {
        return __solveFn(false, false, node, null, -1);
    }

    fn uSolveFn(node: Node, prep: SolvedNode): SolvedNode
    {
        return __solveFn(true, false, node, prep, -1) || fail();
    }

    function __solveFn(solve: bool, spec: bool, n_fn: Node, prep: SolvedNode, caseIdx: i32): SolvedNode
    {
        let id = n_fn.value || fail('TODO anonymous fns');

        // Template early exit.
        if (spec)
        {
            solve || fail();
        }
        else if (n_fn.flags & F_TEMPLATE)
        {
            if (solve)
                return prep || fail();

            let tDecl = TemplateDecl(n_fn);
            let out   = SolvedNode(n_fn, null, t_void);
            out.target  = tDecl;
            return out;
        }

        // Prep reject.
        if (!solve && !(n_fn.flags & F_FULLY_TYPED))
            return null;

        let inItems   = n_fn.items;
        inItems.length >= FN_RET_BACK || fail();

        let out       = prep || SolvedNode(n_fn, null, t_void);

        let outItems: SolvedNodes = repeat(null, inItems.length);
        out.items       = outItems;

        //
        if (_current_fn && id != 'free')
        {
            _current_fn.flags |= F_HAS_CLOSURE;
            out.flags |= F_CLOSURE;
        }

        //////////////////////////
        {
            let current_fn0   = _current_fn;
            let scope0        = Scope_push(_scope);

            _current_fn         = out;

            // Arg decls.
            for (mut i = 0; i < inItems.length + FN_ARGS_BACK; i++)
            {
                let n_arg = inItems[i] || fail();
                n_arg.kind == 'let' || fail();
                outItems[i] = solveLet(n_arg);
            }

            /////////////////////////////////////////////////////
            mut n_ret   = inItems[inItems.length + FN_RET_BACK];
            mut n_body  = inItems[inItems.length + FN_BODY_BACK] || fail();

            // Pattern descent.
            if (caseIdx >= 0)
            {
                n_body.kind == 'pattern' || fail();
                let branch = n_body.items[caseIdx] || fail();
                let items = branch.items;

                n_ret   = items[items.length + FN_RET_BACK]  || n_ret || null;
                n_body  = items[items.length + FN_BODY_BACK] || fail();
            }

            // Return type annot.
            {
                let s_ret = n_ret && evalTypeAnnot(n_ret) || null;

                // MUT DURING SOLVE,
                //  implicit args splice in
                outItems[outItems.length + FN_RET_BACK] = s_ret;
            }

            // Only if actually solving the fn, the fn body.
            if (solve)
            {
                let s_body = solveNode(n_body) || fail();

                // MUT DURING SOLVE,
                //  implicit args splice in
                outItems[outItems.length + FN_BODY_BACK] = s_body;
            }

            //
            /////////////////////////////////////////////////////

            _current_fn         = current_fn0;
            Scope_pop(_scope, scope0);
        }
        //////////////////////////

        if (!prep)
            FnDecl(id, out);

        !solve || out.items[out.items.length + FN_BODY_BACK] || fail();

        return out;
    }


    //

    function TODO_memoize_mangler(args: SolvedNodes): string
    {
        mut mangle = '';
        for (mut i = 0; i < args.length; i++)
            mangle += '\v' + serializeType((args[i] || fail()).type);

        return mangle;
    }


    //

    fn trySpecialize(
        template: Template, args: SolvedNodes)
            : ScopeIdx
    {
        let mangle = TODO_memoize_mangler(args);

        //
        mut spec = template.specializations[mangle];
        if (!spec)
        {
            let node = doTrySpecialize(template, args) || null;

            spec = template.specializations[mangle] =
            {
                node:   node,
                index:  node ? node.target || fail() : 0,
            };
        }

        return spec.index;
    }

    fn doTrySpecialize(
        template: Template, args: SolvedNodes)
            : SolvedNode
    {
        let typeParams: TypeParams = {};

        let node = template.node;

        let result = node.kind == 'fn'
            ? trySpecializeFn(node, args, typeParams)
            : fail('TODO');

        return result;
    }


    //

    fn trySpecializeFn(
        node: Node, args: SolvedNodes, typeParams: TypeParams)
            : SolvedNode
    {
        let items = node.items;

        // First off, solve type params.
        for (mut i = 0, n = items.length + FN_ARGS_BACK; i < n; i++)
        {
            let argNode = items[i] || fail();
            argNode.kind == 'let'   || fail();

            let argValue = args && args[i];
            let inType = argValue && argValue.type;

            if (inType)
            {
                let argName = argNode.value || fail();
                if (!typeParams[argName])
                    typeParams[argName] = inType;
            }

            if (argNode.flags & F_TEMPLATE)
            {
                let annot = argNode.items[LET_TYPE];
                if (annot)
                {
                    let ok = inType && trySolveTypeParams(
                        annot, inType, typeParams);

                    if (!ok)
                        return null;
                }
            }
        }

        // Match pattern arm here.
        mut caseIdx = -1;

        let pattern = items[items.length + FN_BODY_BACK] || fail();
        if (pattern.kind == 'pattern')
        {
            let branches = pattern.items;
            for (mut i = 0; i < branches.length; i++)
            {
                let branch = branches[i];
                let items = (branch || fail()).items;
                let cond = items[0] || fail();

                if (evalTypePattern(cond, typeParams))
                {
                    caseIdx = i;
                    break;
                }
            }

            // All branches mismatch?
            if (caseIdx < 0)
                return null;
        }

        ////////////////////////////////
        _typeParams = typeParams;
        let typeParams0 = _typeParams;
        let scope0 = Scope_push(_scope);
        ////////////////////////////////

        let specialized = __solveFn(true, true, node, null, caseIdx) || fail();

        ////////////////////////////////
        _typeParams = typeParams0;
        Scope_pop(_scope, scope0);
        ////////////////////////////////

        return specialized;
    }


    //

    fn uPrepStruct(node: Node): SolvedNode
    {
        return __solveStruct(false, node, null);
    }

    fn uSolveStruct(node: Node, prep: SolvedNode): SolvedNode
    {
        return __solveStruct(true, node, prep);
    }

    function __solveStruct(solve: bool, node: Node, prep: SolvedNode): SolvedNode
    {
        let out     = prep || SolvedNode(node, null, t_void);

        let fields: StructField[];

        let id      = node.value || fail('TODO anonymous structs');
        let type    = registerStruct(id, fields, node.flags);

        // Add the arity-0 type entry.
        if (!prep)
            out.target = Scope_Typedef(_scope, id, type);

        if (!solve)
            return out;

        //////////////////////////
        {
            let current_strt0   = _current_strt;
            _current_strt       = type;

            out.items.resize(node.items.length);
            solveNodes(node.items, out.items);

            _current_strt       = current_strt0;
        }
        //////////////////////////

        // Add a default constructor.
        {
            let members: SolvedNode[];
            let items = out.items;

            for (mut i = 0; i < items.length; i++)
            {
                let item = items[i];
                if (item && item.kind == 'let' && (item.flags & F_FIELD))
                {
                    members.push(item);
                    fields.push({
                        id:   item.value || fail(),
                        type: item.type  || fail(),
                    });
                }
            }

            DefaultCtor(id, type, members);
        }

        return out;
    }


    //

    fn solveReturn(node: Node): SolvedNode
    {
        let out = SolvedNode(node, solveNodes(node.items), t_void);

        // Either use the return expression,
        //  or the void-returning return statement itself,
        //   so we always have a node to rely on.

        let nextExpr  = out.items[0] || out;
        let nextType  = nextExpr.type || fail();

        let fn        = _current_fn || fail();
        let items     = fn.items;
        let retIdx    = items.length + FN_RET_BACK;
        let prevExpr  = items[retIdx];
        let prevType  = prevExpr ? prevExpr.type || fail() : null;

        if (prevType)
            isAssignable(prevType, nextType)
                || fail('Non-assignable return types: ' + serializeType(prevType) + ' <- ' + serializeType(nextType));
        else
            items[retIdx] = nextExpr || fail();

        return out;
    }

    fn solveJump(node: Node): SolvedNode
    {
        return SolvedNode(node, null, t_void);
    }


    //

    fn solveLet(node: Node): SolvedNode
    {
        let annot     = node.items[LET_TYPE];
        let init      = node.items[LET_INIT];

        let s_annot   = annot && evalTypeAnnot(annot);
        let t_annot   = s_annot && s_annot.type;

        let   s_init    = init && solveNode(init, t_annot);
        let t_init    = s_init && s_init.type;

        let t_let     = t_annot || clear_refs(t_init || fail(
            'Variable declarations without explicit type annotations must be initialized.'));

        if (t_annot && t_init)
            isAssignable(t_annot, t_init) || fail(
                'Type annotation does not match init expression.');

        s_init = s_init && maybeCopyOrMove(
            maybePRValue(s_init), t_let);

        //
        let out       = SolvedNode(node, [s_annot || s_init, s_init], t_let);
        let id        = node.value || fail();

        if (node.flags & F_MUT)
            _current_fn || fail(
                'Mutable statics are not currently allowed.');

        //
        let overload  = out.flags & F_FIELD
            ? Field  (id, _current_strt || fail(), t_let)
            : Binding(id, node.flags & F_MUT
                ? add_mutref(t_let)
                : add_ref(t_let));

        if (out.flags & F_USING)
            scope_using(overload);

        return out;
    }


    //

    fn evalTypeAnnot(node: Node): SolvedNode
    {
        if (node.kind == 'call')
        {
            let items = node.items;
            if (items.length)
            {
                if (items.length == 1)
                {
                    let T = evalTypeAnnot(items[0] || fail()) || fail();
                    let t = T.type || fail();

                    if (node.value == '&')
                        return SolvedNode(node, null, add_ref(t));

                    if (node.value == '&mut')
                        return SolvedNode(node, null, add_mutref(t));

                    if (node.value == '[]')
                        return SolvedNode(node, null, createArray(t));
                }
                else if (items.length == 2)
                {
                    let a = evalTypeAnnot(items[0] || fail()).type || fail();
                    let b = evalTypeAnnot(items[1] || fail()).type || fail();

                    if (node.value == 'Map')
                        return SolvedNode(node, null, createMap(a, b));
                }
            }
            else
            {
                let id        = node.value || fail();
                let overloads = Scope_lookup(_scope, id);

                if (overloads)
                    for (mut i = 0; i < overloads.length; i++)
                    {
                        let maybe = GET(overloads[i]);
                        if (maybe.kind == 'type')
                            return SolvedNode(node, null, maybe.type || fail());
                    }

                fail('No type `' + id + '` in scope.');
            }
        }
        else if (node.kind == 'typeparam')
        {
            let id = node.value || fail();
            _typeParams || fail(
                'Unexpected type param: `$' + id + '`.');

            let type = _typeParams && _typeParams[id] || fail(
                'No type param `$' + id + '` in scope.');

            return SolvedNode(node, null, type);
        }

        return fail('TODO');
    }

    fn trySolveTypeParams(
        node: Node, type: Type, typeParams: TypeParams): bool
    {
        if (node.kind == 'call')
        {
            let items = node.items;
            if (items.length)
            {
                if (items.length == 1)
                {
                    let t = node.value == '&'    ? tryClear_ref(type)
                            : node.value == '&mut' ? tryClear_mutref(type)
                            : node.value == '[]'   ? tryClear_array(type)
                            : fail('TODO');

                    if (!t)
                        return false;

                    return trySolveTypeParams(
                        items[0] || fail(), t, typeParams);
                }
                else if (items.length == 2)
                {
                    if (node.value == 'Map')
                    {
                        let kv = tryClear_map(type);
                        if (!kv)
                            return false;

                        return trySolveTypeParams(items[0] || fail(), kv[0], typeParams)
                            && trySolveTypeParams(items[1] || fail(), kv[1], typeParams);
                    }
                }
            }
            else
            {
                let id        = node.value || fail();
                let overloads = Scope_lookup(_scope, id);

                if (overloads)
                    for (mut i = 0; i < overloads.length; i++)
                    {
                        let maybe = GET(overloads[i]);
                        if (maybe.kind == 'type')
                            return isAssignable(maybe.type || fail(), type);
                    }

                fail('No type `' + id + '` in scope.');
            }
        }
        else if (node.kind == 'typeparam')
        {
            let id = node.value || fail();
            let prev = typeParams[id];
            if (prev)
            {
                let inter = type_tryInter(prev, type);
                if (!inter)
                    return false;

                type = inter;
            }

            // TODO not here:
            //  we want to clear everything non-canonical from
            //   type params AFTER we solve & match the args,
            //    during the matching it shouldn't be necessary.
            //
            // After the match we need this to e.g. lift `non_zero`
            //  from integral results, etc.
            //
            typeParams[id] = clear_refs(type);

            return true;
        }

        return fail('TODO');
    }

    fn evalTypePattern(node: Node, typeParams: TypeParams): bool
    {
        let items = node.items;
        if (node.kind == 'call' && items.length == 2)
        {
            let left  = items[0] || fail();
            let right = items[1] || fail();

            if (node.value == '->')
            {
                if (left.kind  == 'typeparam' &&
                    right.kind == 'typetag')
                {
                    let tag   = right.value || fail();
                    let type  = left.value && typeParams[left.value] || fail(
                        'No type param `$' + left.value + '` in scope.');

                    return type_has(type, tag);
                }
                else
                {
                    ////////////////////////////////
                    let typeParams0 = _typeParams;
                    _typeParams       = typeParams;
                    ////////////////////////////////

                    //               is                //
                    // (actual) left -> right (expect) //
                    let expect = evalTypeAnnot(right).type;
                    let actual = evalTypeAnnot(left ).type;

                    ////////////////////////////////
                    _typeParams = typeParams0;
                    ////////////////////////////////

                    return isAssignable(expect, actual);
                }
            }
            else if (node.value == '&&')
            {
                return evalTypePattern(left,  typeParams)
                    && evalTypePattern(right, typeParams);
            }
            else if (node.value == '||')
            {
                return evalTypePattern(left,  typeParams)
                    && evalTypePattern(right, typeParams);
            }
        }

        return fail('TODO');
    }


    //

    fn createRead(id: string): Node
    {
        return {
            kind:   'call',
            flags:  F_ID,
            value:  id,
            items:  [],
            token:  (_here || fail()),
        };
    }

    fn solveCall(node: Node): SolvedNode
    {
        let id        = node.value || fail();
        mut args        = solveNodes(node.items) || [];

        // Implicit temporaries, all args are referable.
        for (mut i = 0; i < args.length; i++)
            args[i] = maybePRValue(args[i] || fail());

        //
        mut callTargIdx = scope_match__mutargs(id, args, node.flags);
        mut callTarg    = GET(callTargIdx);

        // `using` codegen.
        while (callTarg.partial)
        {
            let unshift   = callTarg.kind == 'p-unshift';

            let partial   = callTarg.partial  || fail();
            let viaIdx    = partial[0]        || fail();
            callTargIdx     = partial[1]        || fail();

            let via       = GET(viaIdx);
            callTarg        = GET(callTargIdx);

            // There's two things we can do here -
            //  -   either we're injecting an implicitly used local,
            //          e.g. the this pointer, or another `using` variable,
            //  -   or we're wrapping the head argument
            //          with another derefence or method call or whatever.

            // And that's all there is to `using`.
            let argNode   = CallerNode(
                createRead('__partial' as any),
                unshift ? [] : [ args[0] || fail() ],
                via.type || fail(),
                viaIdx);

            //
            if (!args)
                args = [];

            if (unshift)
                args.unshift(argNode);
            else
                args[0] = argNode;
        }

        //
        return CallerNode(
            node,
            args,
            callTarg.type || fail(),
            callTargIdx);
    }

    fn maybePRValue(node: SolvedNode)
    {
        if (!(node.type.quals & q_ref))
            node.type = add_prvalue_ref(node.type);

        return node;
    }


    // I feel this should be a fncall instead of this here.
    //  It's varargs - so is it a template or what?

    fn solveArrayLiteral(node: Node, type: Type)
    {
        let items = solveNodes(node.items) || fail();

        mut itemType = type && tryClear_array(type) || null;
        mut startAt = 0;
        if (!itemType && items.length)
        {
            let head = items[startAt++] || fail();
            itemType = clear_refs(head.type);
        }

        if (!itemType)
            return fail('Cannot infer empty arraylit.');

        for (mut i = startAt; i < items.length; i++)
            itemType = type_tryInter(itemType, (items[i] || fail()).type) || fail(
                '[array literal] No common supertype:', items);

        return SolvedNode(node, items,
            createArray(itemType) || fail());
    }


    // This is a weird one,
    //  in case this is the current fn we're solving,
    //   we wont have overload yet, but we do have the node,
    //    otherwise we have the overload and get the node from there.

    fn createLet(id: string, type: Type, flags: i32 = 0): SolvedNode
    {
        return {
            kind:   'let',
            flags:  flags|0,
            value:  id,

            items:  [],
            token:  (_here || fail()),
            type:   type,
            target: 0,
        };
    }

    function injectImplicitArg__mutfn(
        node: SolvedNode,
        id: string, type: Type): ScopeIdx
    {
        let mut_argNodes = node.items;
        let newArgIdx = mut_argNodes.length + FN_RET_BACK;

        // The new argnode.
        let newArgNode = createLet(id, type, F_IMPLICIT);

        mut_argNodes.splice(newArgIdx, 0, newArgNode);

        // If we dont have the overload yet,
        //  there's nothing else to do here.

        // TODO argname check should come first -
        //  the one below is too late,
        //   wont catch an argname dupe here.
        if (node.target)
        {
            let fn = GET(node.target);

            // We'll be mutating the overload.
            fn.kind == 'fn' || fail();
            let mut_args = fn.args || [];
            let mut_names = fn.names || [];

            mut_names.length == mut_args.length || fail();
            mut_names.indexOf(id) < 0 || fail(
                'Implicit argument name collision.');

            mut_args .push(type);
            mut_names.push(id);

            fn.args  = mut_args;
            fn.names = mut_names;
        }

        // TODO put in the original scope!
        let scope0   =    Scope_push(_scope);
        let overload =    Binding(id, type);
                            Scope_pop(_scope, scope0);
        return overload;
    }

    fn bindImplicitArg(
        args: SolvedNodes, argIdx: i32,
        id: string, type: Type)
    {
        TEST_expectImplicits || fail(
            'Attempting to propagate implicit arguments.');

        args.length >= argIdx || fail();

        args[argIdx] = CallerNode(
            createRead(id), [], type,
            getImplicit(id, type));
    }

    fn getImplicit(id: string, type: Type): ScopeIdx
    {
        mut matched = scope_tryMatch__mutargs(id, [], type, 0);
        if (!matched)
        {
            if (!_current_fn)
                return fail('No implicit `' + id + '` in scope.');

            matched = injectImplicitArg__mutfn(
                _current_fn, id, type) || fail();
        }

        return matched;
    }


    //

    fn solveIf(node: Node): SolvedNode
    {
        let items   = solveNodes(node.items);
        const [, cons, alt] = items;

        let priExpr = cons || alt || fail();
        let secExpr = cons && alt ? alt : cons;

        let priType = priExpr.type || fail();
        let secType = secExpr && (secExpr.type || fail());

        let outType: Type = !secType ? priType
            : type_tryInter(priType, secType) || fail(
                'No common supertype:', [ priExpr, secExpr ]);

        return SolvedNode(node, items, outType || fail());
    }

    function sumType_logic(items: SolvedNodes): Type
    {
        // All args refs?
        if (items.length)
        {
            mut sumType: Type = (items[0] || fail()).type;
            for (mut i = 1; i < items.length; i++)
            {
                let type = (items[i] || fail()).type;
                if (type == t_never)
                {
                    i == items.length - 1 || fail(
                        'Dead code following never [A].');

                    continue;
                }

                sumType = type_tryInter(sumType, type);
                if (!sumType)
                {
                    sumType = null;
                    break;
                }
            }

            sumType != t_never || fail(
                'Dead code following never [B].');

            if (sumType && (sumType.quals & q_ref))
                return sumType;
        }

        return t_bool;
    }

    fn solveAnd(node: Node): SolvedNode
    {
        let items = solveNodes(node.items);

        return SolvedNode(
            node, items,
            sumType_logic(items));
    }

    fn solveOr(node: Node): SolvedNode
    {
        let items = solveNodes(node.items);

        mut t_or = sumType_logic(items);
        if (t_or == t_bool)
        {
            mut change = false;

            // Look for the `(a && b) || c` pattern -
            //  With correct codegen, only `b` and `c` need to intersect,
            //   `a` is simply another condition for using `b`.
            let alts = items.slice();
            for (mut i = 0; i < alts.length - 1; i++)
            {
                let alt = alts[i] || fail();
                if (alt.kind == 'and')
                {
                    alts[i] = alt.items[alt.items.length - 1];
                    change = true;
                }
            }

            if (change)
                t_or = sumType_logic(alts);
        }

        return SolvedNode(
            node, items, t_or);
    }


    //

    fn SolvedNode(
        node: Node, items: SolvedNodes, type: Type)
            : SolvedNode
    {
        return {
            kind:  node.kind ,
            flags: node.flags,
            value: node.value,

            items: items || [],
            token: node.token,
            type,
            target: 0,
        };
    }

    fn wrap(kind: string, node: SolvedNode, flags: i32): SolvedNode
    {
        return {
            kind,
            flags:  flags,
            value:  '',

            items:  [ node ],
            token:  node.token,
            type:   node.type,
            target: 0,
        };
    }

    fn CallerNode(
        node: Node, items: SolvedNodes, type: Type, target: ScopeIdx)
            : SolvedNode
    {
        let overload = GET(target);

        // HACK -
        // TBD how we make this stuff work in real life.
        if (overload.kind == 'field')
        {
            let head = items.length == 1 && items[0] || fail();
            let headType = head.type || fail();

            type = add_refs_from(headType, type);
        }

        // Tag copies and moves.
        else if (items.length)
        {
            let args = overload.args || fail();
            for (mut i = 0; i < items.length; i++)
                items[i] = maybeCopyOrMove(
                    items[i] || fail(), args[i]);
        }

        //
        let out = SolvedNode(node, items, type);
        out.target = target;
        return out;
    }

    fn maybeCopyOrMove(
        node: SolvedNode, slot: Type): SolvedNode
    {
        let q = slot.quals;
        if (q & q_ref)
            return node;

        mut op: 'move'|'copy' = 'copy';

        if (!(q & q_copy))
        {
            if (!(q & q_move))
                fail('Non-copy/non-move?');

            op = 'move';
        }

        return wrap(op, node,
            node.type.quals & q_prvalue
                ? F_ELISION
                : 0);
    }


    //

    fn solveNodes(nodes: Node[], result: SolvedNodes = []): SolvedNodes
    {
        let here0 = _here;

        mut offset = 0;

        for (mut i = 0; i < nodes.length; i++)
        {
            let node = nodes[i];
            if (!node)
            {
                result[i] = node;
                continue;
            }

            // Regular solve.
            if (!isUnordered(node.kind))
            {
                _here       = node.token || _here;
                result[i]   = solveNode(node);
                continue;
            }

            // Unordered solve -
            //  batches multiple potentially recursive declarations,
            //   so we can expose them all in scope prior to solving types.

            // This allows us to have groups of mutually recursive types & functions,
            //  without risking stuff depending on constants & variables
            //   introduced halfway through.
            let i0 = i;
            let   i1 = nodes.length;

            // First pass, expose stuff in scope
            //  without doing type checking when possible.
            for (mut i = i0; i < nodes.length; i++)
            {
                let node = nodes[i];
                if (!node)
                {
                    result[i] = node;
                    continue;
                }

                if (!isUnordered(node.kind))
                {
                    i1 = i;
                    break;
                }

                _here       = node.token || _here;
                result[i]   = unorderedPrep(node);
            }

            // Second pass, do the remaining work.
            for (mut i = i0; i < i1; i++)
            {
                let node = nodes[i];
                if (node)
                {
                    _here       = node.token || _here;
                    result[i]   = unorderedSolve(node, result[i]);
                }
            }

            // Continue from group end.
            i1 > i0 || fail();
            i = i1 - 1; // <- loop++
        }

        result.length == nodes.length + offset || fail();

        _here = here0;
        return result;
    }


    // So lets go.

    return {
        root: solveNode(parse),
        scope: _scope || fail(),
    };
}


// Solve & cache the prelude.

fn listGlobals(): Scope
{
    let scope = Scope(null);

    Scope_Typedef(scope, 'i32',    t_i32   );
    Scope_Typedef(scope, 'bool',   t_bool  );
    Scope_Typedef(scope, 'void',   t_void  );
    Scope_Typedef(scope, 'string', t_string);
    Scope_Typedef(scope, 'never',  t_never );

    return scope;
}

let PRELUDE: Scope = runSolver(
    parse(lex(prelude_src as Source, '__prelude' as Filename)),
        listGlobals())
            .scope;

pub fn solve(parse: Node)
{
    return runSolver(
        parse, Scope(PRELUDE));
}








// A very quick test.

fn ZERO(): i32
{
    let res_lex = lex(
        fname: 'filename',
        src: 'let hw = "hello\\nworld";');

    let res_parse = parse(
        'filename', res_lex.tokens);

    return res_parse.kind == 'root' ? 0 : 101;
}
