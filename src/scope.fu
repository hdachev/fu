import flags;
import types;
import usertypes;
import helpers;
import module;
import fail;


//

struct ScopeSkip
{
    start:          i32;
    end:            i32;
};


//

fn target(si: ScopeItem)
    Target(:si._packed & 0x3fff_ffff_ffff_ffff);

fn ScopeItem_shadows(si: ScopeItem)
    !!(si._packed & 0x8000_0000_0000_0000);

fn ScopeItem_canSkipRest(si: ScopeItem)
    !!(si._packed & 0x4000_0000_0000_0000);

fn ScopeItem_canSkipRest_set(ref si: ScopeItem)
    si._packed |= 0x4000_0000_0000_0000;

fn ScopeItem_canSkipRest_clear(ref si: ScopeItem)
    si._packed &= ~0x4000_0000_0000_0000;

fn ScopeItem(id: string, target: Target, shadows: bool)
    ScopeItem(:id, :target._packed & 0x3fff_ffff_ffff_ffff
                       | (shadows && 0x8000_0000_0000_0000));


//

fn Scope_exports(scope: Scope, modid!: i32,
    pub_imports!: i32[])
{

    // Scope.items and Scope.implicits -
    //  public & private + the field always-globals.

    fn collect(what,
        ref pub_cnt!: i32,
        mut public?: ScopeItem[],
        mut private?: ScopeItem[])
    {
        scope.what.each: |mut item|
        {
            if (item.target.modid != modid)
                continue;

            //////////////////////////////////
            ScopeItem_canSkipRest_clear(item);
            //////////////////////////////////

            let overload = scope.overloads[item.target.globid - 1];
            (overload.flags & F_PUB ? public : private) ~= item;
        }

        pub_cnt         = public.len;
        public         ~= private;
        return public;
    }

    mut pub_items       = 0;
    mut pub_implicits   = 0;
    mut pub_globals     = 0;

    let items           = collect(.items,     pub_cnt: pub_items);
    let implicits       = collect(.implicits, pub_cnt: pub_implicits);
    let globals         = collect(.globals,   pub_cnt: pub_globals);


    // Conversions, field conversions namespaced per struct,
    //  way more efficient that the stuff above.

    mut converts:       Target[];
    mut prv_converts:   Target[];

    for (mut i = 0; i < scope.converts.len; i++)
    {
        let item = scope.converts[i];
        if (item.modid == modid)
        {
            let overload = scope.overloads[item.globid - 1];
            (overload.flags & F_PUB ? converts : prv_converts) ~= item;
        }
    }

    let pub_converts    = converts.len;
    converts           ~= prv_converts;


    //

    return Scope(
        :items,         :pub_items,
        :implicits,     :pub_implicits,
        :converts,      :pub_converts,
        :globals,       :pub_globals,

        :scope.overloads,
        :scope.extended,

        imports:        pub_imports,
        privates:       [],
        usings:         []);
}


////////////////////////////////

fn count(
    items: $T[..],
    scope_skip: ScopeSkip[])
{
    mut count = 0;
    items.each(:scope_skip): |_| count++;
    return count;
}

fn each(
    items: $T[..],
    scope_skip: ScopeSkip[],
    fn,
    start = 0)
{
    let END_DUMMY = ScopeSkip(start: items.len, end: items.len);

    mut i0 = start;
    for (mut i = 0; i < scope_skip.len + 1; i++)
    {
        let ss = i < scope_skip.len ? scope_skip[i] : END_DUMMY;
        if (ss.end <= i0)
            continue;

        let i1 = ss.start;
        for (shadow mut i = i0; i < i1; i++)
            fn(items[i], i?: i);

        i0 = ss.end;
    }
}

fn reveach(items: $T[..], ss: ScopeSkip[], fn)
{
    mut ssi = ss.len - 1;
    mut ssN = ssi >= 0 && ss[ssi].end - 1;

    for (mut i = items.len; i --> 0; )
    {
        if (ssi >= 0 && i == ssN) {
            i   = ss[ssi--].start;
            ssN = ssi >= 0 && ss[ssi].end - 1;
            continue;
        }

        fn(items[i], i);
    }
}

fn search(
    ref items: ScopeItem[..], id: string,
    ref scope_iterator: i32,
    scope_skip: ScopeSkip[],
    ref shadows: bool,
    extra_items?: Target[..],
    field_items?: ScopeItem[..]): Target
{
    PROFILE(.ScopeSearch);

    if (SELF_TEST)
        scope_iterator >= 0 || BUG(
            "scope::search: Iterator already exhausted.");

    shadows = false;

    // We've got to do actual scope items first for shadowing to work correctly.
    let N = items.len;
    if (scope_iterator < 0x10000000.i32)
        scope_iterator = 0x10000000.i32 + N;

    if (scope_iterator > 0x10000000.i32 && scope_iterator < 0x1fffffff.i32)
    {
        /////////////////////////////////
        scope_iterator -= 0x10000000.i32;
        /////////////////////////////////

        // Actual scope items,
        //  this is the only stuff we need to scope-skip through.
        mut skiptrap = -1;

        fn nextSkip()
        {
            for (mut i = scope_skip.len; i --> 0; )
            {
                let ss = scope_skip[i];

                let s1 = ss.end - 1;
                if (scope_iterator > s1)
                {
                    skiptrap = s1;
                    break;
                }

                let s0 = ss.start - 1;
                if (scope_iterator > s0)
                    scope_iterator = s0;
            }

            if (skiptrap >= items.len)
                throw ("Scope/search: scope_skip will jump past end of items.");
        }

        // Go.
        let scope_iterator0 = scope_iterator;

        scope_iterator--;
        nextSkip();
        scope_iterator++;

        while (scope_iterator --> 0)
        {
            if (scope_iterator == skiptrap)
            {
                nextSkip();
                scope_iterator++;
                continue;
            }

            let item = items[scope_iterator];
            if (item.id == id)
            {
                shadows = ScopeItem_shadows(item);

                ////////////////////////////////
                if (ScopeItem_canSkipRest(item))
                {
                    // println("     SKIP " id " " scope_iterator);
                    scope_iterator = 0;
                }
                ////////////////////////////////

                /////////////////////////////////
                scope_iterator += 0x10000000.i32;
                /////////////////////////////////

                return item.target;
            }
        }

        ////////////////////////////////////////////////////////
        if (scope_iterator0 >= 0 && scope_iterator0 < items.len)
        {
            ref item = items[scope_iterator0];

            if (SELF_TEST)
                items[scope_iterator0].id == id || BUG(
                    "scope::search WILL_SKIP about to flag item.id(" ~ item.id ~ ") != search.id(" ~ id ~ ")");

            // println("WILL SKIP " id " " scope_iterator0);
            ScopeItem_canSkipRest_set(item);
        }
        ////////////////////////////////////////////////////////
    }

    // Field items, the next batch.
    shadow let N = field_items.len;
    if (scope_iterator < 0x60000000.i32)
        scope_iterator = 0x60000000.i32 + N;

    if (scope_iterator > 0x60000000.i32 && scope_iterator < 0x6fffffff.i32)
    {
        /////////////////////////////////
        scope_iterator -= 0x60000000.i32;
        /////////////////////////////////

        while (scope_iterator --> 0)
        {
            let item = field_items[scope_iterator];
            if (item.id == id)
            {
                /////////////////////////////////
                scope_iterator += 0x60000000.i32;
                /////////////////////////////////

                return item.target;
            }
        }
    }

    // Finally extra items, the simplest loop.
    shadow let N = extra_items.len;
    if (scope_iterator < 0x70000000.i32)
        scope_iterator = 0x70000000.i32 + N;

    if (scope_iterator > 0x70000000.i32 && scope_iterator < 0x7fffffff.i32)
    {
        /////////////////////////////////
        scope_iterator -= 0x70000000.i32;
        /////////////////////////////////

        while (scope_iterator --> 0)
        {
            let item = extra_items[scope_iterator];

            /////////////////////////////////
            scope_iterator += 0x70000000.i32;
            /////////////////////////////////

            return item;
        }
    }

    // Done.
    return Target;
}


//

fn search(
    targets!: Target[..],
    ref scope_iterator: i32)
{
    while (scope_iterator < targets.len)
        return targets[scope_iterator++];

    return [];
}

fn search(
    items: ScopeItem[..], id: string,
    ref scope_iterator: i32,
    field_items?: ScopeItem[..]): Target
{
    let N0 = items.len;
    while (scope_iterator < N0)
    {
        let item = items[scope_iterator++];
        if (item.id == id)
            return item.target;
    }

    shadow let N1 = N0 + field_items.len;
    while (scope_iterator < N1)
    {
        let item = field_items[(scope_iterator++) - N0];
        if (item.id == id)
            return item.target;
    }

    // Done.
    return Target;
}


////////////////////////////////

fn Scope_create(
    implicit module:    Module,
    ref scope:          Scope,

    kind:               Kind = "__no_kind_yet",
    name!?:             string,
    type?:              Type,
    flags!?:            Flags,
    asserts!?:          DeclAsserts,
    status?:            SolverStatus,
    nest!?:             i32,

    asArgument!?:       bool): Target
{
    mut position: i32;
    ref overloads = nest
        ? {
            ref ext     = scope.extended.ensure(nest);
            position    = ext.nextIndexOfLocal(:asArgument);
            ext.args_neg += asArgument ? 1 : 0;
            ext.args_n_locals
          }
        : {
            position    = scope.overloads.len + 1;
            scope.overloads
          };

    let target = Target(
        modid:      module.modid,
        globid:     nest || position,
        locid:      nest && position);

    overloads.insert(
        asArgument ? 0 : overloads.len,
        Overload(:name, :kind, :flags, :type, :status, :asserts,
            solved: []));

    if (!nest)
    {
        // TODO FIX EXT are 0-based right now,
        //  although we don't benefit from the zeroeth element still.
        //
        scope.extended.grow(overloads.len + 1);
    }

    return target;
}

fn Scope_set(ref scope: Scope, id: string, target: Target, shadows!: bool)
{
    Scope_set(:scope.items, :id, :target, :shadows);
}

fn Scope_set(ref items: ScopeItem[], id: string, target: Target, shadows!: bool)
{
    items.push(ScopeItem( :id, :target, :shadows ));
}
