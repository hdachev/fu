import module;

fn is_primitive(t: Type) {
    let c = t.canon[0];
    return c == 'u' || c == 'i' || c == 'f' || c == 'b' || c == 'c'
                    || c == 'm' || c == 'e';
}

fn is_arithmetic(t: Type) {
    let c = t.canon[0];
    return c == 'u' || c == 'i' || c == 'f';
}

fn is_bitfield(t: Type) {
    let c = t.canon[0];
    return c == 'u' || c == 'i'
                    || c == 'm';
}

fn is_integral(t: Type) {
    let c = t.canon[0];
    return c == 'u' || c == 'i';
}

fn is_unsigned(t: Type) {
    let c = t.canon[0];
    return c == 'u';
}

fn is_floating_pt(t: Type) {
    let c = t.canon[0];
    return c == 'f';
}

fn is_boolean(t: Type) {
    let c = t.canon[0];
    return c == 'b';
}

fn is_enum(t: Type) {
    let c = t.canon[0];
    return c == 'e';
}

fn is_flags(t: Type) {
    let c = t.canon[0];
    return c == 'm';
}


//

fn basePrimPrefixLen(canon: string): int
{
    mut c = canon[0];

    // Let's consider two new category types:
    //  e - for enums, no arithmetics, no bitwise ops
    //  m - for flags, bitwise ops are fine

    // Category.
    c == 'i' || c == 'u'
             || c == 'f'
             || c == 'b' || c == 'c'
             || c == 'e' || c == 'm'
             || throw("basePrimPrefix: bad char0: " ~ canon);

    // Bitcount.
    for (mut offset = 1;; offset++)
    {
        c = offset < canon.len && canon[offset];
        if (c < '0' || c > '9')
            return offset;
    }
}
