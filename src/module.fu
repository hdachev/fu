
type Quals = u32; // cant use 64 now because of parseType
let Quals_bitsize = 32;


//

nocopy struct Context
{
    modules:    Module[];
    dep_order:  i32[];

    // FS facts.
    files:      map::Map(string, string);
    fuzzy:      map::Map(string, string);
};

struct Module
{
    modid:      i32;
    fname:      string;

    in?:        ModuleInputs;
    order?:     ModuleOrder;
    out?:       ModuleOutputs;
    stats?:     ModuleStats;
};

struct ModuleInputs
{
    src:        string;
    lex:        LexerOutput;
    parse:      ParserOutput;
};

struct ModuleOrder
{
    dep_depth:  i32;
};

struct ModuleOutputs
{
    types:      Struct[];
    solve:      SolverOutput;
    cpp:        CodegenOutput;
};

struct ModuleStats
{
    lex:        stat::ModuleStat;
    parse:      stat::ModuleStat;
    solve:      stat::ModuleStat;
    codegen:    stat::ModuleStat;
};


//

struct Struct
{
    ::kind;
    name:       string;

    target?:    Target;
    items?:     ScopeItem[];
    imports?:   i32[];
    converts?:  Target[];

    base?:      string;
    flatCount?: i32;
    declDepth?: i32;
    all_triv?:  bool;
};


//

struct LexerOutput
{
    tokens:     Token[];
};

struct Import
{
    token:      TokenIdx;
    value:      string;
};

struct ParserOutput
{
    root:       Node;
    imports:    Import[];
    warnings:   string[];
}

struct SolverOutput
{
    root:       SolvedNode;
    scope:      Scope;

    // Important solver events for testing.
    notes:      flags::SolverNotes;
};

struct CodegenOutput
{
    using src:  string;

    // Libraries and such.
    link?:              string[];
    include_dirs?:      string[];
    extra_sources?:     string[];

    // Live exports.
    live?:              i32[];

    //
    defects?:           flags::CGDefects;
};


//

struct LineColChars
{
    line:       i32;
    col:        i32;
    chars:      i32;
};

struct Token
{
    true        ::kind;
    using lcc:  LineColChars;
    value:      string;
};


//

struct Node
{
    true        ::kind;
    asserts?:   flags::DeclAsserts;
    syntax?:    flags::ParseSyntax;

    flags?:     flags::Flags;
    value:      string;
    items?:     Node[];
    token:      TokenIdx;
};

struct TokenIdx
{
    modid:      i32;
    tokidx:     i32;
};


//

struct Target
{
    _packed!:   u64;
}

struct Helpers
{
    index:      i32;
};

struct SolvedNode
{
    true            ::kind;

    helpers:        Helpers; // TODO not here: I had room for it, but honestly this is not the best place for this.
    flags:          flags::Flags;
    _loop_start?:   i32;

    value:          string;
    items:          SolvedNode[];
    token:          TokenIdx;

    using type:     Type;
    target:         Target;
}


//

struct ScopeItem
{
    true id:        string;
    _packed:        u64;
};

nocopy struct Scope
{
    overloads:      Overload[];
    extended:       Extended[];

    items:          ScopeItem[];
    implicits:      ScopeItem[];
    imports:        i32[];
    privates:       i32[];
    usings:         Target[];
    converts:       Target[];

    pub_items:      i32;
    pub_cnvrts:     i32;
};


//

struct Template
{
    true node:      Node;
    imports:        i32[];
};


//

struct Argument
{
    name?:          string;
    autocall?:      string;

    using type?:    Type;
    default?:       SolvedNode;
    flags?:         flags::Flags;
    target?:        Target;

    // Argument A may safely invalidate argument B
    //  when all writes to A happen after the last use of B.
    //
    may_invalidate?:    bitset::NegatedBitSet;

    // Argument A may safely alias argument B
    //  if no unstable pointers derived from B
    //   are used after A is written to for the last time,
    //    and vice-versa.
    //
    may_alias?:         bitset::NegatedBitSet;
};

struct COWInside
{
    vtype:          ValueType;
    token:          TokenIdx;
    argTarget:      i32;
    mayEscapeVia:   i32;
    exitPaths:      flags::ExitPaths;
};

struct Overload
{
    true            ::kind;

    flags:          flags::Flags;
    status?:        flags::SolverStatus;

    name:           string;

    type:           Type;

    solved:         SolvedNode;
};

struct Extended
{
    // Arity.
    min:            i32;
    max:            i32;
    args:           Argument[];

    cows_inside:    COWInside[];

    // The scopeskips here aren't needed in global scope (e.g. anything imported).
    spec_of?:       Target;
    true template:  Template;

    // The new nodelists.
    locals?:        Overload[];

    // Previously we appended a fns signature hash to its name,
    //  now we'll do this in the codegen.
    //
    // But this could also be used for some kind of content addressed code thing,
    //  TBD where we can take this, deduplicate identical functions or something.
    //
    sighash?:       string;

    //
    fx_mask?:       effects::FxMask;
};


//

struct ValueType
{
    quals?:         Quals;
    // TODO FIX wasting an i32 here until quals/usage goes u64
    canon:          string;
};

struct Type
{
    using vtype:    ValueType;
    lifetime?:      Lifetime; // Excluding this from the truth check feels dangerous
    vfacts?:        VFacts;
};

struct Lifetime { using uni0n!: Region[]; };

struct Region { _regpack!: u32; };


// Instead of this we'd have a string listing qualities,
//  known value ranges, etc, but this should be enough to get the basics set it.

using flags VFacts
{
    AlwaysTrue
    AlwaysFalse
    Typename
};


// Argument OOE, here for sharing in solver & cg.

fn isRTL(o: Overload): bool
    !!(o.flags & flags::F_OOE_RTL);

fn isRTL_set(ref o: Overload, rtl: bool)
    if (rtl)    o.flags |=  flags::F_OOE_RTL;
    else        o.flags &= ~flags::F_OOE_RTL;


// New argument order of evaluation rules -
//  1. everything left-to-right,
//  2. but all mutrefs after all non-mutrefs.
//
// Why:
//  1. generalizes the usual LTR vs RTL rules in c-like languages,
//      e.g. everything LTR, except assignments and arr[i] RTL, etc;
//  2. ensures that if some constref arg needs a temp copy,
//      we'll only copy the thing needed instead of everything it depends on;
//  3. will help with the COW crisis by making more copies happen
//      before new mutrefs are taken, which should help compile more stuff
//       if we need to forbid copies during borrows.

fn argsForward(lax RTL: bool, host_args: [Argument], fn,
    seqIdx_start = 0)
{
//*
    mut seqIdx = 0;

    mut lastPass = 1;
    for (mut pass = 0; pass < lastPass; pass++)
    {
        for (mut i = 0; i < host_args.len; i++)
        {
            let host_arg = host_args[i];
            if (!!pass != (RTL ? !i : !!(host_arg.flags & F_IMPLICIT || host_arg.type.is_mutref)))
            {
                lastPass = 2;
                continue;
            }

            if (seqIdx_start <= seqIdx)
                fn(:i, host_arg?: host_arg, seqIdx?: seqIdx);

            seqIdx++;
        }
    }
/*/
    mut seqIdx = 0;

    let N           = host_args.len;

    let start       = !RTL ? 0 : N - 1;
    let end         = !RTL ? N : 0 - 1;
    let incr        = !RTL ? +1  :  -1;

    for (mut i = start; i != end; i += incr)
    {
        if (seqIdx_start <= seqIdx)
            fn(:i, host_arg?: host_args[i], seqIdx?: seqIdx);

        seqIdx++;
    }
//*/
}

fn argsReverse(lax RTL: bool, host_args: [Argument], fn)
{
//*
    mut lastPass = 1;
    mut ooe_isLast = true;
    for (mut pass = 2; pass --> lastPass; )
    {
        for (mut i = host_args.len; i --> 0; )
        {
            let host_arg = host_args[i];
            if (!!pass != (RTL ? !i : !!(host_arg.flags & F_IMPLICIT || host_arg.type.is_mutref)))
            {
                lastPass = 0;
                continue;
            }

            fn(:i, :host_arg, ooe_isLast?: ooe_isLast);
            ooe_isLast = false;
        }
    }
/*/
    let N           = host_args.len;

    let start       = RTL ? 0 : N - 1;
    let end         = RTL ? N : 0 - 1;
    let incr        = RTL ? +1  :  -1;

    for (mut i = start; i != end; i += incr)
        fn(:i, host_arg: host_args[i], ooe_isLast?: i == start);
//*/
}


// Packed targets, one u64 packing modid+global+local.
//  This gives us a capacity of up to 1 million modids/globids/locids,
//   which is not a lot but should be relatively hard to hit in practice.
//
// Leaves us with the four msbits for flags & such,
//  we use them for specfails (msb set),
//   and for shadowing, stop-searching and could use them for F_PUBs too.
//
inline fn  modid(t: Target) i32(t._packed       & 0xfffff);
inline fn globid(t: Target) i32(t._packed >> 20 & 0xfffff);
inline fn  locid(t: Target) i32(t._packed >> 40 & 0xfffff);

fn Target(modid: i32, globid: i32, locid: i32)
{
    modid >= 0 &&
    globid > 0 &&
    locid >= 0 || throw("Target: bad modid/index/locid");

    return Target(_packed: modid.u64
                        | globid.u64 << 20
                        |  locid.u64 << 40);
}
