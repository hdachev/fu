import parser;
import helpers;


//

pub nocopy struct Context
{
    modules: Module[];

    // FS facts.
    files: map::Map(string, string);
    fuzzy: map::Map(string, string);
};

pub struct Module
{
    modid:      i32;
    fname:      string;

    in?:        ModuleInputs;
    out?:       ModuleOutputs;
    stats?:     ModuleStats;
};

pub struct ModuleInputs
{
    src:        string;
    lex:        lexer::LexerOutput;
    parse:      ParserOutput;
};

pub struct ModuleOutputs
{
    deps:       i32[];
    types:      Struct[];
    solve:      SolverOutput;
    cpp:        CodegenOutput;
};

pub struct ModuleStats
{
    lex:        stat::ModuleStat;
    parse:      stat::ModuleStat;
    solve:      stat::ModuleStat;
    codegen:    stat::ModuleStat;
};


//

pub struct Struct
{
    name:       string;

    target?:    Target;
    items?:     ScopeItem[];
    imports?:   i32[];
    converts?:  Target[];

    flat_cnt?:  i32;
    all_triv?:  bool;
};


//

pub struct SolverOutput
{
    root:   SolvedNode;
    scope:  Scope;

    // Important solver events for testing.
    notes:  i32;
};

pub struct CodegenOutput
{
    using src:      string;
};


//

pub struct Target
{
    modid:      i32;
    index:      i32;
};

pub struct SolvedNode
{
    nodeown:    Target; // TODO need to clean up Argument.default, callsites & structs -
    nodeidx:    i32;    //  We shouldn't need a target, all nodes are local to their fn.
};

pub struct SolvedNodeData
{
    kind:       string; // TODO enum, will save so many string copies

    helpers:    i32;    // TODO not here: I had room for it, but honestly this is not the best place for this.
    flags:      i32;    //  Ideally both should go, flags is a very leaky thing on solved AST.

    value:      string;
    items:      SolvedNode[];
    token:      TokenIdx;

    using type: Type;
    target:     Target;
};


//

pub struct ScopeItem
{
    id:         string;
    modid:      i32;
    packed:     u32;
};

pub nocopy struct Scope
{
    items:      ScopeItem[];
    overloads:  Overload[];
    extended:   Extended[];

    imports:    i32[];
    usings:     Target[];
    converts:   Target[];

    pub_count:  i32;
};


//

pub struct Template
{
    node:       Node;
    imports:    i32[];

    scope_memo: ScopeMemo;
    scope_skip: ScopeSkipMemos;
};

pub struct ScopeMemo
{
    items_len:      i32;
    imports_len:    i32;
    usings_len:     i32;
    converts_len:   i32;
    helpers_len:    i32;
};

pub struct ScopeSkipMemos
{
    // TODO FIX should not be exported,
    //  this is due to templates but exported templates dont skip

    items:      ScopeSkip[];
    declash:    ScopeSkip[];

    imports:    ScopeSkip[];
    usings:     ScopeSkip[];
    converts:   ScopeSkip[];

    helpers:    ScopeSkip[];
};

pub struct ScopeSkip
{
    // TODO FIX should not be exported,
    //  this is due to templates but exported templates dont skip

    start:  i32;
    end:    i32;
};


//

pub struct Partial
{
    via:        Target;
    target:     Target;
};

pub struct ArgWrite
{
    nodeidx:        i32; // Callsite nodeidx.
    arg_position:   i32; // Argument item idx.
};

pub struct Argument
{
    name?:          string;
    autocall?:      string;

    using type?:    Type;
    default?:       SolvedNode;
    flags?:         i32;

    // subset_at_risk: bitset::BitSet;
    risk_free?:     bitset::BitSet;
    written_via?:   ArgWrite;
};

pub struct Overload
{
    kind:           string;
    name:           string;
    type:           Type;
    flags:          i32;

    // TODO move exotic bloat over to module,
    //  all trailers can fit in the same
    //   [ modid / thing ] slot here.
    solved:         SolvedNode;

    // Solver state. // maybe we need flags enums already
    status?:        u32; // <- u32 to differentiate from flags

    // For locals, if non-zero, index of enclosing fn, obviously same modid.
    local_of?:      i32;
};

pub struct Extended
{
    // Arity.
    min:            i32;
    max:            i32;
    args:           Argument[];

    // The scopeskips here aren't needed in global scope (e.g. anything imported).
    spec_of?:       Target;
    template:       Template;

    // The new nodelists.
    nodes?:         SolvedNodeData[];
    locals?:        Overload[];

    // These are single-module-solve-only, no need to keep them here.
    extra_items?:   ScopeItem[];
    callsites?:     SolvedNode[];
};


//

pub struct ValueType
{
    quals: i32;
    modid: i32;
    canon: string;
};

pub struct Type
{
    using vtype:    ValueType;
    lifetime?:      Lifetime;
};


pub struct Lifetime { uni0n!: Region[]; };

pub struct Region { index!: i32; };
