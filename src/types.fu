
let q_mutref            = 1 << 0;
let q_ref               = 1 << 1;

pub let q_rx_copy       = 1 << 2;

pub let q_trivial       = 1 << 3;
pub let q_primitive     = 1 << 4;

pub let q_arithmetic    = 1 << 5;
pub let q_integral      = 1 << 6;
pub let q_signed        = 1 << 7;
pub let q_unsigned      = 1 << 8;
pub let q_floating_pt   = 1 << 9;

pub let q_rx_resize     = 1 << 10;

let TAGS =
[
    "mutref",
    "ref",

    "copy",

    "trivial",
    "primitive",

    "arithmetic",
    "integral",
    "signed",
    "unsigned",
    "floating_point",

    "resize",
];


//

pub let q_REF_EXTENSIONS
    = q_rx_copy
    | q_rx_resize;

pub let q_MUTINVAR = ~q_REF_EXTENSIONS;


//

pub let e_exit      = 1 <<  0;
pub let e_crash     = 1 <<  1;
pub let e_div0      = 1 <<  2;
pub let e_segv      = 1 <<  3;

pub let e_throw     = 1 <<  4;

pub let e_io        = 1 <<  8;

pub let e_malloc    = 1 << 12;
pub let e_memcpy    = 1 << 13;


//

pub struct Lifetime
{
    uni0n: i32[];
};

pub fn Lifetime_union(a: Lifetime, b: Lifetime): Lifetime
{
    // How does this work -
    //
    // In a lifetime union, there can be 0 or 1 local variables,
    //  and 0-N function arguments from any number of nested function frames
    //   (basically some function and its closures at whatever depth).
    //
    // There can be only one local - their lifetimes are obviously ordered,
    //  so only one local can survive any union, and that's the innermost,
    //   which is the greatest index. Innermost = first to die.
    //
    // Argument indices are -1-negated, so they always end up to the left
    //  of any non-arg locals, which trivializes this operation.
    //
    mut uni0n = set::union(a.uni0n, b.uni0n);
    if (uni0n.len >= 2 && uni0n[uni0n.len - 2] >= 0)
        uni0n.splice(uni0n.len - 2, 1);

    return Lifetime(:uni0n);
}


//

pub struct ValueType
{
    quals: i32;
    modid: i32;
    canon: string;
};

pub struct Effects
{
    raw: i32;
};

pub struct Type
{
    using vtype:    ValueType;
    lifetime?:      Lifetime;
    effects?:       Effects;
};

fn type_inter(a: Effects, b: Effects)
    Effects( raw: a.raw | b.raw );


//

fn ==(a: ValueType, b: ValueType)
    a.quals == b.quals &&
    a.modid == b.modid &&
    a.canon == b.canon;

pub fn ==(a: Lifetime, b: Lifetime)
    a.uni0n == b.uni0n;

pub fn ==(a: Effects, b: Effects)
    a.raw == b.raw;

pub fn ==(a: Type, b: Type)
    a.vtype    == b.vtype    &&
    a.lifetime == b.lifetime &&
    a.effects  == b.effects;


//

pub let Trivial     = q_rx_copy  | q_trivial     ;
pub let Primitive   = Trivial    | q_primitive   ;
pub let Arithmetic  = Primitive  | q_arithmetic  ;
pub let Integral    = Arithmetic | q_integral    ;
pub let SignedInt   = Integral   | q_signed      ;
pub let UnsignedInt = Integral   | q_unsigned    ;
pub let FloatingPt  = Arithmetic | q_floating_pt | q_signed;

pub let t_i8        = Type(ValueType(modid: 0, canon: "i8",  quals: SignedInt));
pub let t_i16       = Type(ValueType(modid: 0, canon: "i16", quals: SignedInt));
pub let t_i32       = Type(ValueType(modid: 0, canon: "i32", quals: SignedInt));
pub let t_i64       = Type(ValueType(modid: 0, canon: "i64", quals: SignedInt));

pub let t_u8        = Type(ValueType(modid: 0, canon: "u8",  quals: UnsignedInt));
pub let t_u16       = Type(ValueType(modid: 0, canon: "u16", quals: UnsignedInt));
pub let t_u32       = Type(ValueType(modid: 0, canon: "u32", quals: UnsignedInt));
pub let t_u64       = Type(ValueType(modid: 0, canon: "u64", quals: UnsignedInt));

pub let t_f32       = Type(ValueType(modid: 0, canon: "f32", quals: FloatingPt));
pub let t_f64       = Type(ValueType(modid: 0, canon: "f64", quals: FloatingPt));

pub let t_void      = Type(ValueType(modid: 0, canon: "void",  quals: 0));
pub let t_bool      = Type(ValueType(modid: 0, canon: "bool",  quals: Primitive));
pub let t_never     = Type(ValueType(modid: 0, canon: "never", quals: 0));

pub let t_byte      = Type(ValueType(modid: 0, canon: "byte",     quals: Primitive));


//

pub fn is_never(t: Type) t.vtype == t_never.vtype;
pub fn is_void (t: Type) t.vtype == t_void .vtype;
pub fn is_bool (t: Type) t.vtype == t_bool .vtype;


// https://doc.rust-lang.org/nomicon/subtyping.html:

// Re: covariance of `T` in `Box<T>`:
//
// As it turns out, the argument for why it's ok for Box
//  (and Vec, Hashmap, etc.) to be covariant is pretty similar
//   to the argument for why it's ok for lifetimes to be covariant:
//    as soon as you try to stuff them in something like a mutable
//     reference, they inherit invariance and you're prevented
//      from doing anything bad.

pub fn isAssignable(host: Type, guest: Type): bool
{
    return host.canon == guest.canon
        && host.modid == guest.modid
            && host.quals & guest.quals == host.quals
            && (!(host.quals & q_mutref) ||
                  host.quals & q_MUTINVAR == guest.quals & q_MUTINVAR)
        || guest.is_never;
}

pub fn Lifetime_static(): Lifetime =
    Lifetime(uni0n: [ 0 ]);

let LT_TEMP = 0x7fffffff.i32;

pub fn Lifetime_temporary(): Lifetime =
    Lifetime(uni0n: [ LT_TEMP ]);

pub fn isAssignableAsArgument(host: Type, guest: Type): bool
{
    // This has to go, it doesn't make amazing sense.
    return isAssignable(host,
        guest.quals & q_ref || !(host.quals & q_ref)
            ? guest
            : add_ref(guest, Lifetime_temporary));
}


//

pub fn is_ref(   type: Type): bool = type.quals & q_ref    != 0;
pub fn is_mutref(type: Type): bool = type.quals & q_mutref != 0;

pub fn add_ref(mut type: Type, lifetime: Lifetime): Type
{
    type.quals   |= q_ref;
    type.lifetime = Lifetime_union(type.lifetime, lifetime) || throw("add_ref: falsy lifetime");
    return type;
}

pub fn add_mutref(mut type: Type, lifetime: Lifetime): Type
{
    type.quals   |= q_mutref | q_ref;
    type.lifetime = Lifetime_union(type.lifetime, lifetime) || throw("add_mutref: falsy lifetime");
    return type;
}

pub fn is_ref2temp(type: Type): bool
{
    return type.lifetime.uni0n
        && type.lifetime.uni0n[type.lifetime.uni0n.len - 1] == LT_TEMP
        && (type.is_ref && type.lifetime.uni0n.len == 1 || throw("ref2temp doesnt look good"));
}


//

pub fn clear_refs(mut type: Type): Type
{
    type.quals &= ~(q_ref | q_mutref);
    type.lifetime = Lifetime(); // <- discard lifetime
    return type;
}

pub fn clear_mutref(mut type: Type)
{
    type.quals &= ~q_mutref;
    type.quals & q_ref || !type.lifetime || assert(); // dont discard lifetime, it's
    return type;
}

fn tryClearRefs(type: Type, mutref?: bool): Type
{
    let refs = type.quals  & (q_ref | q_mutref);
    return (mutref ? refs == (q_ref | q_mutref) : !!refs)
        && clear_refs(type);
}


//

pub fn tryClear_mutref(type: Type)
{
    return tryClearRefs(:type, mutref: true);
}

pub fn tryClear_ref(type: Type)
{
    return tryClearRefs(:type);
}

pub fn add_refs(from: Type, mut to: Type)
{
    to.quals   |= from.quals & (q_ref | q_mutref);
    to.lifetime = Lifetime_union(from.lifetime, to.lifetime);
    to.lifetime || !(to.quals & (q_ref | q_mutref))
                || throw("add_refs: falsy lifetime");
    return to;
}


// Type serialization:
//  `modid` `+quals` `canon`: a very compact repr.

pub fn serializeType(type: Type)
{
    mut prefix: string;

    if (type.modid)
        prefix ~= type.modid;
    if (type.quals)
        prefix ~= "+" ~ type.quals;

    return prefix ~ type.canon;
}

pub fn humanizeType(type: Type)
{
    mut result: string = type.canon;

    if (type.modid)
        result = type.modid ~ ":" ~ result;

    if (type.quals)
    {
        result ~= ":";
        for (mut i = 0; i < TAGS.len; i++)
            if (type.quals & (1 << i))
                result ~= " " ~ TAGS[i];
    }

    return result;
}

pub fn parse10i32(offset: &mut i32, str: string): i32
{
    mut result: i32;
    for (;;)
    {
        let c = offset < str.len && str[offset];
        if (c < '0' || c > '9')
            break;

        offset++;
        result = result * 10 + (c.i32 - '0'.i32);
    }

    return result;
}

pub fn parseType(str: string): ValueType
{
    mut offset: i32;

    let modid = parse10i32(offset, str);
    mut quals = 0;
    if (str[offset] == '+')
    {
        offset++;
        quals = parse10i32(offset, str);
    }

    let canon = str.slice(offset);

    return ValueType(
        :modid, :canon, :quals);
}


//

pub fn type_isArray(type: Type): bool
{
    return type.quals & q_rx_resize
        && type.canon.starts(with: "[]");
}

pub fn createArray(item: Type): Type
{
    let canon = "[]" ~ serializeType(item);
    let quals = (item.quals & q_rx_copy) | q_rx_resize;
    let modid = 0;

    return Type(
        ValueType(:canon, :quals, :modid),
            :item.lifetime);
}

pub fn tryClear_array(type: Type): Type
{
    if (!type_isArray(type))
        return Type();

    let vtype = parseType(type.canon.slice(2));
    return Type(:vtype/*, :type.lifetime*/);
}


// Experimental -
//  Slices are refs to arrays,
//   with revoked copy & resize priviledges.

fn type_isSliceable(type: Type): bool
{
    return type.canon.starts(with: "[]");
}

pub fn createSlice(item: Type, lifetime: Lifetime): Type
{
    mut out = createArray(item);
    out.quals &= ~(q_rx_copy | q_rx_resize);
    return add_ref(out, lifetime);
}

pub fn tryClear_sliceable(type: Type): Type
{
    if (!type_isSliceable(type))
        return Type();

    let vtype = parseType(type.canon.slice(2));
    return Type(:vtype/*, :type.lifetime*/);
}


//

pub fn type_isMap(type: Type): bool
{
    return type.canon.starts(with: '{');
}

pub fn createMap(key: Type, vtype: Type): Type
{
    let canon = "{" ~ serializeType(key) ~ "}"
                    ~ serializeType(vtype);

    let quals = key.quals & vtype.quals & q_rx_copy;
    let modid = 0;

    return Type(
        ValueType(:canon, :quals, :modid),
            lifetime: Lifetime_union(key.lifetime, vtype.lifetime));
}

pub struct MapFields
{
    key:   Type;
    value: Type;
}

pub fn tryClear_map(type: Type): MapFields
{
    if (!type_isMap(type))
        return MapFields();

    mut depth = 0;
    for (mut i = 1; i < type.canon.len; i++)
    {
        let c = type.canon[i];
        if (c == '{')
        {
            depth++;
        }
        else if (c == '}')
        {
            if (depth--)
                continue;

            let ckey = type.canon.slice(1,  i);
            let cval = type.canon.slice(i + 1);

            return MapFields(
                key:   Type(vtype: parseType(ckey)/*, :type.lifetime*/),
                value: Type(vtype: parseType(cval)/*, :type.lifetime*/));
        }
    }

    assert();
}


//

pub fn type_has(type: Type, tag: string)
{
    let idx = TAGS.find(tag);
    idx >= 0 || throw("Unknown type tag: `" ~ tag ~ "`.");
    let mask = 1 << idx;
    return (type.quals & mask) == mask;
}


//

pub fn type_trySuper(a: Type, b: Type)
{
    if (a.canon != b.canon || a.modid != b.modid)
        return a.is_never ? b
             : b.is_never ? a
             : Type();

    let quals = a.quals & b.quals;

    return Type(
        ValueType(
            :a.canon,
            :quals,
            :a.modid),
        effects: type_inter(a.effects, b.effects),
        lifetime: quals & q_ref &&
            Lifetime_union(a.lifetime, b.lifetime));
}


//

pub struct Target
{
    modid:  i32;
    index:  i32;
};

pub fn u64(t: Target): u64 = t.modid.u64 << 32 | t.index.u64;

pub fn ==(a: Target, b: Target)
    a.modid == b.modid &&
    a.index == b.index;
