

// Sketch.

using flags FxMask: u16
{
    Fx_NotDeadCode          // cannot dead-code eliminate,  e.g. debug::print().
    Fx_NonDeterministic     // cannot sub-expression eliminate, e.g. now::hr().

    Fx_DontMoveUp
    Fx_DontMoveDown

    Fx_Input                // fails pure & noio
    Fx_Output               // fails pure, purefx & noio


    // Better served as list of types thrown.

    Fx_Throws               // a surrounding catch is not pointless.


    // The stuff that follows doesn't affect optis for now.

    Fx_Crashes              // could exit unrecoverably -

    // ElimOk:
    Fx_Crashes_Div0         // could attempt to divide by 0.
    Fx_Crashes_OOB          // could index out of bounds.

    // NotDeadCode:
    Fx_Crashes_Assert       // could assert false (contains unproven assertion).

    Fx_Crashes_Exit         // exit(0) should qualify as a crash,
                            //  since it doesn't run destructors on stack.


    // Performance & realtime proofing.

    Fx_Syscall              // could context switch,
                            //  not necessarily blocking.

    Fx_Blocks               // could block execution            - not realtime
                            //  blocking syscall, spinlock, inf loops etc.

    Fx_Blocks_Alloc         // could allocate dynamic memory    - not realtime
    Fx_Blocks_Await         // could join/await jobs or threads - not realtime
}


// Non-blocking time & position sensitive reads -
//  profiling, allocation counters, etc.
let EFFECTS_clock           = Fx_Input          | Fx_NonDeterministic
                                                | Fx_DontMoveDown   | Fx_DontMoveUp;
// IO reads.
let EFFECTS_input           = Fx_Input          | Fx_NonDeterministic
                                                | Fx_Blocks;
// IO writes.
let EFFECTS_output          = EFFECTS_input     | Fx_Output         | Fx_NotDeadCode
                                                | Fx_DontMoveDown   | Fx_DontMoveUp
                                                | Fx_Blocks;

// Function effects -
//  Things not well expressed by its arg & return signature.

struct Effects
{
    // Non-local jumps -
    //  So we know what needs to get inlined into what,
    //   and later we might be able to jump out of recursive stacks by throwing,
    //    or extra return out-params & flags or whatever.
    //
    far_jumps:      i32[];

    // Builtin effects.
    fx_mask:        FxMask;

    // throws:         Types;       - union or some such
    // fx_user:        Types;       - union of usereffects

    // Complexity and computational expense?
    //  This is interesting for automatic parallelization.
    //
    // loop_depth:     What?
    // est_cost:       What?       // Perhaps +1 for every "instruction"
    //                             //  and *10 for every unbounded loop?
    //
    // ser_loop_depth: What?       // Perhaps reset on automatic parallelizaton?
    // ser_est_cost:   What?

    // Anti-deadlock?
    //  Honestly, I don't want locks at all,
    //   but if we do get them, there must be some anti-deadlock thing going on.
    //
    // locks:          What?
}
