import module;
import helpers;

fn inspect(module: Module): string
{
    return inspect(module, module.out.solve.root);
}

fn inspect(module: Module, root: SolvedNode): string
{
    mut src = "Your /*PRINT*/:";

    let modid  = module.modid;

    fn inspect(n: SolvedNode, indent: string)
    {
        src ~= indent ~ "(";

        if (n)
        {
            if (n.kind == "call")
                src ~= n.kind.str.ansi::qID;
            else if (n.kind == "block" || n.kind == "jump" || n.kind == "defer")
                src ~= n.kind.str.ansi::qLT;
            else if (n.kind == "if" || n.kind == "and" || n.kind == "or" || n.kind == "loop")
                src ~= n.kind.str.ansi::qKW;
            else if (n.kind == "empty")
                src ~= n.kind.str.ansi::qBAD;
            else
                src ~= n.kind;

            if (n.value)
                src ~= " v:" ~ n.value;
            if (n.helpers)
                src ~= " h:" ~ n.helpers.index;
            if (n.flags)
                src ~= " f:" ~ n.flags;

            if (n.items)
            {
                shadow let indent = indent ~ (n.kind == "block" ? ". ".ansi::qLT : "  ");
                for (shadow mut i = 0; i < n.items.len; i++)
                    inspect(n.items[i], indent);
            }

            let globid = n.target.globid;
            let locid  = n.target.locid;

            if (n.target.modid == modid || locid)
            {
                let o = locid
                    ? module.out.solve.scope.extended[globid].locals[locid - 1]
                    : module.out.solve.scope.overloads[globid - 1];

                if (o.name)
                    src ~= " n:" ~ o.name.trim();

                if (o.kind == "fn")
                {
                    let x = module.out.solve.scope.extended[globid];
                    if (x.fx_mask)
                        src ~= " fx:" ~ x.fx_mask;
                }

                if (n.kind == "letdef")
                {
                    shadow let indent = indent ~ ". ".ansi::qID;
                    inspect(o.solved, indent);
                }
            }
        }

        if (n.items)
            src ~= indent;

        src ~= ")";
    }

    inspect(root, "\n    ");

    return src;
}
