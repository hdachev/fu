import flags;
import helpers;
import module;

let ONE_BASED = 1;

pub fn parseUserTypeCanon(canon: string): UserTypeCanon
{
    mut offset = 1;
    {
        let c = canon[0];
        if (c.u8 < 128)
            offset = quals::basePrimPrefixLen(canon) + 1;
    }

    let modid   = canon.parseVarint(:offset).i32;
    let globid  = canon.parseVarint(:offset).i32;

    offset == canon.len
        || canon[offset] == '(' // TODO FIX SPECPATs
        || throw("parseUserTypeCanon: trailing garbage in `" ~ canon ~ "`: " ~ offset ~ "|" ~ canon.len);

    return UserTypeCanon(:modid, globid - ONE_BASED);
}

pub fn createUserTypeCanon(
    kind!: Kind, basePrim!: string,
    modid: i32, index: i32, lax name: string, specPat: string,
    mut initialHash!hash: u64): string
{
    hash ^= hash >> 32;
    hash ^= hash >> 16;
    hash ^= hash >> 8;

    let sigil = byte(hash | 128);

    // println((sigil.int & 127) ~ "\tTYPE: " ~ name ~ " " ~ specPat);

    //
    mut res = basePrim ~ sigil;

    modid >= 0 && index >= 0 || throw(
        "createUserTypeCanon: bad modid/index");

    res.appendVarint(modid.u32);
    res.appendVarint((index + ONE_BASED).u32);

    //
    if (basePrim)
    {
        ref c = res[0];
        if (c == 'e' || c == 'm')
            throw("createUserTypeCanon: bad basePrim: " ~ basePrim);

        if (kind == "enum")
            c = 'e';
        else if (kind == "flags")
            c = 'm';
    }

    //
    res ~= specPat;

    return res;
}

pub fn isUserType(type: ValueType): bool
{
    let c = type.canon[0];
    return c.u8 >= 128;
}


//

pub fn modidOfOrigin(type: Type)
{
    if (type.isUserType)
    {
        let scp = parseUserTypeCanon(type.canon);
        return scp.modid;
    }

    return 0;
}
