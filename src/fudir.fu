import helpers;


//

fn slash(a: string)
    a.ifLast == '/' ? a : a ~ '/';

let HOME            = slash(env::get("HOME"));

fn get_FU_ROOT(): string
{
    // Try to grab from the environment.
    mut FU_ROOT     = env::get("FU_ROOT");

    fn consider(topic: string, mut dir: string, failOK!?: bool)
    {
        dir.starts(with: '/') || throw(
            topic ~ "candidate(" ~ dir ~ "), no leading slash, does not look like an absolute path.");

        dir = dir.slash();

        //
        let compiler_fu = dir ~ "src/compiler.fu";
        let fs = file::size(compiler_fu);
        if (fs > 1000)
            FU_ROOT = dir;
        else if (!failOK)
            throw(topic ~ "file(" ~ compiler_fu ~ ") size(" ~ fs ~ ") !> 1000");
    }

    if (let env_var = env::get("FU_ROOT"))
        consider("Bad $FU_ROOT: ", env_var);

    // Resolve relative to the current executable.
    if (!FU_ROOT)
    {
        let exe = fs::executable;

        // TODO .find(last: "/bin/"), we don't have one yet
        mut start = -1;
        for (;;)
        {
            let match = exe.find("/bin/", :start + 1);
            if (match < 0)
                break;

            start = match;
        }

        if (start > 0)
            consider("fs::executable: ", exe.slice(start: 0, end: start + 1), failOK: true);

        if (!FU_ROOT)
            consider("$HOME/fu: ", path::join(HOME, "fu"));
    }

    return FU_ROOT;
}

pub let FU_ROOT     = get_FU_ROOT();


//

pub let FU_BIN      = FU_ROOT ~ "bin/";
pub let FU_INCLUDE  = FU_ROOT ~ "include/";


//

pub let DEFAULT_WORKSPACE = HOME ~ ".fu/cache/";
