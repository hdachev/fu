

// Overload flags.

flags SolverStatus: u16
{
    SS_LAZY
    SS_DID_START
    SS_DIRTY
    SS_FINALIZED

    SS_UPDATED
    SS_TYPE_RECUR
    SS_FN_RECUR
    // ...

    SS_HOIST
    SS_UNUSED
}


// Solver helpers.

flags HelpersMask
{
    HM_CanBreak
    HM_CanReturn
    HM_Anon
    HM_Function

    HM_Lambda
    HM_Struct
    HM_LabelUsed
    HM_KeepBlock
}


//

flags DeclAsserts
{
    A_NOCOPY
    A_NOVEC
    A_NOVEC_MUT
    // ...

    A_PURE
    A_PURE_CTX
    // ...
    A_NOFLOW
};


//

flags ParseSyntax
{
    PS_ID

    PS_PARENS
    PS_SEMI
};


// TODO clean up the fncall flags, it's historic bs.

flags Flags: u32
{
    F_METHOD
    F_INFIX
    F_PREFIX
    F_POSTFIX

    F_ACCESS
    // ...
    F_COMPOUND_ID
    F_WRITTEN_TO


    F_LAX
    F_ARG           // TODO get rid of this
    F_OPERATOR
    F_MOVED_FROM

    F_CONVERSION
    F_OPT_ARG
    F_MUT
    F_REF


    F_IMPLICIT
    F_USING
    F_MUSTNAME
    F_SHADOW

    F_PUB           // TODO group these three up
    F_EXTERN        //  in enum Linkage
    F_HOTSWAP       //   or enum Visibility or smth
    F_PREDICATE


    F_NAMED_ARGS
    F_OOE_RTL
    F_REST_ARG
    F_RELAXABLE_REF

    F_TEMPLATE
    F_INLINE
    F_LAMBDA
    F_SINGLE_STMT
};


// Commons.

let LET_TYPE        = 0;
let LET_INIT        = 1;

let FN_RET_BACK     = -2;
let FN_BODY_BACK    = -1;
let FN_ARGS_BACK    = FN_RET_BACK;

let TYPECTOR_BACK   = -1;

let LOOP_INIT       = 0;
let LOOP_COND       = 1;
let LOOP_BODY       = 2;
let LOOP_POST_COND  = 3;
let LOOP_POST       = 4;

let STRUCT_BASE     = 0;
let STRUCT_MEMBERS  = 1;
