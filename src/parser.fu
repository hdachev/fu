import helpers;
import lexer;


//

pub struct TokenIdx // 8b vs 48b, nobrainer
{
    modid:  i32;
    tokidx: i32;
};

pub struct Node
{
    kind:       string;
    flags?:     i32;
    value:      string;
    items?:     Node[];
    token:      TokenIdx;
};


// Calltypes, probably an enum is better for the 4 kinds,
//  can't be mixed and matched.

pub let F_METHOD        = 1 << 0;
pub let F_INFIX         = 1 << 1;
pub let F_PREFIX        = 1 << 2;
pub let F_POSTFIX       = 1 << 3;
pub let F_ACCESS        = 1 << 4;
pub let F_ID            = 1 << 5;
pub let F_QUALIFIED     = 1 << 6;
// ... 7

pub let F_LOCAL         = 1 << 8;
pub let F_ARG           = 1 << 9;
pub let F_FIELD         = 1 << 10;
pub let F_NODISCARD     = 1 << 11;
pub let F_NOCOPY        = 1 << 12;
// ... 13
// ... 14
// ... 15

pub let F_MUT           = 1 << 16;
pub let F_IMPLICIT      = 1 << 17;
pub let F_USING         = 1 << 18;
pub let F_MUSTNAME      = 1 << 19;
pub let F_PUB           = 1 << 20;
pub let F_OPERATOR      = 1 << 21;
pub let F_REF           = 1 << 22;
pub let F_SHADOW        = 1 << 23;

pub let F_NAMED_ARGS    = 1 << 24;
pub let F_RECURSIVE     = 1 << 25;
// ... 26
pub let F_PATTERN       = 1 << 27;
pub let F_TEMPLATE      = 1 << 28;
pub let F_INLINE        = 1 << 29;
// ... 30
// ... 31


// Operator precedence table.

let P_RESET           = 1000;
let P_PREFIX_UNARY    = 3   ;

let PREFIX:  string[] = [ "++", "+", "--", "-", "!", "~", "?", "*", "&", "&mut" ];
let POSTFIX: string[] = [ "++", "--", "[]" ];

fn setupOperators()
{
    struct BINOP {
        PRECEDENCE:     Map(string, i32);
        RIGHT_TO_LEFT:  Map(i32,   bool);
    };

    mut out: BINOP;

    mut precedence  = P_PREFIX_UNARY;
    mut rightToLeft = false;

    fn binop(ops: string[])
    {
        precedence++;
        out.RIGHT_TO_LEFT[precedence] = rightToLeft;

        for (mut i = 0; i < ops.len; i++)
            out.PRECEDENCE[ops[i]] = precedence;
    }

    // TODO not so simple,
    //  must be stronger than unary - and +,
    //   or alternatively also fail lint.
    //
    // See: https://stackoverflow.com/questions/47068812/javascript-exponentiation-unary-operator-design-decision
    //
    // rightToLeft = true;
    // binop([ "**" ]);

    rightToLeft = false;
    binop([ "*", "/", "%" ]);
    binop([ "+", "-" ]);
    binop([ "<<", ">>" ]);
    binop([ "&" ]); // Notice this is not js/c precedence, it's just never usefu]l.
    binop([ "^" ]); // We're doing the rust thing her]e.
    binop([ "|" ]);
    binop([ "~" ]); // concat operator
    binop([ "<=>" ]);
    binop([ "in", "is", "as", "->" ]); // see c# as, is and js in, instanceof
    binop([ "<", "<=", ">", ">=" ]);
    binop([ "==", "!=" ]);
    binop([ "&&" ]);
    binop([ "||" ]);

    rightToLeft = true;
    binop([ "?" ]);
    binop([ "=", "+=", "-=", "**=", "*=", "/=", "%=", "<<=", ">>=", "&=", "^=", "|=",
            "||=", "&&=", ".=", "~=" ]);

    // F# has weird precedence here, why?
    binop([ "<|" ]);

    rightToLeft = false;
    binop([ "|>" ]);

    //
    return out;
}

let BINOP     = setupOperators();


// Commons.

pub let LET_TYPE        = 0;
pub let LET_INIT        = 1;

pub let FN_RET_BACK     = -2;
pub let FN_BODY_BACK    = -1;
pub let FN_ARGS_BACK    = FN_RET_BACK;

pub let TYPECTOR_BACK   = -1;

pub let LOOP_INIT       = 0;
pub let LOOP_COND       = 1;
pub let LOOP_POST       = 2;
pub let LOOP_BODY       = 3;
pub let LOOP_POST_COND  = 4;


// Descent modes.

let M_LINT_UNARY_PRECEDENCE = 1 << 0;


//

pub struct ParserOutput
{
    root:       Node;
    fuzimports: string[];
}

pub fn parse(modid: i32, fname: string, tokens: Token[]): ParserOutput
{
    mut _idx        = 0;
    mut _loc        = 0;
    mut _col0       = 0;
    mut _precedence = P_RESET;
    mut _fnDepth    = 0;
    mut _numReturns = 0;

    mut _dollarAuto = 0;
    mut _dollars    : string[];

    mut _anonFns    = 0;


    //

    mut _imports    : string[];

    fn registerImport(mut value: string): string
    {
        if (!value.path_ext)
            value ~= ".fu";

        // Exact relative or fuzzy?
        let dir = path_dirname(fname);
        value   = value.starts(with: ".")
                ? path_join(dir, value)
                : dir ~ '\v' ~ value;

        if (!_imports.has(value))
            _imports.push(value);

        return value;
    }


    //

    fn fail(mut reason: string = "")
    {
        let loc  = tokens[_loc];
        let here = tokens[_idx];

        if (!reason)
            reason = "Unexpected `" ~ here.value ~ "`.";

        let l0 = loc.line;
        let c0 = loc.col;

        let l1 = here.line;
        let c1 = here.col;

        let addr = l1 == l0
            ? "@" ~ l1 ~ ":" ~ c1
            : "@" ~ l0 ~ ":" ~ c0 ~ ".." ~ l1 ~ ":" ~ c1;

        return throw(fname ~ " " ~ addr ~ ":\n\t" ~ reason);
    }

    fn fail_Lint(reason: string)
    {
        // TODO allow opt out
        return fail("Lint: " ~ reason);
    }

    fn make(
        kind:  string,
        items: Node[] = [],
        flags: i32    =  0,
        value: string = "")
    {
        return Node(
            :kind, :flags, :value, :items,
                token: TokenIdx(:modid, _loc) );
    };

    fn miss() Node();


    //

    fn consume(kind: [byte], value?: [byte], err?: string): Token
    {
        let token = tokens[_idx];
        if (token.kind == kind && (!value || token.value == value))
        {
            _idx++;
            return token;
        }

        return fail((err || "Expected") ~
            " `" ~ (value || kind) ~ "`, got `" ~ token.value ~ "`.");
    }

    fn tryConsume(kind: [byte], value?: [byte]): Token
    {
        let token = tokens[_idx];
        if (token.kind == kind && (!value || token.value == value))
        {
            _idx++;
            return token;
        }

        return [];
    }


    //

    fn parseRoot(): Node
    {
        consume("sof", "sof");

        _loc = _idx;

        mut out = make("root",
            parseBlockLike("eof", "eof"));

        return out;
    }


    //

    fn parseBlock(): Node
    {
        return createBlock(
            parseBlockLike("op", "}"));
    }

    fn createBlock(items: Node[]): Node
    {
        return make("block", :items);
    }


    //

    fn parseTypedef(): Node
    {
        let name = consume("id").value;
        consume("op", "=");
        let annot = parseTypeAnnot();
        consume("op", ";");

        return make("typedef", value: name, items: [ annot ]);
    }


    //

    fn parseNoCopy(): Node
    {
        consume("id", "struct");

        return parseStructDecl(flags: F_NOCOPY);
    }

    fn parseStructDecl(flags! = 0): Node
    {
        let name = tryConsume("id").value;

        consume("op", "{");
        let items = parseBlockLike("op", "}", struct: true);
        let struct = make("struct", items, :flags, name);

        return struct;
    }

    fn parseStructItem(): Node
    {
        mut member = parseLet(xqmark: true);
        member.flags |= F_FIELD;

        consume("op", ";");
        return member;
    }


    //

    fn parseBlockLike(
        endKind: string, endVal: string,
        struct! = false): Node[]
    {
        let line0 = tokens[_idx].line;
        let col00 = _col0;

        mut items: Node[] = [];
        for (;;)
        {
            let token = tokens[_idx];
            if (token.kind == endKind && token.value == endVal)
            {
                // Done.
                _col0 = col00;
                _idx++;

                // Style-check, makes for more helpful errors.
                let line1 = token.line;
                let col1  = token.col;

                line1 == line0 || col1 == _col0 || fail_Lint(
                    "Bad closing `" ~ token.value ~ "` indent, expecting " ~ (_col0 - 1)
                        ~ ", got " ~ (col1 - 1)
                        ~ ". Block starts on line " ~ line0 ~ ".");

                break;
            }

            _col0 = token.col;

            _col0 > col00 || fail_Lint(
                "Bad indent, expecting more than " ~ col00
                    ~ ". Block starts on line " ~ line0 ~ ".");

            let expr = struct
                ? parseStructItem()
                : parseStatement();

            // Maybe we should get rid of this.
            expr.kind != "call"
                || ((expr.flags & (F_ID | F_ACCESS)) == 0)
                || expr.flags & F_NODISCARD
                || expr.items.len > 1
                || fail_Lint("Orphan pure-looking expression.");

            // Filter out excess semicolons.
            if (expr.kind != "empty")
                items.push(expr);
        }

        return items;
    }


    // Watch out, we want to not allow pubs & shadows together.

    fn parsePub(): Node
    {
        _fnDepth && fail("Cannot pub from within a fn.");

        mut out = parseStatement();
        out.flags |= F_PUB;
        out.flags & F_SHADOW && fail("Cannot pub a shadow.");
        return out;
    }

    fn parseShadow(): Node
    {
        mut out = parseStatement();
        out.flags |= F_SHADOW;
        out.flags & F_PUB && fail("Cannot shadow a pub.");
        return out;
    }


    //

    fn parseStatement(): Node
    {
        ///////////////////////////////////////////////
        let loc0  = _loc;
        let token = tokens[_loc = _idx++] || fail();
        ///////////////////////////////////////////////

        if (token.kind == "op")
        {
            let v = token.value;

            if (v == "{")           return parseBlock();
            if (v == ";")           return parseEmpty();
            if (v == ":")           return parseLabelledStatement(trailing: false);
        }
        else if (token.kind == "id")
        {
            let v = token.value;
            let peek = tokens[_idx];

            if (!_fnDepth || peek.kind == "id")
            {
                if (v == "let")         return parseLetStmt();
                if (v == "mut")         return { _idx--; parseLetStmt() };
                if (v == "ref")         return { _idx--; parseLetStmt() };
                if (v == "struct")      return parseStructDecl();
                if (v == "pub")         return parsePub();
                if (v == "shadow")      return parseShadow();

                if (v == "type")        return parseTypedef();
                if (v == "typedef")     return parseTypedef();

                if (v == "fn")          return parseFnDecl();
                if (v == "inline")      return parseInlineDecl();
                if (v == "infix")       return parseFixityDecl(F_INFIX);
                if (v == "prefix")      return parseFixityDecl(F_PREFIX);
                if (v == "postfix")     return parseFixityDecl(F_POSTFIX);

                if (v == "nocopy")      return parseNoCopy();
            }

            if (_fnDepth)
            {
                if (v == "if")          return parseIf();
                if (v == "return")      return parseReturn();
                if (v == "defer")       return parseDefer();
                if (v == "try")         return parseTryCatch();

                if (v == "for")         return parseFor();
                if (v == "while")       return parseWhile();
                if (v == "do")          return parseDoWhile();
                if (v == "break")       return parseJump("break");
                if (v == "continue")    return parseJump("continue");
            }

            if (peek.kind == "op")
            {
                if (peek.value == "{" && v == "struct")
                    return parseStructDecl();

                if (peek.value == ":")
                    return { _idx--; parseLabelledStatement(trailing: true) };
            }

            if (v == "import" && (peek.kind == "id" || peek.kind == "str"))
                return parseImport();
        }

        ////////////
        _idx--;
        _loc = loc0;
        ////////////

        // Expression statement, followed by a semi.
        return parseExpressionStatement();
    }

    fn parseImport(): Node
    {
        mut value = tryConsume("id").value;
        if (value)
        {
            while (tryConsume("op", "::"))
                value ~= "/" ~ consume("id").value;
        }
        else
        {
            value = consume("str").value;
        }

        consume("op", ";");
        value = registerImport(value);
        return make("import", :value);
    }

    fn parseLabelledStatement(trailing: bool): Node
    {
        let label = consume("id");
        if (trailing) consume("op", ":");

        mut stmt  = parseStatement();

        if (stmt.kind == "loop")
        {
            stmt.value && fail();
            stmt.value = label.value || fail();
            return stmt;
        }

        return fail("Only loops can be prefixed with a :label "
                    ~ "currently, this is a `" ~ stmt.kind ~ "`.");
    }

    fn parseEmpty(): Node
    {
        return make("empty");
    }

    fn parseExpressionStatement(): Node
    {
        mut expr = parseExpression(P_RESET);

        let peek = tokens[_idx];
        if (peek.kind == "op" && peek.value == "}")
            expr.flags |= F_NODISCARD;
        else if (peek.kind == "op" && peek.value == ";")
            _idx++;
        else
            fail_Lint("Missing semicollon.");

        return expr;
    }


    // Fn decorator order -
    //  fn keyword comes last to disambiguate operators from anonymous functions,
    //   which makes the parse a bit problematic but whatever.

    fn parseInlineDecl(): Node
    {
        let flags = F_INLINE | F_TEMPLATE;

        let v = consume("id").value;
        if (v == "infix")       return parseFixityDecl(flags | F_INFIX);
        if (v == "prefix")      return parseFixityDecl(flags | F_PREFIX);
        if (v == "postfix")     return parseFixityDecl(flags | F_POSTFIX);
        _idx--;

        return parseFixityDecl(flags);
    }

    fn parseFixityDecl(flags: i32, expr?: bool): Node
    {
        consume("id", "fn");
        return parseFnDecl(flags, :expr);
    }


    //

    fn parseLambda(noArgs?: bool): Node
    {
        let name = "l_" ~ modid ~ "_" ~ _anonFns++;

        return parseFnDecl_cont(endv: !noArgs && "|",
            flags: F_INLINE | F_TEMPLATE, expr: true, :name);
    }

    fn parseFnDecl(mut flags?: i32, expr?!: bool): Node
    {
        // fn hello(), fn +()
        mut name = tryConsume("id").value;
        if (!name)
        {
            let postfix = flags & F_POSTFIX;
            name = consume("op").value;

            if (postfix)
            {
                name == "++" || name == "--"
                    || fail("No such postfix operator: `" ~ name ~ "`.");

                name ~= "postfix";
            }
            else if (flags & F_INFIX)
            {
                BINOP.PRECEDENCE.has(name) || fail("No such infix operator: `" ~ name ~ "`.");
            }
            else if (flags & F_PREFIX)
            {
                PREFIX.has(name) || fail("No such prefix operator: `" ~ name ~ "`.");
            }

            flags &= ~(F_INFIX | F_PREFIX);
            flags |= F_OPERATOR;
        }
        else if (flags & (F_INFIX | F_PREFIX | F_POSTFIX))
        {
            fail("Not an operator: `" ~ name ~ "`.");
        }

        if (!expr)
            consume("op", "(");
        else if (!tryConsume("op", "("))
            return make(kind: "addroffn", :flags, value: name);

        return parseFnDecl_cont(:flags, :name, :expr);
    }

    fn parseFnDecl_cont(name!: string, mut flags?!: i32, expr?!: bool, endv! = ")"): Node
    {
        // Opening parens!
        mut items: Node[];

        ////////////////////////////////
        _fnDepth++;
        let dollars0 = _dollars;
        let numReturns0 = _numReturns;
        ////////////////////////////////

        flags |= endv && parseArgsDecl(items, "op", :endv);

        // Return type annot.
        mut type = tryPopTypeAnnot();
        let retIdx = items.len;
        items.push(type);

        // Body or pattern (case/case).
        flags |= parseFnBodyOrPattern(items, :expr);

        // Inject `: void` annot here, easy,
        //  one less thing to deal with later.
        if (!type && _numReturns == numReturns0)
            items[retIdx] = type = createRead("void");

        // Ensure main: i32, kinda lame doing it here.
        if (name == "main" && _fnDepth == 1)
        {
            if (!type)
                items[retIdx] = type = createRead("i32");
            else if (type.kind != "call" || type.value != "i32" || type.items.len)
                fail("fn main() must return i32.");

            flags |= F_PUB;
        }

        //
        if (_dollars.len > dollars0.len)
            flags |= F_TEMPLATE;

        ////////////////////////////////
        _fnDepth--;
        _dollars = dollars0;
        _numReturns = numReturns0;
        ////////////////////////////////

        return make("fn", items, flags, name);
    }

    fn parseFnBodyOrPattern(
        ref out_push_body: Node[], expr!: bool): i32
    {
        //
        mut flags = 0;
        mut body: Node;

        //
        if (!expr && tryConsume("id", "case"))
        {
            mut branches: Node[] = [];

            flags |= F_PATTERN;

            fn parseBranch(noCond?: bool)
            {
                let cond = !noCond && parseUnaryExpression();
                let type = tryPopTypeAnnot();
                let cons = parseFnBodyBranch();

                branches.push(
                    make("fnbranch", [ cond, type, cons ]));
            }

            // Parse cases.
            do parseBranch();
            while (tryConsume("id", "case"));

            // Trailing else.
            if (tryConsume("id", "default"))
                parseBranch(noCond: true);

            //
            body = make("pattern", branches);
        }
        else
        {
            body = parseFnBodyBranch(:expr);
        }

        //
        out_push_body.push(body);
        return flags;
    }

    fn parseFnBodyBranch(expr?: bool): Node
    {
        // Allow a leading `=` before body.
        //  We'll transition to this thing fulltime
        //   in the presence of type annots.
        tryConsume("op", "=");

        //
        let body = expr
            ? parseExpression()
            : parseStatement();

        if (body.kind == "block")
            return body;

        if (body.kind == "return")
            return createBlock([ body ]);

        _numReturns++;
        if (body.kind == "call" && body.value == "__native")
            return body;

        return createBlock([ createReturn(body) ]);
    }

    fn tryPopTypeAnnot(): Node
    {
        return tryConsume("op", ":")
             ? parseTypeAnnot()
             : miss;
    }

    fn parseTypeAnnot(): Node
    {
        return parseUnaryExpression();
    }

    fn parseArgsDecl(
        ref outArgs: Node[],
        endk: string, endv: string): i32
    {
        mut first = true;
        mut outFlags = 0;

        mut implicit: Node[];
        mut defaults = false;

        //////////////
        _dollarAuto++;
        //////////////

        for (;;)
        {
            if (tryConsume(endk, endv))
                break;

            if (!first)
                consume("op", ",");

            first = false;

            mut arg = parseLet(xqmark: true);

            let untyped = !arg.items[LET_TYPE];
            if (arg.items[LET_INIT])
            {
                if (arg.flags & F_IMPLICIT)
                    fail("TODO default implicit arguments");

                defaults = true;
            }
            else if (defaults)
            {
                fail("TODO non-trailing default arguments");
            }
            else if (untyped)
            {
                outFlags |= F_TEMPLATE;
            }

            arg.flags |= F_ARG;

            if (arg.flags & F_IMPLICIT)
                implicit.push(arg);
            else
                outArgs.push(arg);
        }

        //////////////
        _dollarAuto--;
        //////////////

        // Ensures implicit arguments always come last.
        if (implicit)
            for (mut i = 0; i < implicit.len; i++)
                outArgs.push(implicit[i]);

        return outFlags;
    }

    fn parseLetStmt(): Node
    {
        let ret = parseLet();

        // Catch here.
        if (tryConsume("id", "catch"))
        {
            let err = createLet(
                consume("id").value, 0,
                createRead("string"), Node);

            let catch = parseStatement();

            return make("catch", [ ret, err, catch ]);
        }

        consume("op", ";");
        return ret;
    }

    fn parseLet(xqmark! = false): Node
    {
        mut flags = 0;

        if (tryConsume("id", "using"   ))   flags |= F_USING;
        if (tryConsume("id", "implicit"))   flags |= F_IMPLICIT;
        if (tryConsume("id", "shadow"  ))   flags |= F_SHADOW;
        if (tryConsume("id", "mut"     ))   flags |= F_MUT;
        if (tryConsume("id", "ref"     ))   flags |= F_REF;

        let id          = consume("id").value;

        let optional    = xqmark && tryConsume("op", "?");
        let mustname    = xqmark && tryConsume("op", "!");
        let type        = tryPopTypeAnnot();
        let init        = optional
            ? createDefinit()
            : tryConsume("op", "=") && parseExpression(P_RESET);

        if (mustname)                       flags |= F_MUSTNAME;

        return createLet(id, flags, type, init);
    }

    fn createLet(
        id: string, flags: i32,
        type: Node, init: Node): Node
    {
        return make("let", [ type, init ], flags, id);
    }

    fn parseExpression(p1 = _precedence, mode! = 0): Node
    {
        //////////////////////////////
        let p0 = _precedence;
        let loc0 = _loc;
        _precedence = p1;
        _loc = _idx;
        //////////////////////////////

        mut head = parseExpressionHead();
        {
            //////////////////////////////////////////////
            // Lint, this looks crazy but its fine really,
            //  powers the -1.abs error.
            shadow let mode =
                mode & M_LINT_UNARY_PRECEDENCE
                    && (head.kind == "int" || head.kind == "real")
                        ? mode
                        : mode &~ M_LINT_UNARY_PRECEDENCE;
            //////////////////////////////////////////////

            mut out: Node;
            while (out = tryParseExpressionTail(:head, :mode))
            {
                _loc = _idx;
                head = out;
            };
        }

        //////////////////////////////
        _precedence = p0;
        _loc = loc0;
        //////////////////////////////

        return head;
    }

    fn tryParseBinary(left: Node, op: string, p1: i32): Node
    {
        if (p1 > _precedence || p1 == _precedence && !BINOP.RIGHT_TO_LEFT[p1])
            return miss;

        // consume
        _idx++;

        mut mid: Node;
        if (op == "?")
        {
            mid = parseExpression();
            consume("op", ":");
        }

        let right = parseExpression(p1);
        if (mid)
            return createIf(left, mid, right);

        // We'll treat these two differently,
        //  no operator overloading for those guys.
        if (op == "||") return createOr (left, right);
        if (op == "&&") return createAnd(left, right);

        // Experimental sugar,
        //  pipeline operator basics.
        if (op == "|>") return pipelineRight(left, right);
        if (op == "<|") return pipelineLeft (left, right);

        //
        if (op == "->") return typeAssert(left, right);

        //
        return createCall(
            op, F_INFIX, [ left, right ]);
    }

    fn typeAssert(actual: Node, expect: Node): Node
    {
        return make("typeassert", [ actual, expect ]);
    }

    fn pipelineRight(left: Node, mut right: Node): Node
    {
        if (right.kind != "call")
            return fail("Cannot pipeline: not a call expr.");

        if (right.flags & F_METHOD)
            right.items.insert(1, left);
        else
            right.items.unshift(left);

        return right;
    }

    fn pipelineLeft(mut left: Node, right: Node): Node
    {
        if (left.kind != "call")
            return fail("Cannot pipeline: not a call expr.");

        left.items.push(right);
        return left;
    }

    fn tryParseExpressionTail(head: Node, mode: i32): Node
    {
        // Consume.
        let token = tokens[_idx++];
        if (token.kind == "op")
        {
            let v = token.value;

            fn lint()
                mode & M_LINT_UNARY_PRECEDENCE && fail_Lint(
                    "Here the unary -/+ separates from the numeric literal,"
                        ~ " and wraps around the whole expression."
                        ~ " Please parenthesize explicitly to make this obvious.");

            if (v == ";") return { _idx--; miss() };
            if (v == ".") return { lint(); parseAccessExpression(head) };
            if (v == "(") return { lint(); parseCallExpression(head) };
            if (v == "[") return { lint(); parseIndexExpression(head) };

            let p1 = BINOP.PRECEDENCE[v];
            if (p1)
                return { _idx--; tryParseBinary(head, v, p1) };

            if (POSTFIX.has(v))
                return createCall(
                    v == "++" || v == "--" ? v ~ "postfix" : v,
                        F_POSTFIX, [ head ]);

            if (v == "::")
                return parseQualifierChain(head);
        }

        // Backtrack.
        return { _idx--; miss() };
    }

    fn parseExpressionHead(): Node
    {
        //////////////////////////////
        let token = tokens[_idx++];
        //////////////////////////////

        {
            let k = token.kind;
            let v = token.value;

            // Literals.
            if (k == "int" || k == "real" || k == "str" || k == "char")
                return createLeaf(k, v);

            // Identifier expression.
            if (k == "id")
            {
                let peek = tokens[_idx];
                if (peek.kind == "id")
                {
                    if (v == "fn")          return parseFnDecl(expr: true);
                    if (v == "infix")       return parseFixityDecl(F_INFIX, expr: true);
                    if (v == "prefix")      return parseFixityDecl(F_PREFIX, expr: true);
                    if (v == "postfix")     return parseFixityDecl(F_POSTFIX, expr: true);
                }

                return createRead(v);
            }

            // Operators.
            if (k == "op")
            {
                if (v ==  "(") return parseParens();
                if (v ==  "{") return parseBlock();
                if (v ==  "[") return parseArrayLiteral();
                if (v ==  "$") return parseTypeParam();
                if (v ==  "@") return parseTypeTag();
                if (v ==  "|") return parseLambda();
                if (v == "||") return parseLambda(noArgs: true);
                if (v == "[]") return createDefinit();

                if (v == "::")
                {
                    // This is hacky but kinda great -
                    //  we peek the id, take a step back
                    //   and allow things to do their thing as usual.
                    let id = consume("id").value;
                    _idx -= 2;
                    return createRead(id);
                }

                return parsePrefix(v);
            }
        }

        ///////
        _idx--;
        ///////

        return fail();
    }

    fn createDefinit(): Node
    {
        return make("definit");
    }

    fn parseParens(): Node
    {
        let out = parseExpression(P_RESET);
        consume("op", ")");
        return out;
    }

    fn parseTypeParam(): Node
    {
        let value = consume("id").value;
        if (!_dollars.has(value) && _dollarAuto)
            _dollars.push(value);

        return createTypeParam(value);
    }

    fn createTypeParam(value: string): Node
    {
        return make("typeparam", :value);
    }

    fn parseTypeTag(): Node
    {
        return createTypeTag(consume("id").value);
    }

    fn createTypeTag(value: string): Node
    {
        return make("typetag", :value);
    }

    fn parsePrefix(mut op: string): Node
    {
        PREFIX.has(op) || { _idx--; fail() };

        if (op == "&" && tryConsume("id", "mut"))
            op = "&mut";

        let mode = op == "-" || op == "+"
            ? M_LINT_UNARY_PRECEDENCE
            : 0;

        return createPrefix(
            op, parseUnaryExpression(:mode));
    }

    fn parseUnaryExpression(mode!: i32 = 0): Node
    {
        return parseExpression(P_PREFIX_UNARY, :mode);
    }

    fn createPrefix(op: string, mut expr: Node): Node
    {
        if (op == "!")
            return createNot(expr);

        // Moving `-` and `+` into unary literals.
        if ((op == "+" || op == "-") &&
            (expr.kind == "int" || expr.kind == "real"))
        {
            let sign = expr.value[0];
            if (sign == '+' || sign == '-')
                expr.value[0] = sign == op.only ? '+' : '-';
            else
                expr.value = op ~ expr.value;

            return expr;
        }

        return createCall(op, F_PREFIX, [ expr ]);
    }

    fn createNot(expr: Node): Node
    {
        return make("!", [ expr ]);
    }

    fn parseAccessExpression(expr: Node): Node
    {
        mut id = tryConsume("id");
        if (!id)
        {
            consume("op", "::");
            id = consume("id");
            _idx -= 2;
        }

        return createCall(
            id.value,
            F_ACCESS, [ expr ]);
    }


    // This is some hacky business -
    //  might actually perform well though -
    //   path[\t]id so we can cheap-slice the path.

    fn parseQualifierChain(mut expr: Node): Node
    {
        if (expr.kind != "call" ||
            expr.items && (expr.items.len != 1 || !(expr.flags & F_ACCESS)) ||
            expr.flags & F_QUALIFIED)
        {
            _idx--;
            fail();
        }

        expr.flags |= F_QUALIFIED;

        mut path = expr.value;
        for (;;)
        {
            let id = consume("id").value;
            if (!tryConsume("op", "::"))
            {
                path = registerImport(path);

                expr.value = path ~ "\t" ~ id;
                return expr;
            }

            path ~= "/" ~ id;
        }
    }


    //

    fn parseCallArgs(endop: string, ref out_args: Node[]): i32
    {
        mut flags = 0;

        mut first = true;
        for (;;)
        {
            if (tryConsume("op", endop))
                break;

            // Comma juggle.
            if (!first)
            {
                consume("op", ",", "Call expr expected `" ~ endop ~ "` or");

                // Trailing comma -
                //  array literals, fncalls, etc.
                if (tryConsume("op", endop))
                    break;
            }

            first = false;

            // Named arguments.
            mut name = "";
            mut autoName = false;

            if (tokens[_idx    ] .kind == "id" &&
                tokens[_idx + 1] .kind == "op" &&
                tokens[_idx + 1].value == ":")
            {
                name = tokens[_idx].value;
                _idx += 2;

                flags |= F_NAMED_ARGS;
            }
            else if (tokens[_idx].kind == "op"
                  && tokens[_idx].value == ":")
            {
                autoName = true;
                _idx++;

                flags |= F_NAMED_ARGS;
            }

            let expr = parseExpression(P_RESET);
            if (autoName)
                name = getAutoName(expr);

            out_args.push(
                name    ? createLabel(name, expr)
                        : expr);
        }

        return flags;
    }

    fn getAutoName(expr: Node): string
    {
        if (expr.kind == "call" && expr.value.hasIdentifierChars)
            return expr.value;

        if (expr.items)
            return getAutoName(expr.items[0]);

        return fail("Can't :auto_name this expression.");
    }

    fn createLabel(id: string, value: Node): Node
    {
        return make("label", [ value ], 0, id);
    }

    fn parseCallExpression(expr: Node): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs(")", args);

        // Uniform call syntax.
        if (expr.kind == "call" && (expr.flags & F_ACCESS))
        {
            let head = expr.items
                    && expr.items.len == 1
                    && expr.items[0] || fail();

            args.unshift(head);

            return createCall(
                expr.value || fail(),
                F_METHOD | argFlags | expr.flags &~ F_ACCESS,
                args);
        }

        if (expr.kind == "call" && (expr.flags & F_ID))
            return createCall(
                expr.value || fail(),
                argFlags | expr.flags &~ F_ID,
                args);

        if (expr.kind == "typeparam")
            return createCall(
                "$" ~ (expr.value || fail()), argFlags, args);

        return fail("TODO dynamic call");
    }

    fn parseArrayLiteral(): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs("]", args);

        return createArrayLiteral(argFlags, args);
    }

    fn createArrayLiteral(argFlags: i32, items: Node[]): Node
    {
        return make("arrlit", items, argFlags);
    }

    fn parseIndexExpression(expr: Node): Node
    {
        mut args: Node[] = [];
        let argFlags = parseCallArgs("]", args);

        args.unshift(expr);

        return createCall("[]", argFlags, args);
    }

    fn createLeaf(kind: string, value: string): Node
    {
        return make(kind, :value);
    }

    fn createCall(id: string, flags: i32, args: Node[] = []): Node
    {
        return make("call", args, flags, id);
    }

    fn createRead(id: string): Node
    {
        return createCall(id || fail(), F_ID);
    }


    //

    fn parseReturn(): Node
    {
        _fnDepth > 0 || { _idx--; fail() };
        _numReturns++;

        if (tryConsume("op", ";"))
            return createReturn();

        return createReturn(
            parseExpressionStatement());
    }

    fn createReturn(node: Node = Node()): Node
    {
        if (!node)
            return make("return");

        return make("return", [ node ]);
    }

    fn parseDefer(): Node
    {
        _fnDepth > 0 || { _idx--; fail() };
        return make("defer", [ parseExpression() ]);
    }

    fn parseTryCatch(): Node
    {
        _fnDepth > 0 || { _idx--; fail() };

        let try = parseStatement();

        consume("id", "catch");
        consume("op", "(");

        let err = createLet(
                consume("id").value, 0,
                createRead("string"), Node);

        consume("op", ")");

        let catch = parseStatement();

        return make("try", [ try, err, catch ]);
    }

    fn parseJump(kind: string /*"break"|"continue"*/): Node
    {
        let label = tryConsume("op", ":")
                 && consume("id");

        let jump = createJump(kind, label.value);
        consume("op", ";");
        return jump;
    }

    fn createJump(kind: string/*"break"|"continue"*/, label: string): Node
    {
        return make(kind, value: label);
    }


    //

    fn parseIf(): Node
    {
        // A little bit of syntactic sugar -
        //  TBD if this is good or not, i'm 50/50.
        //   At least it's unambiguous.
        let not = tryConsume("op", "!");

        consume("op", "(");

        mut cond = parseExpression();
        if (not)
            cond = createNot(cond);

        consume("op", ")");

        let cons = parseStatement();
        let alt  = tryConsume("id", "else")
                && parseStatement();

        return createIf(cond, cons, alt);
    }


    //

    fn createIf(cond: Node, cons: Node, alt: Node): Node
    {
        return make("if", [ cond, cons, alt ]);
    }

    fn createOr(left: Node, right: Node): Node
    {
        return flattenIfSame("or", left, right);
    }

    fn createAnd(left: Node, right: Node): Node
    {
        return flattenIfSame("and", left, right);
    }

    fn flattenIfSame(kind: string, left: Node, right: Node): Node
    {
        let k_left  =  left.kind;
        let k_right = right.kind;

        let items =
            k_left == kind && k_right == kind
                ? left.items ~ right.items
                : k_left == kind
                    ? left.items ~ right
                    : k_right == kind
                        ? left ~ right.items
                        : [ left, right ];

        return make(kind, items);
    }


    //

    fn parseFor(): Node
    {
        consume("op", "(");

        // First of the crazies.
        if (tryConsume("id", "fieldname"))
        {
            let placeholder = consume("id").value;
            consume("op", ":");
            let type = parseTypeAnnot();
            consume("op", ")");
            let body = parseStatement();

            return make("forfieldsof",
                value: placeholder,
                items: [ type, body ]);
        }

        //
        let init = !tryConsume("op", ";") && parseLetStmt();
        let cond = !tryConsume("op", ";") && parseExpressionStatement();

        let token = tokens[_idx];
        let post = token.kind == "op" && token.value == ")"
            ? parseEmpty()
            : parseExpression();

        consume("op", ")");
        let body = parseStatement();

        return createLoop(init, cond, post, body, miss);
    }

    fn parseWhile(): Node
    {
        consume("op", "(");
        let cond = parseExpression();
        consume("op", ")");
        let body = parseStatement();

        return createLoop(miss, cond, miss, body, miss);
    }

    fn parseDoWhile(): Node
    {
        let body = parseStatement();
        consume("id", "while");
        consume("op", "(");
        let cond = parseExpression();
        consume("op", ")");
        consume("op", ";");

        return createLoop(miss, miss, miss, body, cond);
    }

    fn createLoop(init: Node, cond: Node, post: Node, body: Node, postcond: Node): Node
    {
        return make("loop", [ init, cond, post, body, postcond ]);
    }

    // -------------------------------
    // Good to go.

    // Check EOF.
    tokens[tokens.len - 1].kind == "eof" || fail(
        "Missing `eof` token.");

    // PARSE END

    //
    let root = parseRoot();

    return ParserOutput(
        :root, fuzimports: _imports);
}
