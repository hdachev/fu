// https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html#decorations
// https://chrisyeh96.github.io/2020/03/28/terminal-colors.html

let ESC = 27.byte ~ "[";

pub fn ansi(a: i32)
    ESC ~ a ~ 'm';

pub fn ansi(a: i32, b: i32)
    ESC ~ a ~ ';' ~ b ~ 'm';

pub fn ansi(a: i32, b: i32, c: i32)
    ESC ~ a ~ ';' ~ b ~ ';' ~ c ~ 'm';


//

pub let RESET   = ansi(0);
pub let DIM     = ansi(2);

pub let BAD     = ansi(31,1);


// Syntax highlighting.

let cID         = ansi(60 + 34,1);
let cKW         = ansi(     35,3);

let cVFACTS     = ansi(     35,3);
let cQUALS      = ansi(     35,3);
let cLT         = ansi(     32,3);

let cBAD_KW     = ansi(     31,3);


//

pub fn qBAD(id: string) =
    BAD ~ (id || "?") ~ RESET;

pub fn qBAD_KW(id: string) =
    cBAD_KW ~ (id || "?") ~ RESET;

pub fn qID(id: string) =
    cID ~ (id || "?") ~ RESET;

pub fn qKW(id: string) =
    cKW ~ (id || "?") ~ RESET;

pub fn qLT(id: string) =
    cLT ~ (id || "?") ~ RESET;

pub fn qQUALS(id: string) =
    cQUALS ~ (id || "?") ~ RESET;

pub fn qVFACTS(id: string) =
    cVFACTS ~ (id || "?") ~ RESET;

pub fn qDIM(str: string) = DIM ~ str ~ RESET;


//

pub fn strip(str: string)
{
    mut out = "";

    for (mut i = 0; i < str.len - 1; i++)
    {
        let c = str[i];
        if (c == 27.byte && str[i + 1] == '[')
        {
            i += 2;
            while (i < str.len)
            {
                if (str[i] == 'm')
                    break;

                i++;
            }
        }
        else
        {
            out ~= c;
        }
    }

    return out;
}
