import helpers;
import context;
import stat;
import options;
import module;
import fail;
import ansi;


//

struct ModidAndOrder { modid: i32; order: ModuleOrder };

fn compile_lexParseDeps(fname: string, via?: TokenIdx[]): ModidAndOrder
{
    let module = getModule(fname);
    if (module.in)
    {
        if (module.order)
            return [ :module.modid, :module.order ];

        // Having input stuff solved but no output stuff means circular import -
        //  module.out is currently being worked on the stack above us somewhere.
        mut error = "";
        via.each: |token, i|
            error ~= FAIL_text(tokens: [ token ], i == via.len - 1
                ? "Resulting in an import circle, not currently supported."
                : "Imports:\n");

        throw(error);
    }

    shadow let implicit mut module = module.clone();

    module.out && throw("BUG: !!module.out");

    //
    let src = getFile(fname);

    if (!src)
    {
        let token = via.if_last;
        if (token)
        {
            mut err = "Could not resolve this import.";
            mut dirEnd = fname.find('\v');
            if (dirEnd > 0)
            {
                err ~= "\n\n\tSearched relative to:    \t" ~ fname.slice(0, dirEnd).qBAD;
                err ~=   "\n\tLooking for a file named:\t" ~ fname.slice(dirEnd + 1).qBAD;
            }

            FAIL(tokens: [ token ], err);
        }

        throw("Could not load " ~ fname.qBAD ~ ": file does not exist or is empty.");
    }

    let stat0 = ModuleStat_now();
    let lexer_result = lexer::lex(:fname, :src);

    let stat1 = ModuleStat_now();
    let parser_result = parser::parse(
        :module.modid, :fname, :src, :lexer_result.tokens);

    let stat2 = ModuleStat_now();

    module.in = ModuleInputs(
        :src, lex: lexer_result,
        parse: parser_result);

    // Stat.
    module.stats.lex   = stat1 - stat0;
    module.stats.parse = stat2 - stat1;

    // Prevent module circles.
    setModule(module);

    // Process deps.
    if (!module.order || throw("BUG: !!module.order"))
    {
        module.order.dep_depth = 1;

        //
        let dir = path::dirname(fname);

        // Ensure dependencies.
        mut imports = module.in.parse.imports.steal(); // TODO disjoint AAR

        imports.each: |ref import|
        {
            let pattern = import.pattern;

            // Exact relative or fuzzy?
            shadow let pattern = pattern.starts(with: ".")
                ? path::join(dir, pattern)
                : dir ~ '\v' ~ pattern;

            let other =
                compile_lexParseDeps(
                    fname: resolveFile(pattern),
                      via: via ~ import.token);

            import.modid = other.modid || throw(
                "BUG: !module.modid after lexParseDeps");

            if (module.order.dep_depth <= other.order.dep_depth)
                module.order.dep_depth  = other.order.dep_depth + 1;
        }

        swap(module.in.parse.imports, imports);

        //
        setModule(module);
    }

    return [
        :module.order || throw("BUG: !module.order after lexParseDeps."),
        :module.modid,
    ];
}


//

fn watch_needsRebuild(implicit ref ctx: Context)
{
    // Nuke file caches.
    ctx.nuke = [];

    // Invalidate modules whose files
    //  appear to have changed on disk.
    //
    mut did_nuke: ::BitSet;

    fn nuke(ref module: Module)
    {
        did_nuke.add(module.modid);

        // Throw everything out the window,
        //  this currently means that we'll be re-lexing
        //   & re-parsing a bunch of things unnecessarily.
        //
        module = Module(
            :module.modid,
            :module.fname);
    }

    for (mut i = /*PRELUDE*/1; i < ctx.modules.len; i++)
    {
        ref module = ctx.modules[i];
        if (module.in.src != getFile(module.fname))
        {
            shadow ref module = ctx.modules[i];
            println("  WATCH Changed: " ~ module.fname);
            nuke(module);
        }
    }

    if !(did_nuke)
        return false;

    // Invalidate dependents,
    //  we'll recheck/rebuild them.
    //
    for (;;)
    {
        mut repeat = false;

        for (mut i = /*PRELUDE*/1; i < ctx.modules.len; i++)
        {
            ref module = ctx.modules[i];

            module.in.parse.imports.each: |import|
            {
                if (module.out &&
                    did_nuke.has(import.modid))
                {
                    println("  WATCH Invalidated: " ~ module.fname);
                    nuke(module);

                    repeat = true;
                    break;
                }
            }
        }

        if (!repeat)
            break;
    }

    return true;
}


//

fn compile_solveCodegen(implicit ref module: Module, implicit options: Options)
{
    module.out && throw("compile_solveCodegen: !!module.out");

    //
    let stat0 = ModuleStat_now();
    module.out.solve = solver::solve();

    if (options.dev & DEV_Print)
        println(::inspect(module));

    let stat1 = ModuleStat_now();
    module.out.cpp = codegen::cpp_codegen();

    if (options.dev & DEV_Print)
        println(module.out.cpp);

    let stat2 = ModuleStat_now();

    module.stats.solve   = stat1 - stat0;
    module.stats.codegen = stat2 - stat1;
}


//

pub fn compile(
    implicit ref ctx: Context,
    implicit options: Options,
    fname: string)
{
    compile_lexParseDeps(:fname);

    // Sort the dep order.
    mut dep_order: i32[][];
    for (mut i = 0; i < ctx.modules.len; i++)
    {
        let module = ctx.modules[i];
        dep_order.ensure(exists: module.order.dep_depth) ~= module.modid;
    }

    ctx.dep_order = dep_order.join();

    //
    for (mut i = 0; i < dep_order.len; i++)
    {
        let modids = dep_order[i];

        //*
        if (options.dev & DEV_Parallel)
        {
            struct Result {
                module?:    Module;
                error?:     string;
            };

            let results: Result[] = modids.par::map(|modid|
            {
                try
                {
                    let module = ctx.modules[modid];
                    if (module.out)
                        continue Result();

                    shadow let implicit mut module = module.clone();
                    compile_solveCodegen();
                    continue Result(:module);
                }
                catch (error)
                {
                    continue Result(:error ||
                        "COMPILER BUG: Empty error string, modid=" ~ modid);
                }
            });

            results.each: |result|
            {
                if (result.error)
                    throw(result.error);
                else if (result.module.out)
                    setModule(result.module);
            }
        }
        else
        //*/
        {
            modids.each: |modid|
            {
                let module = ctx.modules[modid];
                if (!module.out)
                {
                    shadow let implicit mut module = module.clone();
                    compile_solveCodegen();
                    setModule(module);
                }
            }
        }
    }
}


//

pub fn compile_and_build(

    fname!:     string,
    dir_wrk!:   string,

    //
    bin     !?: string,
    dir_obj !?: string,
    dir_src !?: string,
    dir_cpp !?: string,

    // TODO clean these up, this makes NO SENSE //
    run     !?: build::RunMode,
    scheme  !?: build::BuildScheme,
    //////////////////////////////////////////////

    flags_cc!?: string[],
    flags_ld!?: string[],

    shuffle!?: u32)
{
    implicit mut ctx = prelude::CTX_PRELUDE.clone();
    implicit options = Options(:shuffle, dev: DEV_Parallel);

    for (;;)
    {
        {
            println("COMPILE ", fname);

            let t0 = now::hr();
            compile(:fname);
            let t1 = now::hr();
            let tt = t1 - t0;

            if (tt > 0.025)
                printSlowBuildDiagnostics(ctx);

            println("        ", tt, "s\n");
        }

        let ret = ::build(
            :ctx, :run, :bin, :scheme,
            :dir_wrk, :dir_obj, :dir_src, :dir_cpp,
            :flags_cc, :flags_ld,
            unity: fname,
            :ctx.fudir);

        if !(scheme & "watch")
            return ret;

        // WATCH LOOP
        for (;;)
        {
            if (watch_needsRebuild())
                break;

            // TODO FIX WE WANT AN ACTUAL WATCH HERE //
            pragma include("<unistd.h>");
            pragma emit(`sleep(1)`);
            println("What wake!");
            ///////////////////////////////////////////
        }
    }
}


// Slow build diagnostics.

fn printSlowBuildDiagnostics(ctx: Context)
{
    mut lex:        ModuleStat;
    mut parse:      ModuleStat;
    mut solve:      ModuleStat;
    mut codegen:    ModuleStat;

    mut p:          profiler::ProfileData;

    mut sloc:       int;
    mut specs:      int;
    mut types:      int;

    ref m = ctx.modules;

    for (mut i = 1;     // Ignore prelude, missing stats.solve & co mess up crosscheck
         i < m.len;
         i++)
    {
        shadow let m = m[i];

        lex     += m.stats.lex;
        parse   += m.stats.parse;
        solve   += m.stats.solve;
        codegen += m.stats.codegen;

        p       += m.profile.data;

        sloc    += countSloc(m.in.lex.tokens);
        specs   += countSpecs(m.out.solve.scope.overloads);
        types   += m.out.types.len;
    }

    ModuleStat_print(lex,   "\n    lex ");
    ModuleStat_print(parse,   "  parse ");
    ModuleStat_print(solve,   "  solve ");
    ModuleStat_print(codegen, "codegen ", "\n");

    println("        ---------");
    println("   sloc " ~ sloc.leftpad(9));
    println("    fns " ~ specs.leftpad(9));
    println("  types " ~ types.leftpad(9));

    p.print();
    println("        ---------");
}

fn countSloc(tokens: Token[..])
{
    mut line0   = -1;
    mut sloc    = 0;

    for (mut i = 0; i < tokens.len; i++)
    {
        let t   = tokens[i];
        if (t.line == line0 || t.kind != "id")
            continue;

        line0   = t.line;
        sloc++;
    }

    return sloc || 1;
}

fn countSpecs(overloads: Overload[..])
{
    mut specs = 0;

    for (mut i = 0; i < overloads.len; i++)
    {
        let o = overloads[i];
        if (o.kind != "fn" && o.kind != "inline")
            continue;

        specs++;
    }

    return specs;
}
