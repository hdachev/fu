import helpers;
import context;
import stat;
import options;
import module;
import fail;
import ansi;


//

struct ModidAndOrder { modid: i32; order: ModuleOrder };

fn compile_lexParseDeps(fname: string, via?: TokenIdx[]): ModidAndOrder
{
    let module = getModule(fname);
    if (module.in)
    {
        if (module.order)
            return [ :module.modid, :module.order ];

        // Having input stuff solved but no output stuff means circular import -
        //  module.out is currently being worked on the stack above us somewhere.
        mut error = "";
        via.each: |token, i|
            error ~= FAIL_text(tokens: [ token ], i == via.len - 1
                ? "Resulting in an import circle, not currently supported."
                : "Imports:\n");

        throw(error);
    }

    shadow let implicit mut module = module.clone();

    module.out && throw("BUG: !!module.out");

    //
    let src = getFile(fname);

    if (!src)
    {
        let token = via.if_last;
        if (token)
        {
            mut err = "Could not resolve this import.";
            mut dirEnd = fname.find('\v');
            if (dirEnd > 0)
            {
                err ~= "\n\n\tSearched relative to:    \t" ~ fname.slice(0, dirEnd).qBAD;
                err ~=   "\n\tLooking for a file named:\t" ~ fname.slice(dirEnd + 1).qBAD;
            }

            FAIL(tokens: [ token ], err);
        }

        throw("Could not load " ~ fname.qBAD ~ ": file does not exist or is empty.");
    }

    let stat0 = ModuleStat_now();
    let lexer_result = lexer::lex(:fname, :src);

    let stat1 = ModuleStat_now();
    let parser_result = parser::parse(
        :module.modid, :fname, :src, :lexer_result.tokens);

    let stat2 = ModuleStat_now();

    module.in = ModuleInputs(
        :src, lex: lexer_result,
        parse: parser_result);

    // Stat.
    module.stats.lex   = stat1 - stat0;
    module.stats.parse = stat2 - stat1;

    // Prevent module circles.
    setModule(module);

    // Process deps.
    if (!module.order || throw("BUG: !!module.order"))
    {
        module.order.dep_depth = 1;

        //
        let dir = path::dirname(fname);

        // Ensure dependencies.
        mut imports = module.in.parse.imports.steal(); // TODO disjoint AAR

        imports.each: |ref import|
        {
            let pattern = import.pattern;

            // Exact relative or fuzzy?
            shadow let pattern = pattern.starts(with: ".")
                ? path::join(dir, pattern)
                : dir ~ '\v' ~ pattern;

            let other =
                compile_lexParseDeps(
                    fname: resolveFile(pattern),
                      via: via ~ import.token);

            import.modid = other.modid || throw(
                "BUG: !module.modid after lexParseDeps");

            if (module.order.dep_depth <= other.order.dep_depth)
                module.order.dep_depth  = other.order.dep_depth + 1;
        }

        swap(module.in.parse.imports, imports);

        //
        setModule(module);
    }

    return [
        :module.order || throw("BUG: !module.order after lexParseDeps."),
        :module.modid,
    ];
}


//

fn clear(ref module: Module)
{
    // Throw everything out the window,
    //  this currently means that we'll be re-lexing
    //   & re-parsing a bunch of things unnecessarily.
    //
    module = Module(:module.modid, :module.fname);
}

fn eachButPrelude(implicit ref ctx: Context, action)
    for (mut i = /*PRELUDE*/1; i < ctx.modules.len; i++)
        action(module: ctx.modules[i], ?:i);

fn watch_pruneModules(implicit ref ctx: Context)
{
    mut invalid: ::BitSet;

    eachButPrelude: |ref module|
    {
        if (!module.out)
        {
            // println("  WATCH Prune: " ~ module.fname);
            module.clear();
            invalid.add(module.modid);
        }
    }

    // Invalidate dependents,
    //  we'll recheck/rebuild them.
    //
    if (invalid) for (;;)
    {
        mut repeat = false;

        eachButPrelude: |ref module|
        {
            module.in.parse.imports.each: |import|
            {
                if (invalid.has(import.modid))
                {
                    println("  WATCH Invalidated: " ~ module.fname);
                    module.clear();
                    invalid.add(module.modid);
                    repeat = true;
                    break;
                }
            }
        }

        if (!repeat)
            break;
    }
}

fn watch_needsRebuild(implicit ref ctx: Context)
{
    // Nuke file caches.
    mut old: NukeOnRebuild;
    swap(ctx.nuke, old);

    // Invalidate modules whose files
    //  appear to have changed on disk.
    //
    mut some = false;

    eachButPrelude: |module, i|
    {
        if (updateFile(module.fname, :old))
        {
            shadow ref module = ctx.modules[i];
            println("  WATCH Changed: " ~ module.fname);
            module.clear();
            some = true;
        }
    }

    return some;
}


//

fn compile_solveCodegen(implicit ref module: Module, implicit options: Options)
{
    module.out && throw("compile_solveCodegen: !!module.out");

    //
    let stat0 = ModuleStat_now();
    module.out.solve = solver::solve();

    if (options.dev & DEV_Print)
        println(::inspect(module));

    let stat1 = ModuleStat_now();
    module.out.cpp = codegen::cpp_codegen();

    if (options.dev & DEV_Print)
        println(module.out.cpp);

    let stat2 = ModuleStat_now();

    module.stats.solve   = stat1 - stat0;
    module.stats.codegen = stat2 - stat1;
}


//

pub fn compile(
    implicit ref ctx: Context,
    implicit options: Options,
    fname: string)
{
    compile_lexParseDeps(:fname);

    // Sort the dep order.
    mut dep_order: i32[][];
    for (mut i = 0; i < ctx.modules.len; i++)
    {
        let module = ctx.modules[i];
        dep_order.ensure(exists: module.order.dep_depth) ~= module.modid;
    }

    ctx.dep_order = dep_order.join();

    //
    for (mut i = 0; i < dep_order.len; i++)
    {
        let modids = dep_order[i];

        //*
        if (options.dev & DEV_Parallel)
        {
            struct Result {
                module?:    Module;
                error?:     string;
            };

            let results: Result[] = modids.par::map(|modid|
            {
                try
                {
                    let module = ctx.modules[modid];
                    if (module.out)
                        continue Result();

                    shadow let implicit mut module = module.clone();
                    compile_solveCodegen();
                    continue Result(:module);
                }
                catch (error)
                {
                    continue Result(:error ||
                        "COMPILER BUG: Empty error string, modid=" ~ modid);
                }
            });

            mut err: string;
            results.each: |result|
            {
                if (result.error)
                    err ||= result.error;
                else if (result.module.out)
                    setModule(result.module);
            }

            if (err)
                throw(err);
        }
        else
        //*/
        {
            modids.each: |modid|
            {
                let module = ctx.modules[modid];
                if (!module.out)
                {
                    shadow let implicit mut module = module.clone();
                    compile_solveCodegen();
                    setModule(module);
                }
            }
        }
    }
}


//

pub fn try_or_print_error(action)
{
    try {
        action();
    }
    catch (e) {
        println("\n" ~ "  ERROR ".qBAD ~ e);
        return 1;
    }

    return 0;
}

pub fn compile_and_build(

    fname!:     string,
    dir_wrk!:   string,

    //
    bin     !?: string,
    dir_obj !?: string,
    dir_src !?: string,
    dir_cpp !?: string,

    //
    runmode !?: build::RunMode,
    bscheme !?: build::BuildScheme,

    //
    flags_cc!?: string[],
    flags_ld!?: string[],

    shuffle!?: u32)
{
    import build;

    implicit mut ctx = prelude::CTX_PRELUDE.clone();
    implicit options = Options(:shuffle, dev: DEV_Parallel);


    // Hotswap builds need a couple of different artifacts -
    //  the shared runtime, built first, prelude-only,
    //   the main executable + any replacement payloads.

    fn build(
        shadow flags_ld !: string[],
        shadow runmode  !: RunMode,
        shadow bscheme  !: BuildScheme,
        shadow bin      !: string)
    {
        return build(
            :ctx,
            :bin, :dir_wrk, :dir_obj, :dir_src, :dir_cpp,
            :bscheme, :flags_cc, :flags_ld,
            unity: fname,

            runmode: runmode && bscheme & "watch"
                ? "EnsureExecutableButDontRun"
                : runmode);
    }


    // Modality -

    let HOTSWAP         = bscheme & "hotswap";
    let HOTSWAP_dirname = HOTSWAP && (bin ? bin.path::dirname : dir_wrk ~ "bin/");
    let HOTSWAP_plugin  = HOTSWAP && HOTSWAP_dirname ~ "hotswap";

    // Build the runtime -
    if (HOTSWAP)
    {
        /*
            This is the original bash script -

            if [ "$1" != "quick" ]; then
                ~/fu/bin/fu -c           --shared --bin bin/libfu.so  src/libfu.fu  --libs -ldl
                ~/fu/bin/fu -c --hotswap          --bin bin/launch    src/launch.fu --libs -ldl -L bin -lfu -Wl,-rpath,.

                if [ -f bin/hotswap ]; then
                    rm bin/hotswap
                fi
            else
                ~/fu/bin/fu -c --hotswap --shared --bin bin/hotswap   src/launch.fu --libs -ldl -L bin -lfu
            fi
        */

        build(
            bin: HOTSWAP_dirname ~ "libfu.so",
            :bscheme & ~BuildScheme.hotswap | BuildScheme.shared,
            runmode: "None",
            :flags_ld ~ [ "-ldl" ]);
    }

    fn HOTSWAP_build(plugin!: bool)
    {
        // Get rid of previously built plugins ASAP.
        let err = file::unlink(HOTSWAP_plugin);
        if (err && err != Errno::ENOENT)
            println("HOTSWAP Could not unlink " HOTSWAP_plugin ": err(" err ")");

        //
        let libs = [ "-L", HOTSWAP_dirname, "-lfu"/*libfu.so*/ ];

        let ORIGIN = process::APPLE
            ? "@loader_path"
            : "$$ORIGIN";

        if (plugin)
            return build(
                bin: HOTSWAP_plugin,
                :bscheme | BuildScheme.shared,
                runmode: "None",
                :flags_ld ~ libs);
        else
            return build(
                :bin,
                :bscheme & ~BuildScheme.shared,
                :runmode,
                :flags_ld ~ libs ~ [ "-Wl,-rpath," ~ ORIGIN ]);
    }


    //

    mut watch_list: string[];

    :REBUILD_LOOP
    for (;;)
    {
        fn recompile(plugin!?: bool, dont_try_catch!?: bool)
        {
            if (bscheme & "watch" && !dont_try_catch)
            {
                watch_pruneModules();

                try_or_print_error(|| {
                    return recompile(:plugin, dont_try_catch: true);
                });

                return [];
            }

            //
            println("COMPILE " fname);

            let t0 = now::hr();
            compile(:fname);
            let t1 = now::hr();
            let tt = t1 - t0;

            if (tt > 0.025)
                printSlowBuildDiagnostics(ctx);

            println("        " tt "s\n");


            // Rebuild.

            let ret = HOTSWAP
                ? HOTSWAP_build(:plugin)
                : build(:bin, :bscheme, :runmode, :flags_ld);

            if (ret.watch_list && bscheme & "watch")
                watch_list = ret.watch_list;

            return ret;
        }

        let ret = recompile();


        // TODO FIX shim a watch list if first compile fails.

        if (bscheme & "watch" && !watch_list)
            eachButPrelude: |module|
                if (module.fname)
                    watch_list ~= module.fname;


        // Run & watch.

        if (!TODO_REMOVE_bootstrap && watch_list)
        {
            mut fswatch_pid:    spawn::PID;
            mut run_pid:        spawn::PID;

            fn spawn(argv: string[]): spawn::PID
            {
                let pid = ev::Loop::spawn(:argv,
                    stdout: "Parent",
                    stderr: "Parent",
                    else: |err|
                    {
                        println("SPWN ER argv(" argv.join(" ") ") err(" err ")");
                    });

                // println("SPAWN   argv(" argv.join(" ") ") pid(" pid ")");
                return pid;
            }

            fn watch_or_rebuild_immediately()
            {
                // TODO FIX - instead of this fswatch child process,
                //  watch everything in-process, which means the watch_needsRebuild check below
                //   will actually work as intended and crosscheck
                //    AFTER all watches are already set up and receiving events.
                //
                fswatch_pid ||= spawn(
                    [ "fswatch", "--one-event" ] ~ watch_list);

                // Restart immediately if changed in the meantime.
                if (watch_needsRebuild)
                    continue :REBUILD_LOOP;
            }

            // TODO just ev::Loop, bootstrap currently can't handle it
            ev::Loop::Loop(

                loop_start: ||
                {
                    watch_or_rebuild_immediately();

                    if (runmode && ret.executable)
                        run_pid = spawn([ ret.executable ]);
                },

                child_closed: |pid, lax signo, lax code|
                {
                    if (pid == fswatch_pid)
                    {
                        fswatch_pid = 0;

                        // Invalidate changed files only.
                        watch_needsRebuild();

                        //
                        if (HOTSWAP && run_pid)
                        {
                            let ok = recompile(plugin: true);

                            watch_or_rebuild_immediately();

                            if (ok)
                            {
                                // Send the live-reload signal.
                                let err = signal::kill(pid: run_pid, signal::SIGUSR1)
                                if (err)
                                {
                                    println("HOTSWAP Could not signal pid(" run_pid ") err(" err ")");
                                }
                                else
                                {
                                    // Already running, compiled OK, signalled OK -
                                    //  dont shut down current run.
                                    continue;
                                }
                            }
                            else
                            {
                                // Already running, failed to compile latest changes -
                                //  dont shut down current run.
                                continue;
                            }
                        }

                        //
                        continue :REBUILD_LOOP;
                    }

                    if (pid == run_pid)
                        run_pid = 0;
                });
        }

        return ret;
    }
}


// Slow build diagnostics.

fn printSlowBuildDiagnostics(ctx: Context)
{
    mut lex:        ModuleStat;
    mut parse:      ModuleStat;
    mut solve:      ModuleStat;
    mut codegen:    ModuleStat;

    mut p:          profiler::ProfileData;

    mut sloc:       int;
    mut specs:      int;
    mut types:      int;

    ref m = ctx.modules;

    for (mut i = 1;     // Ignore prelude, missing stats.solve & co mess up crosscheck
         i < m.len;
         i++)
    {
        shadow let m = m[i];

        lex     += m.stats.lex;
        parse   += m.stats.parse;
        solve   += m.stats.solve;
        codegen += m.stats.codegen;

        p       += m.profile.data;

        sloc    += countSloc(m.in.lex.tokens);
        specs   += countSpecs(m.out.solve.scope.overloads);
        types   += m.out.types.len;
    }

    ModuleStat_print(lex,   "\n    lex ");
    ModuleStat_print(parse,   "  parse ");
    ModuleStat_print(solve,   "  solve ");
    ModuleStat_print(codegen, "codegen ", "\n");

    println("        ---------");
    println("   sloc " ~ sloc.leftpad(9));
    println("    fns " ~ specs.leftpad(9));
    println("  types " ~ types.leftpad(9));

    p.print();
    println("        ---------");
}

fn countSloc(tokens: Token[..])
{
    mut line0   = -1;
    mut sloc    = 0;

    for (mut i = 0; i < tokens.len; i++)
    {
        let t   = tokens[i];
        if (t.line == line0 || t.kind != "id")
            continue;

        line0   = t.line;
        sloc++;
    }

    return sloc || 1;
}

fn countSpecs(overloads: Overload[..])
{
    mut specs = 0;

    for (mut i = 0; i < overloads.len; i++)
    {
        let o = overloads[i];
        if (o.kind != "fn" && o.kind != "inline")
            continue;

        specs++;
    }

    return specs;
}
