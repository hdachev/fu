import module;
import helpers;

pub let SELF_TEST = !!true;


//

pub fn getModuleSrc(implicit ctx: Context, modid!: i32)
{
    return ctx.modules[modid].in.src;
}

pub fn formatTokenCoord(token: TokenIdx, from!: i32, implicit ctx: Context)
{
    mut fname = from != token.modid && token._fname;

    // Doing this for testdiffs, we want to emit the same error messages
    //  irrespective of where on the fs your code is,
    //   we dont want /home/username/myproj/whatever in there.
    //
    if (fname && ctx.base_dir)
        fname = path::relative(from: ctx.base_dir, to: fname);

    return formatTokenCoord(:fname, token: token._token);
}

pub fn formatTokenCoord(fname!: string, token: LineColChars)
{
    let lcc     = token.line ~ ":" ~ token.col ~ "+" ~ token.chars;
    if (!fname)
        return ansi::DIM ~ lcc ~ ansi::RESET;

    let dir     = path::dirname(fname);
    let file    = fname.slice(dir.len, fname.len);
    let ext     = path::ext(file);
    let noext   = file.slice(0, file.len - ext.len);

    return ansi::DIM ~ dir ~ ansi::RESET
         ~ noext
         ~ ansi::DIM
         ~ ext ~ " " ~ lcc
         ~ ansi::RESET;
}

using pub flags CodeFmt
{
    FullContext
    NoLeadContext
    NoTailContext
    NoContext
};

pub fn formatCodeSnippet(src!: string, fmt?: CodeFmt, mut highlight!: LineColChars[])
{
    // TODO should be able to sort without the < 0, moronic
    highlight.sort(
        |a, b| (a.line - b.line || a.col - b.col) < 0);

    for (mut i = highlight.len - 1; i --> 0; )
    {
        let a = highlight[i];
        let b = highlight[i + 1];

        if (a.line != b.line)
        {
            if (SELF_TEST)      // Not BUGGing here because that'd sorta go recursive.
                a.line < b.line || throw("formatCodeSnippet: a.line !< b.line");

            continue;
        }

        // Discard duplicate / overlapping tokens.
        if (a.col + a.chars > b.col)
            highlight.splice(i, 1);
    }

    if (!highlight)
        return "";

    //
    let lines   = src.split("\n");

    let start   = highlight.first;
    let end     = highlight.last;

    mut l_start = start.line - 1;  // lines are 1 based.
    mut l_end   =   end.line;

    l_start     = l_start.min(lines.len).max(0);
    l_end       = l_end  .min(lines.len).max(0);

    mut result  = "";

    let leadContext = fmt & (NoContext | NoLeadContext) ? 0 : 2;
    let tailContext = fmt & (NoContext | NoTailContext) ? 0 : 2;

    // Leading context lines.
    for (mut i = max(0, l_start - leadContext); i < l_start; i++)
    {
        result ~= ansi::DIM ~ "      | ";
        result ~= lines[i];
        result ~= ansi::RESET ~ "\n";
    }

    // Highlighted lines.
    for (mut i = l_start; i < l_end; i++)
    {
        mut line = lines[i];
        let line_no = i + 1;

        // Numbered line margins.
        {
            mut margin = line_no ~ " | ";
            while (margin.len < 8)
                margin = " " ~ margin;

            result ~= ansi::DIM ~ margin ~ ansi::RESET;
        }

        // Highlight error tokens on this line.
        for (shadow mut i = highlight.len; i --> 0; )
        {
            let token = highlight[i];
            if (token.line == line_no)
            {
                let c0 = (token.col - 1   ).min(line.len).max(0);
                let c1 = (c0 + token.chars).min(line.len);

                line.splice(c1, 0, ansi::RESET);
                line.splice(c0, 0, ansi::BAD);
            }
        }

        result ~= line ~ "\n";
    }

    // Trailing context lines.
    for (mut i = l_end; i < min(lines.len, l_end + tailContext); i++)
    {
        result ~= ansi::DIM ~ "      | ";
        result ~= lines[i];
        result ~= ansi::RESET ~ "\n";
    }

    return result;
}

pub fn formatCodeSnippet(mut tokens: TokenIdx[], from!: i32, fmt?: CodeFmt)
{
    tokens.sort(|a, b| a.modid < b.modid);

    mut append = "";
    for (mut i = 0; i < tokens.len - 1; i++)
    {
        let a = tokens[i];
        let b = tokens[i + 1];

        if (a.modid != b.modid)
        {
            append ~= "\n";
            append ~= formatCodeSnippet(tokens.slice(i + 1), :from);
            tokens.shrink(i + 1);
            break;
        }
    }

    let head = tokens.if_first;
    if (!head)
        return append;

    // Head token coord will print the filename unless == :from.
    mut result = "";
    result ~= formatTokenCoord(head, :from);

    // The rest of the remaining tokens here are in the same file.
    for (mut i = 1; i < tokens.len; i++)
        (result ~= ' ') ~= formatTokenCoord(tokens[i]._token, fname: "");

    result ~= ":\n";

    if !(fmt & (NoContext | NoLeadContext))
        result ~= "\n";

    //
    mut highlight: LineColChars[] = [];
    for (mut i = 0; i < tokens.len; i++)
        highlight.push(tokens[i]._token.lcc);

    let src = getModuleSrc(:head.modid);
    result ~= formatCodeSnippet(:src, :fmt, :highlight);

    //
    result ~= append;
    return result;
}


//

implicit ref _here: TokenIdx;

pub inline fn HERE(node.token: TokenIdx)
{
    if (node)
        _here = node;
}

pub fn FAIL_text(tokens: TokenIdx[], reason: string): string
{
    let snippet = formatCodeSnippet(:tokens, from: -1);

    return snippet ~ "\n\t" ~ reason ~ "\n";
}

pub fn FAIL_text(
    fname!: string, src!: string,
    token!: LineColChars, reason!: string): string
{
    let addr    = formatTokenCoord(:fname, :token);
    let snippet = formatCodeSnippet(:src, highlight: [ token ]);

    return addr ~ ":\n\n" ~ snippet ~ "\n\t" ~ reason ~ "\n";
}

pub fn FAIL(reason: string, tokens!: TokenIdx[] = [ _here ]): never
{
    throw(FAIL_text(:tokens, :reason));
}

pub fn FAIL(
    fname!: string, src!: string,
    token!: LineColChars, reason!: string): never
{
    throw(FAIL_text(:fname, :src, :token, :reason));
}

pub fn BUG(mut reason?: string)
{
    FAIL("COMPILER BUG:\n\n\t" ~ (reason || "Assertion failed."));
}

pub fn TEST_true(inline assertion, inline msg?: string)
{
    if (SELF_TEST)
        return assertion || BUG(msg);
    else
        return assertion;
}
