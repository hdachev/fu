import module;
import context;

pub fn FAIL(implicit _here: TokenIdx, reason: string): never
{
    let src     = getModuleSrc(:_here.modid);
    let token   = _here._token;
    let fname   = _here._fname;

    return FAIL(:fname, :src, :token, :reason);
}

pub fn FAIL(
    fname!: string, src!: string,
    token!: LineColChars, reason!: string): never
{
    let addr    = formatTokenCoord(:fname, :token);
    let snippet = formatCodeSnippet(
        :src, start: token, end: token);

    return throw(addr ~ ":\n\n" ~ snippet ~ "\n\t" ~ reason ~ "\n");
}

pub fn HERE(implicit ref _here: TokenIdx, node.token: TokenIdx)
{
    if (node)
        _here = node;
}

pub fn BUG(mut reason?: string)
{
    FAIL("COMPILER BUG:\n\n\t" ~ (reason || "Assertion failed."));
}
