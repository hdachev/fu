import ansi;
import helpers;
import parser;
import scope;
import context;
import types;
import effects;


// Solver notes.

pub let N_FnRecursion       = 1 << 0;
pub let N_FnResolve         = 1 << 1;
pub let N_FnReopen          = 1 << 2;

pub let N_TypeRecursion     = 1 << 3;
pub let N_TypeResolve       = 1 << 4;
pub let N_TypeReopen        = 1 << 5;

pub let N_DeadCode          = 1 << 6;
pub let N_DeadCall          = 1 << 7;
pub let N_DeadLet           = 1 << 8;
pub let N_DeadIf            = 1 << 9;
pub let N_DeadIfCons        = 1 << 10;
pub let N_DeadArrlit        = 1 << 11;

pub let N_NonTrivAutoCopy   = 1 << 12;

pub let N_RelaxRespec       = 1 << 13;


//

let OPTI_autoshadow         = true;
let OPTI_dedupe_vars        = true;
let OPTI_flatten_blocks     = true;

let USE_nontriv_autocopy    = true;
let USE_ref_to_mutref       = true;

let SELF_TEST               = true;

let CANNOT_definit_mutrefs  = true;


//

let M_WILL_RETYPE: u16      = 1.u16 << 0;



///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
////////
////////
////////
////////     Solver.

pub fn solve(
    implicit ctx: Context,
    implicit ref module: Module,
    options: options::Options): SolverOutput
{
    let parse = module.in.parse.root;

    struct Info
    {
        here: TokenIdx;
        text: string;
    };

    mut _info:          Info[];
    mut _here:          TokenIdx;

    fn HERE(node: Node)
        if (node.token)
            _here = node.token;


    //

    mut _scope:         Scope;
    mut _root_scope:    ScopeMemo;
    mut _ss:            ScopeSkipMemos;
    mut _field_items:   ScopeItem[];
    mut _notes:         i32;

    struct CurrentFn
    {
        using out:      SolvedNode;
        using flow?:    Flow;

        events?:        Events;
        loop_start?:    i32;
    };

    mut _current_fn:    CurrentFn;
    let implicit mut
        _helpers:       Helpers[];

    mut _anons:         i32;
    fn ANON(): string = "0" ~ _anons++;


    //

    let MODULE_TOP    = Scope_create(_scope, kind: "_module_top_");
    _helpers         ~= Helpers(target: MODULE_TOP, "_module_top_");

    mut _current_fn_or_type = MODULE_TOP;


    // Can't we just list them all and scan through?
    //  Do we need the mangling nonsense?
    //   We can bucket however many times we want here,
    //    its append only and trivial to maintain.

    mut _specs:         Map(string, Target); // mangle -> spec


    //

    let t_string = createArray(t_byte);

    struct TypeParam {
        matched:  Type;
        consumed: Type;
    };

    type TypeParams = Map(string, TypeParam);


    //

    pure fn fail(mut reason: string = ""): never
    {
        let here = _here._token;
        if (!reason)
            reason = "Unexpected `" ~ here.value ~ "`.";

        // What's happening and where?
        let fname = _here._fname;
        let addr = "@" ~ here.line ~ ":" ~ here.col;
        for (mut i = _info.len; i --> 0; )
        {
            let info = _info[i];
            shadow let here = info.here._token;
            reason ~= here
                ? "\n\t@" ~ here.line ~ ":" ~ here.col ~ ": " ~ info.text
                : "\n\t" ~ info.text;
        }

        // What were we currently solving?
        mut callstack = 0;
        for (mut i = _helpers.len; i --> 0; )
        {
            let h = _helpers[i];
            if (h.isFnOrType)
            {
                if (!callstack++)
                    reason ~= "\n\n        Solving ";
                else
                    reason ~=   "\n                ";

                let o = GET(h.target);
                reason ~= o.qWHAT;
            }
        }

        reason ~= '\n';

        // Try to present a code snippet.
        let snippet = formatCodeSnippet(_here);

        return throw(fname ~ " " ~ addr ~ ":\n\n" ~ snippet ~ "\n\t" ~ reason);
    }

    fn qWHAT(o: Overload)
    {
        return o.kind.qKW ~ " " ~ o.name.human.qID;
    }

    fn human(id: string)
    {
        let t = hacks::tryParseClosureID(:id, :MODID);
        if (!t) return id;

        let o = GET(t);
        return GET(Target(:module.modid, o.local_of)).name ~ ":" ~ o.name;
    }

    fn makeNote(note: i32)
    {
        if (note & options.break_notes)
            fail("`break_notes`: Unwanted event: `" ~ note ~ "`.");

        _notes |= note;
    }

    fn _Scope_import__forceCopy(modid: i32, private?!: bool): void
    {
        let s = ctx.modules[modid].out.solve.scope;
        _scope.items ~= s.items[0, private ? s.items.len : s.pub_count];
    }

    fn Scope_import(modid: i32, private?!: bool): void
    {
        _scope.imports.each(_ss.imports, |import|
        {
            if (import == modid)
                return;
        });

        modid || fail("Attempting to import modid-0.");
        _scope.imports ~= modid;
        _Scope_import__forceCopy(modid, :private);
    }

    using fn GET(target: Target)
    {
        if (target.modid < 0)
            return _scope.extended[-target.modid - 1].locals[target.index - 1];

        if (target.modid == module.modid)
            return _scope.overloads[target.index - 1];

        let o = ctx.modules[target.modid]
            .out.solve.scope.overloads[target.index - 1];

        o.local_of && fail(
            "Working with locals from other modules would "
                ~ "prevent bucketing overloads within other overloads: " ~ o.qWHAT);

        return o;
    }

    fn GET_mut(target: Target)
    {
        if (target.modid < 0)
            return _scope.extended[-target.modid - 1].locals[target.index - 1];

        target.index > 0 && target.modid == MODID || assert();
        return _scope.overloads[target.index - 1];
    }

    using fn EXT(target: Target)
    {
        if (target.modid == module.modid)
            return _scope.extended.grow_if_oob(target.index - 1);

        return target.modid >= 0
            && ctx.modules[target.modid].out.solve.scope.extended.unless_oob(target.index - 1);
    }

    fn EXT_mut(target: Target)
    {
        target.modid == module.modid || assert();
        return _scope.extended.grow_if_oob(target.index - 1);
    }

    using fn SolvedNodeData(nid: SolvedNode)
    {
        return nid.nodeown
            && nid.nodeown.nodes[nid.nodeidx];
    }

    fn MUT(nid: SolvedNode)
    {
        // TODO FIX this is bad: here because of arg defaults from other modules
        if (nid.nodeown.modid != module.modid)
        {
            mut t = SolvedNode(kind: "", type: Type);
            return MUT(t) = SolvedNodeData(nid);
        }

        return nid.nodeown.EXT_mut.nodes[nid.nodeidx];
    }

    fn GET_next_local_index()
    {
        return _current_fn.target.index
            && _scope.extended[_current_fn.target.index - 1].locals.len + 1;
    }

    fn nested(index: i32)
    {
        return Target(modid: -_current_fn.target.index || module.modid, :index);
    }

    fn isFnOrType(h: Helpers): bool
        !!(h.mask & (HM_Function | HM_Struct));

    fn SolvedNode(
        kind:       string,
        type:       Type,
        flags?:     i32,
        value?:     string,
        items?:     SolvedNode[],
        target?:    Target)
    {
        let data    = SolvedNodeData(
            :kind, :flags, :value,
            :items, :type, :target);

        let nodeown = _current_fn_or_type;

        ref nodes   = nodeown.EXT_mut.nodes;
        let nodeidx = nodes.len;
        nodes      ~= data;

        // println("    SN " ~ kind ~ " " ~ value ~ "    @ " ~ nodeown.index ~ ":" ~ nodes.len - 1);

        return SolvedNode(:nodeown, :nodeidx);
    }

    // TODO FIX /////////////////////////////////
    mut TODO_FIX_convert_args = [ SolvedNode(kind: "", type: Type()) ];
    /////////////////////////////////////////////

    let TODO_FIX_template_defarg = SolvedNode(kind: "__defarg", type: Type());


    //

    fn Lifetime_fromNative(sig: [Node], args: [SolvedNode], actual: Type): Lifetime
    {
        sig.len + FN_ARGS_BACK == args.len || fail("sig.len != args.len");

        let ret = sig[sig.len + FN_RET_BACK];
        mut mutref = ret.kind == "call" && ret.items.len == 1 && ret.value == "&mut";

        mut res: Type;
        for (;;)
        {
            for (mut i = 0; i < args.len; i++)
            {
                let inArg = sig[i];
                let annot = inArg.items[LET_TYPE];
                if (annot.items.len == 1 && ((annot.kind == "call"
                    && (!mutref && annot.value == "&" || annot.value == "&mut"))
                     || !mutref && annot.kind == "arrlit"))
                {
                    res && fail("Ambiguous __native lifetime.");

                    res = args[i].target.type;
                    res.lifetime || fail("Missing arg lifetime.");
                }
            }

            // Try again without the mutref,
            //  currently we have a bunch of drama related to case-patterns,
            //   the mutref annots actually come in the branches, not the arg annots.
            if (!mutref || res.lifetime)
                break;

            mutref = false;
        }

        res.lifetime.uni0n.only.Region_isArg || fail("Non-single-arg __native lifetime.");

        // TODO FIX UNIQUENESS adding a static lifetime to constref results
        //  that are not assignable from the source argument,
        //   this coincides with container derefs currently -
        //
        // We only want to avoid attempts to move from there for now.
        //
        if (!actual.is_mutref && !isAssignable(host: actual, res))
            return Lifetime_makeShared(res.lifetime);

        return res.lifetime;
    }

    fn Lifetime_test(lifetime: Lifetime, tempsOK?!: bool): Lifetime
    {
        if (SELF_TEST)
        {
            let current_fn  = _current_fn.target;
            let debug_2     = current_fn && GET(current_fn);
            if (debug_2) {}

            if !(lifetime.uni0n.len)
                fail("Lifetime_test: no region set.");

            mut _last: Region;
            for (mut i = 0; i < lifetime.uni0n.len; i++)
            {
                let region  = lifetime.uni0n[i];
                {
                    !i || region > _last || fail("Lifetime_test: not a sorted set");
                    _last = region;
                }

                if (Region_isArg(region))
                    continue;

                if (region.Region_isTemp)
                {
                    i == lifetime.uni0n.len - 1 && tempsOK || fail("Lifetime_test: unexpected temporary.");
                    continue;
                }

                fn fnd(index: i32)
                    GET(nested(:index));

                let index = region.Region_toLocalIndex;
                let local = index && fnd(index);
                let local_of = local.local_of; // zero for globals
                if (local_of)
                {
                    mut frame = current_fn.index;
                    while (local_of != frame)
                    {
                        local_of <= frame || fail("Lifetime_test: `" ~ local.name ~ "` is not a local: `"
                            ~ fnd(local_of).name ~ "` does not contain "
                            ~ (frame    ? "`" ~ fnd(frame).name ~ "`"
                                        : "global scope")
                            ~ (current_fn.index != frame ? ", testing from `" ~ fnd(current_fn.index).name ~ "`." : "."));

                        frame || fail("Lifetime_test: climbed up to root");
                        frame = fnd(frame).local_of;
                    }
                }
            }
        }

        return lifetime;
    }

    fn Lifetime_fromBinding(target: Target, local_of!: i32, flags!: i32, type: Type): Lifetime
    {
        target.modid < 0 || target.modid < 0 || target.modid == module.modid || fail("not from this module");

        // Globals?
        if (!local_of)
            return Lifetime_static();

        // Alias?
        //
        // SHALLOW LIFETIMES: The problem with this is that we lose the notion of what invalidates what -
        //  var0, var1 = var0.smth, `var2 = var1.smth`:
        //   assigning to `var2` does not invalidate `var1` or `var0`.
        //
        let isArg = flags & F_ARG;
        // if (!isArg && type.is_ref)
        //     return Lifetime_test(type.lifetime);
        //
        // So we try to still emit an inner lifetime,
        //  and reveal the super lifetime only when needed.

        // Argument?
        let index       = target.index;
        let region      = isArg && type.is_ref
            ? Region_fromArgIndex(index)
            : Region_fromLocalIndex(index);

        let res = Lifetime_test(Lifetime(uni0n: [ region ]));
        return res;
    }

    fn arg_lets(overload: Overload)
        overload.solved.items[0, overload.solved.items.len + FN_ARGS_BACK];

    fn Lifetime_replaceArgsAtCallsite(overload: Overload, argNodes: [SolvedNode]): Lifetime
    {
        let returned    = overload.type.lifetime.uni0n;
        let items       = overload.arg_lets;

        // Nothing to do if empty/non-arg.
        // TODO FIX this opti no longer works correctly
        //  since the static LT now looks like an argument (is negative).
        if (!Region_isArg(returned.if_first))
            return Lifetime(uni0n: returned);

        let head = items[0].target.index;
        let tail = items[items.len - 1].target.index;

        mut keep:       Lifetime;
        mut replace:    Lifetime;

        mut offset = items.len;

        for (mut i = 0; i < returned.len; i++)
        {
            let region      = returned[i];
            let index       = region.Region_toArgIndex;

            // We're only filtering here, no need to run the full thing.
            if (index < head || index > tail) {
                keep.uni0n ~= region;
                continue;
            }

            // Full union here, otherwise we risk messing things up.
            while (offset--)
            {
                let here = items[offset].target.index;
                if (here == index)
                {
                    let argNode = argNodes[offset];

                    let argLt = argNode.type.is_ref
                        ? argNode.type.lifetime || fail("refarg without lifetime")
                        : Lifetime_temporary();

                    replace = Lifetime_union(replace, argLt);
                    break;
                }

                !here || here > index || fail("nope, going backwards");
            }
        }

        return Lifetime_union(keep, replace);
    }

    using fn Region_GET(r: Region)
    {
        // TODO statics
        let idx = Region_isArg(r)   ? Region_toArgIndex(r)
                                    : Region_toLocalIndex(r);
        return GET(nested(idx));
    }


    //

    fn Binding(id: string, mut type: Type, flags!: i32, ref shadows!: bool)
    {
        mut name = id;

        //
        let local_of = _current_fn.target.index;

        // Unique identifiers.
        if (_root_scope)
        {
            mut autoshadow  = 0;
            mut id_clashes  = 0;

            _scope.items.each(_ss.declash, |item, index|
            {
                let root = index <= _root_scope.items_len;

                if (item.id == id)
                {
                    if (!root)
                        autoshadow++;

                    id_clashes++;
                }
            });

            if (id_clashes)
                name ~= "_" ~ id_clashes;

            // LEAKY TEMPLATES, part 1:
            //  All locals are F_SHADOW - this is a usability thing really,
            //   otherwise you'd simply have to `shadow` everything manually.
            //
            // Actually turning this on for everything -
            //  it might optimize scope lookups all over the place.
            //
            if (OPTI_autoshadow && local_of && !autoshadow)
                shadows = true;
        }

        // Reserve the slot.
        let target = Scope_create(_scope, kind: "var", :name, :flags, :local_of, nest: true);

        _helpers.last.vars ~= target.index;

        // Setup the lifetime for references to this binding.
        ref overload = GET_mut(target);
        {
            let lifetime = Lifetime_fromBinding(target, :local_of, :flags, type);

            ///////////////////////////////////////////////////////////////
            // Throw away argument lifetime, union below will fix it up. //
            // SHALLOW LIFETIMES: Now we do this for all refs.           //
            // if (flags & F_ARG) /////////////////////////////////////////
            type.lifetime = Lifetime(); ///////////////////////////////////
            ///////////////////////////////////////////////////////////////

            overload.type = flags & F_MUT
                ? add_mutref(type, lifetime)
                : add_ref   (type, lifetime);
        }

        return target;
    }

    fn createTemplate(node: Node): Template
    {
        return Template(
            node,
            imports:   !_current_fn && _scope.imports,
            scope_memo: _current_fn && Scope_snap(_scope),
            scope_skip: _current_fn && _ss);
    }


    //

    fn createDefinit(mut type: Type): SolvedNode
    {
        if (type.is_ref)
            type.lifetime = Lifetime_static();

        // TODO FIX this is backwards, its not always practical -
        //  tryRetype just switches the type but doesn't switch from definit to int/real lit.
        //   what'd be more useful is to have int & real literals snap to definit instead of these two.
        //
        if (type.is_integral)
            return SolvedNode(kind: "int", :type, value: "0");

        if (type.is_floating_pt)
            return SolvedNode(kind: "real", :type, value: "0");

        return SolvedNode(kind: "definit", :type);
    }

    fn trySolveDefinit(type: Type, mode?: u16): Type
    {
        if (!type)
        {
            // This could return void at all times, but it makes for crappier errors,
            //  so this is not a correctness thing, it's a usability thing.
            if (mode & M_WILL_RETYPE)
                return t_void;

            return fail(
                "Cannot solve definit, no inferred type.");
        }

        if (CANNOT_definit_mutrefs && type.is_mutref)
            return clear_mutref(type);

        return type;
    }

    fn solveDefinit(type: Type, mode: u16): SolvedNode
    {
        return createDefinit(
            trySolveDefinit(:type, :mode) || fail(
                "Cannot definit type: " ~ serializeType(type)));
    }


    //

    fn solveTypeAssert(node: Node): SolvedNode
    {
        let left   = node.items[0];
        let right  = node.items[1];

        // left -> right.
        let expect = evalTypeAnnot(right).type;
        let actual = solveNode(left, expect);

        checkAssignable(host: expect, actual.type,
            "Type assertion failed");

        return actual;
    }


    //

    fn reorderByNumUsings(
        ref use_reorder: bool, ref reorder: i32[],
        host_args: Argument[], num_args: i32, num_usings!: i32)
    {
        reorder.clear();

        if (num_usings)
        {
            for (mut i = 0; i < host_args.len; i++)
            {
                let x = i - num_usings;
                reorder.push(x >= 0 && x < num_args ? x : -1);
            }
        }

        use_reorder = !!reorder;
    }

    fn reorderByArgIDs(
        ref use_reorder: bool, ref reorder: i32[],
        names: string[], mut optional: bitset::BitSet,
        host_args: Argument[], num_usings!: i32): bool
    {
        use_reorder = true;
        reorder.clear();

        //
        mut used   = 0;
        mut offset = num_usings;
        for (mut i = 0; i < host_args.len; i++)
        {
            mut idx = names.find(host_args[i].name);
            if (idx < 0)
            {
                for (shadow mut i = offset; i < names.len; i++)
                {
                    offset++;
                    if (!names[i])
                    {
                        idx = i;
                        break;
                    }
                }
            }
            else
            {
                used++;
                optional.rem(i);
            }

            reorder.push(idx);
        }

        // Fail if some name ended up unused.
        //  TODO FIX THIS MESS
        if (used != names.len)
        {
            for (mut i = 0; i < names.len; i++)
                if (!names[i])
                    used++;

            if (used + optional.popcount != names.len)
                return false;
        }

        // Drop trailing misses.
        while (reorder && reorder[reorder.len - 1] < 0)
            reorder.pop();

        // See if needed.
        if (reorder.len != names.len)
            return true;

        for (mut i = 0; i < reorder.len; i++)
            if (reorder[i] != i)
                return true;

        // Matches but no need for the reorder stuff.
        reorder.clear();
        use_reorder = false;

        return true;
    }

    fn findRestStart(ext: Extended)
    {
        for (mut i = ext.args.len; i --> 0; )
        {
            let arg = ext.args[i];
            if  (arg.flags & F_REST_ARG) return i;
            if !(arg.flags & F_IMPLICIT) break;
        }

        return ext.args.len;
    }

    fn tryMatch__mutargs(
        scope: Scope, local_scope: bool,
        mut id: string,
        ref reorder: i32[],
        ref conversions: Target[][],
        args?: [SolvedNode],
        flags?!: i32, target?!: Target): Target
    {
        mut matchIdx: Target;
        mut DEBUG_assertMatch: Target;

        mut minArity        = args.len;
        let numUsings       = scope.usings && countUsings(:scope, :local_scope);
        let explicitArity   = minArity;
        let maxArity        = explicitArity + numUsings;

        // Prep labelled args for remap.
        mut names: string[];
        mut optional: bitset::BitSet;
        if (flags & F_NAMED_ARGS)
        {
            mut some = false;

            for (mut i = 0; i < args.len; i++)
            {
                let arg = args[i];
                names.push(arg.kind == "argid"
                    ? { some = true; arg.value } || fail()
                    : "");

                if (arg.flags & F_OPT_ARG)
                {
                    minArity--;
                    optional.add(i);
                }
            }

            some || fail();
        }

        mut reusable_mangle: string;

        // Argument & `using` dependent lookup,
        //  basically we do everything we can to get rid of imports.
        //
        // THIS LOOKS WORSE THAN IT IS:
        //  We only pushback stuff when the modules are not imported and there's an actual match,
        //   and we could possibly further filter them by arity.
        //
        mut extra_items: Target[];
        if (local_scope && !target)
        {
            mut seen: bitset::BitSet;

            fn visitTypeImports(type: Type)
            {
                let visit = type.lookupTypeImports();
                for (mut i = -1; i < visit.len; i++)
                {
                    let modid = i >= 0 ? visit[i] : type.modid;
                    if (seen.has(modid))
                        continue;

                    // Lazy init -
                    //  we want to ignore self and all imports,
                    //   and everything we've already traversed.
                    if (!seen)
                    {
                        seen.add(0);
                        seen.add(module.modid);
                        scope.imports.each(
                            local_scope && _ss.imports,
                                |shadow modid| seen.add(modid));
                    }

                    if (!seen.add_once(modid))
                        continue;

                    //
                    let items = ctx.modules[modid].out.solve.scope.items;
                    for (shadow mut i = 0; i < items.len; i++)
                        if (items[i].id == id)
                            extra_items.push(items[i].target);
                }
            }

            // Usings.
            if (numUsings)
                scope.usings.each(
                    local_scope && _ss.usings,
                        |u| visitTypeImports(GET(u).type));

            // Field access, method calls & operator calls.
            //  TODO no way to opt-out of this for operators currently,
            //   consider regular id-names for all ops, so we can freefn call them.
            if (flags & (F_ACCESS | F_METHOD | F_INFIX | F_PREFIX | F_POSTFIX))
                for (mut i = 0; i < args.len; i++)
                    visitTypeImports(args[i].type);
        }

        // TODO the whole field_items thing is a mess,
        //  we really need a cleaner way to put these things up.
        let field_items = local_scope && (flags & F_ACCESS || !minArity)
            && minArity <= 1 && maxArity
            && _field_items;

        //
        mut alternate_ids: string[];

        for (;;)
        {
            mut scope_iterator: i32;
            mut overloadIdx: Target;

            //
            mut shadows: bool;
            NEXT: while (overloadIdx =
                scope.items.search(id, scope_iterator,
                    scope_skip: local_scope && (flags & F_IMPLICIT ? _ss.declash : _ss.items),
                    dont_search_just_return: target, :extra_items, :field_items, :shadows))
            {
                ///////////////////////////////////
                ref conversions_out = conversions;
                shadow mut conversions: Target[][];

                ref reorder_out = reorder;
                shadow mut reorder: i32[];

                shadow let args = args;

                mut TODO_FIX_skip_autocalls = false;
                ///////////////////////////////////

                TEST_AGAIN: while (true)
                {
                    let overload = GET(overloadIdx);

                    // Make sure we know what this is.
                    if (lazySolveStart(overloadIdx, overload))
                        continue :TEST_AGAIN;

                    ////////////////////////////////////////////
                    // Conversions / typename aliases.
                    let kind    = overload.kind;
                    let isType  = kind == "type";
                    if (minArity && isType && !target)
                    {
                        let alt = overload.type.canon;
                        if (alt != id) // e.g. i32
                            alternate_ids.push(alt);
                    }
                    ////////////////////////////////////////////

                    // Arity check.
                    let arity = overloadIdx.EXT;
                    let isZeroInit = isType && !explicitArity;
                    if (!isZeroInit)
                        if (arity.max < minArity || arity.min > maxArity)
                            continue :NEXT;

                    // Reorder by argument names or number of implicit `using` args.
                    let host_args   = arity.args;
                    let num_usings  = !isZeroInit && arity.min > explicitArity
                                    && arity.min - explicitArity;

                    mut use_reorder = false;
                    if (!names)
                        reorderByNumUsings(:use_reorder, :reorder, host_args, args.len, :num_usings);
                    else if (!reorderByArgIDs(:use_reorder, :reorder, names, optional, host_args, :num_usings))
                        continue :NEXT;

                    // Forbid optional argument ambiguities -
                    //  We should either have all optional args satisfied at the receiver or sender part,
                    //   we shouldn't allow dangling cables on both ends because that's super typo-prone.
                    if (optional && reorder)
                        if (reorder.len < args.len && reorder.len < arity.max)
                            continue :NEXT; // TODO NICE ERROR HERE

                    fn disambig()
                    {
                        if (matchIdx)
                        {
                            fn GETfn(idx: i32) GET(Target(modid: module.modid, index: idx));

                            fn fnName(idx: i32) idx
                                ? "`" ~ GETfn(idx).name ~ "`"
                                : "global scope";

                            let PREV        = matchIdx;
                            let NEXT        = overloadIdx;

                            let inner       = PREV.local_of;            // first to match is innermost scope
                            let outer       = NEXT.local_of;            //  what we're currently looking is upscope
                            let callsite    = _current_fn.target.index; //   as seen from where we currently are

                            if (SELF_TEST)
                            {
                                mut _c = callsite;
                                while (_c > inner) _c = GETfn(_c).local_of;
                                _c == inner || fail(
                                    "BUG! Leaking `" ~ id ~ "` between functions [inner/callsite]: "
                                        ~ inner.fnName ~ " is seen from " ~ callsite.fnName);

                                mut _i = inner;
                                while (_i > outer) _i = GETfn(_i).local_of;
                                _i == outer || fail(
                                    "BUG! Leaking `" ~ id ~ "` between functions [inner/outer]: "
                                        ~ inner.fnName ~ " and " ~ outer.fnName
                                        ~ " as seen from " ~ callsite.fnName);
                            }

                            fail("Ambiguous callsite, matches multiple items in scope: "
                                ~ explainWhichFn(PREV, conversions_out) ~ " from " ~ inner.fnName ~ " and "
                                ~ explainWhichFn(NEXT, conversions    ) ~ " from " ~ outer.fnName ~ ", as seen from " ~ callsite.fnName ~ ".");
                        }
                    }

                    mut REST_TYPE: Type;
                    let REST_START = arity.findRestStart();

                    let N = (use_reorder ? reorder.len : args.len)
                        .max(!isZeroInit && arity.min);

                    if (N)
                    {
                        reorder.len >= args.len || !reorder || optional || fail("reorder < args.");

                        ARG_OK:
                        for (mut i = 0; i < N; i++)
                        {
                            let rest        = i >= REST_START;
                            let host_arg    = host_args[rest ? REST_START : i];
                            let expect      = host_arg.type;

                            // TODO FIX!
                            if (TODO_FIX_skip_autocalls && rest)
                                continue :ARG_OK;

                            // Its either reorder or args, asserted above [^].
                            let callsiteIndex   = use_reorder   ? reorder[i]
                                                : i < args.len  ? i
                                                : /*using*/ -1;

                            if (callsiteIndex < 0)
                            {
                                // Argument may not be defaulted -
                                //  we might be supplying defaults via names
                                //   before we've actually exhausted
                                //    all the non-defaulted stuff.
                                if (host_arg.default || host_arg.flags & F_IMPLICIT)
                                    continue :ARG_OK;

                                // Usings - can't match on explicitly named arguments.
                                if !(host_arg.flags & F_MUSTNAME || flags & F_CONVERSION)
                                {
                                    // Can't proceed if we don't know what we're looking for.
                                    //  If we decide to not support more than a single using,
                                    //   we could simply assume it's a match here.
                                    //
                                    shadow let expect = expect || host_arg.default.type;
                                    if (expect)
                                    {
                                        let conversion = tryConvert(:scope, :local_scope, :expect);
                                        if (conversion)
                                        {
                                            conversions.grow_if_oob(i) = conversion;
                                            continue :ARG_OK;
                                        }
                                    }
                                }

                                continue :NEXT;
                            }

                            // Explicit argname requirements.
                            if (host_arg.flags & F_MUSTNAME)
                            {
                                if (names.len <= callsiteIndex || !names[callsiteIndex])
                                    continue :NEXT;
                            }

                            // Autocall.
                            if (host_arg.autocall && !TODO_FIX_skip_autocalls)
                            {
                                mut autocall_args:          SolvedNode[];
                                mut autocall_reorder:       i32[];
                                mut autocall_conversions:   Target[][];

                                autocall_args.resize(1);
                                autocall_args[0] = args[callsiteIndex];

                                let t = tryMatch__mutargs(:scope, :local_scope, id: host_arg.autocall, args: autocall_args, reorder: autocall_reorder, conversions: autocall_conversions);
                                if (!t)
                                    continue :NEXT;

                                if (autocall_conversions)
                                    conversions.grow_if_oob(i) ~= autocall_conversions.only;

                                conversions.grow_if_oob(i) ~= t;
                                autocall_reorder.len < 2 || fail("autocall: reorder");
                            }

                            // Templates.
                            if (!expect)
                                continue :ARG_OK;

                            let hasConv = conversions.len > i && conversions[i].len;
                            let actual = hasConv
                                ? GET(conversions[i].last).type
                                : args[callsiteIndex].type;

                            if (isAssignableAsArgument(expect, actual || fail("tryMatch: !actual")))
                                continue :ARG_OK;

                            /////////////////
                            // Literal fixup.
                            if (!hasConv)
                            {
                                let        arg = args[callsiteIndex];
                                shadow let arg = arg.kind == "argid"
                                    ? arg.items.only
                                    : arg;

                                let retype = tryRetyping(arg, expect);
                                if (isAssignableAsArgument(expect, retype))
                                    continue :ARG_OK;
                            }
                            //        /LITFIX
                            /////////////////

                            // Go through conversions here.
                            if !(flags & F_CONVERSION)
                            {
                                let conversion = tryConvert(:scope, :local_scope, :expect, :actual, retype: !hasConv && args[callsiteIndex]);
                                if (conversion)
                                {
                                    conversions.grow_if_oob(i) ~= conversion;
                                    continue :ARG_OK;
                                }
                            }

                            // Nope, args fail.
                            continue :NEXT;
                        }
                    }

                    if (REST_START < N)
                    {
                        for (mut i = REST_START; i < N; i++)
                        {
                            let hasConv         = conversions.len > i && conversions[i].len;
                            let callsiteIndex   = use_reorder ? reorder[i] : i;
                            let actual          = hasConv
                                ? GET(conversions[i].last).type
                                : args[callsiteIndex].type;

                            REST_TYPE = i == REST_START
                                ? solveArrlit_itemType_init(head: actual)
                                : type_trySuper(REST_TYPE, actual);

                            if (!REST_TYPE)
                                continue :NEXT;
                        }

                        REST_TYPE = solveArrlit_done(itemType: REST_TYPE);
                    }

                    // Specialize.
                    if (kind == "template")
                    {
                        mut cant_reuse: string;

                        shadow ref args_mangled =
                            (use_reorder || conversions
                                ? cant_reuse : reusable_mangle);

                        let specIdx = trySpecialize(
                            :overloadIdx, :args, :reorder, :use_reorder,
                            :conversions, :args_mangled,
                            :REST_START, :REST_TYPE);

                        if (!specIdx)
                            continue :NEXT;

                        // Repeat arity checks and such.
                        //
                        // TODO doesn't seem necessary anymore.
                        //  It's crazy to think that we'd specialize an inline
                        //   and end up not using it.
                        //
                        overloadIdx         = specIdx;
                        DEBUG_assertMatch   = specIdx;

                        TODO_FIX_skip_autocalls = true;

                        continue :TEST_AGAIN;
                    }

                    // Forbid ambiguity.
                    disambig();

                    // Output conversions /////////////
                    SWAP(reorder,     reorder_out    );
                    SWAP(conversions, conversions_out);
                    ///////////////////////////////////

                    // Done!
                    matchIdx = overloadIdx;

                    // Arity 0 auto-shadows.
                    if (shadows)
                        break :NEXT;

                    // Done here.
                    break :TEST_AGAIN;
                }
            }

            //////////////////////////////////
            // Conversions / typename aliases.
            if (!alternate_ids)
                break;

            id = alternate_ids.last;
            alternate_ids.pop();
            //////////////////////////////////
        }

        if (DEBUG_assertMatch)
            DEBUG_assertMatch == matchIdx || fail(
                "Specialized `" ~ GET(DEBUG_assertMatch).name ~ "` but ended up not using it.");

        return matchIdx;
    }


    //

    fn couldRetype(node: SolvedNode): bool
    {
        return node.kind == "int"
            || node.kind == "real"
            || node.kind == "definit";
    }

    fn tryRetyping(node: SolvedNode, expect: Type): Type
    {
        if (node.type.quals & expect.quals & q_arithmetic)
        {
            if (node.kind == "int")
                return solveInt(node.value, expect);

            if (node.kind == "real")
                return solveNum(node.value, expect);
        }

        if (node.kind == "definit")
            return trySolveDefinit(expect);

        return [];
    }


    //

    fn countUsings(scope: Scope, local_scope: bool): i32
    {
        let scope_skip = local_scope && _ss.usings;
        mut count = 0;
        scope.usings.each(scope_skip, |u| u ? count++ : fail());
        return count;
    }

    fn explainConversion(shadow path: [Target])
    {
        mut res = "`";
        for (mut i = 0; i < path.len; i++)
        {
            if (i) res ~= "` -> `";

            let o = GET(path[i]);
            res ~= o.qWHAT;

            if (i < path.len) res ~= ": " ~ serializeType(o.type);
        }

        res ~= "`";
        return res;
    }

    fn tryConvert(
        scope: Scope, local_scope: bool,
        expect: Type, actual?: Type, retype?: SolvedNode): Target[]
    {
        mut match:  Target[];
        mut path:   Target[];

        let has_converts    = scope.converts.len;
        let ss_converts     = local_scope && _ss.converts;

        ////////////////////////////////////
        mut arg0 = TODO_FIX_convert_args[0];

        mut TODO_FIX_reorder: i32[];
        mut TODO_FIX_conversions: Target[][];
        ////////////////////////////////////

        fn descend(from: Type, nullary!: bool, isStruct!: bool, root?: bool)
        {
            fn foreach(t: Target)
            {
                //////////////////////////////////////////////////
                mut arg0type0 = TODO_FIX_convert_args[0].type;

                if (!nullary)
                {
                    // Decidability [A]:
                    //
                    // Enforce strict ordering of conversion functions -
                    //  they can still solve out of order, but you can't use the syntax sugar
                    //   before the `using` declaration. Makes everything way simpler.
                    let here = _current_fn.target.index;
                    if (here && t.index > here && t.modid == module.modid && t.local_of != here)
                        return;

                    if (root && retype)
                        TODO_FIX_convert_args[0] = retype;
                    else
                        TODO_FIX_convert_args[0].MUT.type = from;
                }

                defer if (!nullary)
                {
                    if (root && retype)
                        TODO_FIX_convert_args[0] = arg0;
                    else
                        TODO_FIX_convert_args[0].MUT.type = arg0type0;
                }
                //////////////////////////////////////////////////

                mut candidate: Target;
                if (nullary || (candidate = tryMatch__mutargs(
                    target: t,
                    scope: Scope, local_scope: false, id: "",
                    args: TODO_FIX_convert_args,
                    reorder: TODO_FIX_reorder,
                    conversions: TODO_FIX_conversions,
                    flags: F_CONVERSION)))
                {
                    shadow let t = nullary ? t : candidate;

                    let convert = GET(t);
                    convert.type || fail("No convert.type, perhaps a `using inline fn` without a return type annotation: `" ~ convert.qWHAT ~ "`.");

                    let convertType = convert.kind == "field"
                        ? add_refs(from: from || fail(), to: convert.type)
                        : convert.type;

                    shadow let isStruct = convertType.isStruct;

                    if (convert.status & (SS_DID_START | SS_FINALIZED) == SS_DID_START)
                    {
                        // Decidability [B]:
                        //
                        // We ignore unsolved conversions:
                        //  this means you can't use a using fn recursively,
                        //   which solves the problem of unspecified return values,
                        //    because initially the t_never assigns to everything.
                    }
                    else if (isAssignableAsArgument(convertType, /*into*/host: expect))
                    {
                        // Actual is assignable to current `from` type,
                        //  this means we've got a conversion edge that works.
                        if (match)
                        {
                            mut suffix  = "\n\t" ~ explainConversion(match) ~ "\n\tand:"
                                        ~ "\n\t" ~ explainConversion(path ~ t);

                            if (actual)
                                fail("Conversion ambiguity, multiple ways to convert `"
                                    ~ serializeType(actual) ~ "` into `"
                                    ~ serializeType(expect) ~ "`: " ~ suffix);
                            else
                                fail("`using` ambiguity, multiple ways to obtain a `"
                                    ~ serializeType(expect) ~ "` in this scope: " ~ suffix);
                        }

                        match = path ~ t;
                    }
                    else
                    {
                        let mightHaveConversion = isStruct || scope.converts;
                        if (mightHaveConversion)
                        {
                            // Forbid cyclic conversions.
                            //  Delaying the error check to speed up the general case.
                            if (path.len > 10)
                            {
                                for (mut i = path.len; i --> 0; )
                                {
                                    if (path[i] == t)
                                    {
                                        mut err = "Conversion loop:";

                                        for (shadow mut i = i; i < path.len; i++)
                                        {
                                            if (!i) err ~= "\n\t`";
                                            else    err ~= " `";

                                            shadow let convert = GET(path[i]);
                                            err ~= convert.qWHAT ~ ": " ~ serializeType(convertType) ~ "` ->";
                                        }

                                        err ~= "\n\t\t`" ~ convert.qWHAT ~ "`.";
                                        fail(err);
                                    }
                                }
                            }

                            ///////////////////////////////
                            path.push(t); defer path.pop();
                            ///////////////////////////////
                            descend(convertType, nullary: false, :isStruct);
                            ///////////////////////////////
                        }
                    }
                }
            }

            // Usings.
            if (nullary)
            {
                scope.usings.each(local_scope && _ss.usings,
                    |u| foreach(u));
            }

            // On-struct stuff.
            else
            {
                if (isStruct)
                {
                    let inner = lookupStruct(from).converts;

                    // TODO no need to for the outer isAssignableAsArgument check.
                    // TODO can we split these into incoming and outgoing converts,
                    //       so we don't have to check anything at all?
                    //
                    for (mut i = 0; i < inner.len; i++)
                        foreach(inner[i]);
                }

                // Conversions.
                if (has_converts)
                    scope.converts.each(ss_converts, fn foreach);
            }
        }

        // Go.
        descend(actual, nullary: !actual, :actual.isStruct, root: true);

        // We're done here.
        return match;
    }


    //

    fn match__mutargs(
        scope: Scope, local_scope: bool,
        id: string, ref args: SolvedNode[],
        ref reorder: i32[],
        ref conversions: Target[][],
        flags: i32, target: Target): Target
    {
        let ret = tryMatch__mutargs(:scope, :local_scope, :id, :args, :reorder, :conversions, :flags, :target);
        if (ret)
            return ret;

        let debug = tryMatch__mutargs(:scope, :local_scope, :id, :args, :reorder, :conversions, :flags, :target);
        if (debug)
            return debug;

        return NICERR_mismatch(:scope, :local_scope, :id, :args);
    }

    fn explainWhichFn(overload: Target, conversions?: Target[][])
    {
        mut result = "`" ~ overload.name;

        if (overload.args)
        {
            result ~= "(";

            for (shadow mut i = 0; i < overload.args.len; i++)
            {
                let arg = overload.args[i];
                if (i)
                    result ~= ",";

                result ~= "\n\t"
                        ~  arg.name
                        ~ (arg.flags & F_MUSTNAME ? "!" : "")
                        ~ (arg.default ? "?: " : ": ")
                        ~ (arg.type ? humanizeType(arg.type) : "$");

                let c = conversions.len > i && conversions[i];
                if (c)
                    result ~= " via " ~ explainConversion(c);
            }

            result ~= ")";
        }

        result ~= "`";
        return result;
    }

    fn NICERR_mismatch(
        scope: Scope, local_scope: bool,
        id: string, args: SolvedNode[]): never
    {
        // TODO instead of this -
        //  run tryMatch__mutargs again with an error output attached,
        //   this way we don't need the second pass for debugging,
        //    we can #bake alla jblow the if (explain) parts,
        //     and we can rid ourselves of Scope_lookup altogether.

        // We should do everything possible to be helpful here,
        //  do whatever you need, this is compile-fail path.

        mut overloads: Target[] = [];

        mut scope_iterator: i32;
        mut target: Target;
        mut shadows: bool;
        while (target = scope.items.search(:id, :scope_iterator,
            scope_skip:  local_scope && _ss.items,
            field_items: local_scope && _field_items, :shadows))
        {
            overloads.push(target);
        }

        mut min = 0x7fffffff.i32;
        mut max = 0;
        for (mut i = 0; i < overloads.len; i++)
        {
            let o = overloads[i];
            if (min > o.min) min = o.min;
            if (max < o.max) max = o.max;
        }

        fn expectedArgs(shadow targets: Target[]): string
        {
            mut result = "";

            for (mut i = 0; i < targets.len; i++)
            {
                if (result)
                    result ~= "\n\t\t";
                else if (targets.len > 1)
                    result ~= ", available overloads:\n\t\t";
                else
                    result ~= ".\nExpect: ";

                result ~= explainWhichFn(targets[i]);
            }

            return result || ".";
        }

        fn actualArgs(shadow args: SolvedNode[]): string
        {
            mut result = "\nActual: (";

            for (mut i = 0; i < args.len; i++)
            {
                let arg = args[i];
                if (i)
                    result ~= ",";

                result ~= "\n\t";
                if (arg.kind == "argid")
                    result ~= arg.value ~ ": ";

                result ~= humanizeType(arg.type);
            }

            return result ~ ").";
        }

        return overloads
                ? args.len < min ? fail("`" ~ id ~ "` expects at least " ~ min ~ " arguments, " ~ args.len ~ " provided" ~ expectedArgs(overloads))
                : args.len > max ? fail("`" ~ id ~ "` expects at most " ~ max ~ " arguments, " ~ args.len ~ " provided" ~ expectedArgs(overloads))
                : fail("`" ~ id ~ "` bad args" ~ expectedArgs(overloads) ~ actualArgs(args))
             : fail("`" ~ id ~ "` is not defined in this scope: " ~ ("`" ~ _current_fn.value ~ "`." || "root scope."));
    }


    //

    fn solveNode(node: Node, type: Type = [], deadcode_on_never?!: bool, kills?!: i32, mode?: u16): SolvedNode
    {
        HERE(node);

        let k = node.kind;

        if (k == "root")        return solveRoot(node);
        if (k == "block")       return solveBlock(node, :type, :kills);
        if (k == "argid")       return solveArgID(node, :type);

        if (k == "let")         return solveLet(node, :deadcode_on_never);
        if (k == "call")        return solveCall(node, :kills);
        if (k == "arrlit")      return solveArrlit(node, type);

        if (k == "if")          return solveIf(node, type);
        if (k == "or")          return solveOr(node, type);
        if (k == "and")         return solveAnd(node, type);

        if (k == "loop")        return solveLoop(node);
        if (k == "break")       return solveJump(node, kills);
        if (k == "return")      return solveJump(node, kills);
        if (k == "continue")    return solveJump(node, kills);

        if (k == "int")         return solveInt(node, type);
        if (k == "real")        return solveNum(node, type);
        if (k == "str")         return solveStr(node);
        if (k == "char")        return solveChar(node);

        if (k == "definit")     return solveDefinit(type, mode);

        if (k == "catch")       return solveCatch(node);
        if (k == "import")      return solveImport(node);
        if (k == "defer")       return solveDefer(node);
        if (k == "try")         return solveTryCatch(node);

        if (k == "typedef")     return solveTypedef(node);
        if (k == "typeassert")  return solveTypeAssert(node);
        if (k == "typeparam")   return solveTypeParam(node);
        if (k == "addroffn")    return solveAddrOfFn(node);

        if (k == "fn")          return solveDeclExpr(node);
        if (k == "struct")      return solveDeclExpr(node);

        // Exotics
        if (k == "forfieldsof") return solveForFieldsOf(node);

        if (k == "compiler")    return executeCompilerPragma(node);

        //
        return fail("TODO: " ~ k);
    }

    fn solveDeclExpr(node: Node): SolvedNode
    {
        return solveNodes([ node ]).only;
    }

    fn unorderedClassify(kind: string): i32
    {
        if (kind == "fn")       return 1;
        if (kind == "struct")   return 10;

        return 0;
    }

    fn unorderedPrep_A(node: Node): SolvedNode
    {
        let k = node.kind;
        if (k == "fn")          return uPrepFn_A(node);
        if (k == "struct")      return uPrepStruct(node);

        return fail("TODO: " ~ k);
    }

    fn unorderedPrep_B(node: Node, into: Target)
    {
        let k = node.kind;
        if (k == "fn")
            uPrepFn_B(into);
    }


    //

    fn propagateType(mut node: SolvedNode, slot: Type) // TODO BORROWCK danglefix
    {
        if !(node.MUT.type.try_relax(:slot))
            return;

        //
        let k = node.kind;
        mut t = node.target; // TODO BORROWCK danglefix
        if (k == "let")
        {
            let init = node.items && node.items[LET_INIT];
            if (init)
            {
                node.items[LET_INIT].propagateType(node.type);

                // TODO FIX Codegen helper, this is for the `fu_STR& src = sources[i]` case.
                //  Ideally we should do without this, otherwise we can rerun the solveLet crap.
                if (node.type.is_ref)
                    node.MUT.type.lifetime = init.type.lifetime;
            }
        }

        if (k == "call")
        {
            if (t.kind == "field")
                return node.items[0].propagateType(node.type);

            // TODO if/and/or, easy.

            // Template spec relaxer, this is nasty.
            //  Not sure what the ideal method to deal with this here would be,
            //   we're basically just going back and redoing things,
            //    and we don't have the original shit to work with.
            //
            if (t.spec_of && t.type.is_ref)
            {
                let argLets = t.arg_lets;

                mut relaxed: SolvedNode[];
                for (mut i = 0; i < node.items.len; i++)
                {
                    let orig = node.items[i];

                    // Otherwise the `==` fn never gets "imported".
                    //  I guess we should move away from the cpp "intrinsics" for these?
                    //
                    fn TODO_FIX_has(a: Region[], b: Region)
                    {
                        for (shadow mut i = 0; i < a.len; i++)
                            if (a[i] == b)
                                return true;

                        return false;
                    }

                    // We'll only attempt to relax arguments whose lifetimes appear in the return value.
                    //  There's this other thing, perhaps we only need to relax a single such argument?
                    //
                    if (t.type.lifetime.uni0n.TODO_FIX_has(Region_fromArgIndex(argLets[i].target.index)))
                    {
                        mut type = orig.type;
                        if (type.try_relax(:slot))
                        {
                            if (!relaxed)
                                relaxed = node.items.slice(0, i);

                            relaxed ~= SolvedNode("__relaxed", :type);
                            continue;
                        }
                    }

                    if (relaxed)
                        relaxed ~= orig;
                }

                if (relaxed)
                {
                    mut args_mangled: string;
                    let spec = trySpecialize(
                        t.spec_of, args: relaxed, :args_mangled, REST_START: relaxed.len);

                    if (spec && !(spec == t.spec_of))
                    {
                        let o1 = GET(spec);
                        checkAssignable(host: node.type, o1.type,
                            "Relaxed specialization does not return a subtype");

                        //////////////////////////
                        // TODO rewire callsite //
                        //////////////////////////

                        if (node.type.is_ref)
                            node.MUT.type.lifetime = Lifetime_test(
                                Lifetime_replaceArgsAtCallsite(o1, relaxed),
                                tempsOK: true);

                        node.MUT.target = spec;

                        makeNote(N_RelaxRespec);

                        for (mut i = 0; i < node.items.len; i++)
                        {
                            let orig = node.items[i];
                            let next = relaxed[i];
                            if (next.kind == "__relaxed")
                            {
                                // println("RELAX `" ~ t.name ~ "` arg #" ~ i ~ ", from `" ~ humanizeType(orig.type) ~ "` to `" ~ humanizeType(next.type) ~ "`.");
                                orig.propagateType(next.type);
                            }
                        }
                    }
                }

                // Done with templates.
                return;
            }
        }
    }


    //

    fn solveRoot(node: Node): SolvedNode
    {
        // TODO if deadcode_on_never here and if last is never,
        //  the program will crash during static init.
        //   Could we use this mechanism for static asserts?
        //
        return solved(node, t_void,
            solveNodes(node.items, t_void));
    }

    fn solveBlock(node: Node, type!: Type, fnbody_of?!: i32, mask! = HM_CanBreak, kills?!: i32, id?!: string, steal?: i32): SolvedNode
    {
        let nodes = node.kind == "block"  ? node.items : [ node ];
        shadow let id = id || node.kind == "block" && node.value;

        ////////////////////////////////
        let scope0 = Scope_snap(_scope);
        defer Scope_pop(_scope, scope0);
        ////////////////////////////////

        let helpers_idx = _helpers.len;
        _helpers       ~= Helpers( :id, :mask, :kills,
            ret_expect:     type,
            target:         fnbody_of && Target(:module.modid, fnbody_of),
            local_of:       fnbody_of ? -1 : _current_fn.target.index,
            locals_start:   fnbody_of ? +1 : GET_next_local_index());

        // TODO FIX ARGSTEAL Steal arguments from one level up, this real messy.
        if (steal)
        {
            ref old  = _helpers[helpers_idx - 1].vars;
            let vars = old.steal(old.len - steal, old.len);

            ref new  = _helpers[helpers_idx    ].vars;
            new     ~= vars;
        }

        let expr        = !fnbody_of && !type.is_void;
        mut items       = solveNodes(
            nodes,
            type_all:           t_void,
            type_last:          type,
            use_type_last:      expr,
            deadcode_on_never:  true,

            // Kills is +1 so that kills=0 means noone.
            kills: helpers_idx + 1);

        ///////////////////////////////////////////////////////////////
        // finalizeReturns (helpers_idx: i32, bodyType: Type)
        ref h = _helpers[helpers_idx];

        if (items.if_last.type.is_never)
        {
            if (!h.ret_actual)
                h.ret_actual = t_never;
        }
        else if (fnbody_of)
        {
            // TODO FIX these apply to regular blocks as well,
            //  decide if you want fns to be like blocks or the other way round,
            //   but these ifs gotta go.
            if (h.ret_actual)
                isAssignable(host: t_void, h.ret_actual) || fail(
                    "Non-void returning fn missing a final return.");

            h.ret_actual = t_void;
        }

        if (!fnbody_of && items && !h.ret_actual.is_void)
            reportReturnType(:helpers_idx, items.last.type);

        // cpy/move.
        {
            for (mut i = 0; i < h.returns.len; i++)
            {
                // TODO FIX nodeidx unstable because createCopy,
                //  ref to only is in smallvec -
                //   so createCopy invalidates the ref.
                //
                mut r = h.returns[i].items.only;
                maybeCopyOrMove(r, h.ret_actual);
                h.returns[i].MUT.items.only = r;
            }

            if (!fnbody_of && items && !h.ret_actual.is_void)
                maybeCopyOrMove(items.last, h.ret_actual);
        }
        // end finalizeReturns
        ///////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////
        if (OPTI_flatten_blocks && items.len) for (;;)
        {
            let tail = items.last;
            if (tail.kind != "block" || tail.target)
                break;

            mut unwrap = tail.items;
            items.pop();
            items ~= unwrap;
        }
        //////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////

        // Check var usage.
        mut /*TODO BORROWCK danglefix*/ vars = _helpers[helpers_idx].vars;
        for (mut i = vars.len; i --> 0; )
        {
            let index = vars[i];
            let var = GET(nested(:index));

            // TODO FIX ARGSTEAL Lift implicit arguments up -
            //  they pop up randomly during bodysolve.
            if (var.flags & F_ARG && !fnbody_of)
            {
                var.flags & F_IMPLICIT || fail(
                    "This shouldnt happen for regular arguments.");

                for (shadow mut i = helpers_idx; i --> 0; )
                {
                    ref parent = _helpers[i];
                    if (parent.isFnOrType)
                    {
                        parent.vars ~= index;
                        break;
                    }
                }

                continue;
            }

            //
            mut usage: Type;
            if (var.callsites)
            {
                usage = var.callsites[0].type;

                // TODO FIX SHALLOW LIFETIMES at jumps the lifetime is unwound, otherwise it aint, so that messes up the inter
                usage.lifetime = var.type.lifetime; //
                //////////////////////////////////////

                for (shadow mut i = 1; i < var.callsites.len; i++)
                {
                    mut other = var.callsites[i].type;

                    // TODO FIX SHALLOW LIFETIMES /////
                    other.lifetime = usage.lifetime; //
                    ///////////////////////////////////

                    usage = type_tryIntersect(usage, other) || fail(
                        "Type intersection fail at usage #" ~ i ~ " of variable `" ~ var.name
                            ~ "`: `" ~ humanizeType(usage) ~ "` <- `" ~ humanizeType(other) ~ "`.");
                }
            }
            else
            {
                var.flags & F_LAX || fail(
                    "Unused variable: `" ~ var.name ~ "`: make it `lax` if this is intentional.");

                GET_mut(nested(:index)).flags |= F_UNUSED;
            }

            ref o = GET_mut(nested(:index));

            ////////////////////////////////////////
            // TODO one of these two is redundant //
            o.type.try_relax(slot: usage); /////////
            ////////////////////////////////////////

            // Either way, try to relax.
            o.solved.type || fail("!var.solved.type, can`t propagateType");
            o.solved.propagateType(usage);
        }

        // Control flow.
        return createBlock(:items,
            type: h.ret_actual || t_void,
            label: h.mask & HM_LabelUsed && h.target);
    }

    fn createBlock(type: Type, items: SolvedNode[], label?: Target): SolvedNode
    {
        // Compact + stress test.
        if (!label && items.len)
        {
            mut ok = true;
            for (mut i = 0; i < items.len - 1; i++)
            {
                if (items[i].kind != "empty")
                {
                    ok = false;
                    break;
                }
            }

            if (ok)
                return items.last;
        }

        return SolvedNode(kind: "block", :type, :items, target: label);
    }


    //

    fn solveInt(v: string, type: Type): Type
    {
        shadow let parse = intlit::Intlit(v);
        parse.error && fail(parse.error);

        if (type)
        {
            fn want(t: Type)
                type.canon == t.canon;

            if (!parse.unsigned)
            {
                if (want(t_f32) && parse.minsize_f <= 32) return t_f32;
                if (want(t_f64) && parse.minsize_f <= 64) return t_f64;

                if (want(t_i32) && parse.minsize_i <= 32) return t_i32;
                if (want(t_i64) && parse.minsize_i <= 64) return t_i64;
                if (want(t_i16) && parse.minsize_i <= 16) return t_i16;
                if (want(t_i8 ) && parse.minsize_i <= 8 ) return t_i8 ;
            }

            if (!parse.signed)
            {
                if (want(t_u32) && parse.minsize_u <= 32) return t_u32;
                if (want(t_u64) && parse.minsize_u <= 64) return t_u64;
                if (want(t_u16) && parse.minsize_u <= 16) return t_u16;
                if (want(t_u8 ) && parse.minsize_u <= 8 ) return t_u8 ;
            }
        }

        if (parse.unsigned)
        {
            if (parse.minsize_u <= 32) return t_u32;
            if (parse.minsize_u <= 64) return t_u64;
        }
        else
        {
            if (parse.minsize_i <= 32) return t_i32;
            if (parse.minsize_i <= 64) return t_i64;
        }

        return fail("Bad int literal.");
    }

    fn solveNum(v: string, type: Type): Type
    {
        // TODO `f` suffix
        if (v) {}

        if (type.canon == t_f32.canon) return t_f32;

        return t_f64;
    }


    //

    fn solveInt(node: Node, type: Type): SolvedNode
        solved(node,
             solveInt(node.value, type));

    fn solveNum(node: Node, type: Type): SolvedNode
        solved(node,
             solveNum(node.value, type));


    //

    fn solveChar(node: Node): SolvedNode
    {
        return solved(node, t_byte);
    }

    fn solveStr(node: Node): SolvedNode
    {
        if (!node.value)
            return createDefinit(
                add_ref(t_string, Lifetime_temporary));

        return solved(node, t_string);
    }

    fn createEmpty(kind = "empty", type = t_void, target?: Target): SolvedNode
    {
        return SolvedNode(:kind, :type, :target);
    }

    fn executeCompilerPragma(node: Node)
    {
        if (node.value == "break")
            hacks::compilerBreak();
        else
            fail("Unknown compiler pragma: `" ~ node.value ~ "`.");

        return createEmpty();
    }


    //

    fn createTypeParam(value: string): Node
    {
        return Node(kind: "typeparam",
            :value, token: _here || fail());
    }


    //

    fn Autocall_splice(ref name: string): string
    {
        for (mut i = 0; i < name.len; i++)
        {
            if (name[i] == '.')
            {
                let ret = name.slice(i + 1);
                name.shrink(i);
                return ret;
            }
        }

        fail("Autocall: no `.` in id `" ~ name ~ "`.");
    }

    fn uPrepFn_A(node: Node): SolvedNode
    {
        let id          = node.value;
        let local_of    = _current_fn.target.index;
        let status      = SS_LAZY; // Actual template fns are eager.

        let target      = Scope_create(_scope,
            kind: "fn", name: "__prep__",
            :node.flags, :local_of, :status);

        ref ext         = target.EXT_mut;
        ext.template    = createTemplate(node);
        ext.min         = 0x7fffffff.i32;
        ext.max         = 0;

        Scope_set(_scope, :target, :id, shadows: !!(node.flags & F_SHADOW));

        // Experimental conversion functions.
        if (node.flags & F_CONVERSION)
            _scope.converts.push(target);

        return createFnDef(:target, type: addroffn::X_addrofTarget(target));
    }

    fn uPrepFn_B(target: Target)
    {
        ref template = target.EXT_mut.template;
        if (template.scope_memo)
            template.scope_memo = Scope_snap(_scope);
    }

    fn createFnDef(type: Type, target: Target): SolvedNode
    {
        return SolvedNode(kind: "fndef", :type, :target);
    }


    //

    fn mangleArguments(args: [$T]): string
    {
        mut mangle = "";
        for (mut i = 0; i < args.len; i++)
        {
            if (i)
                mangle ~= ",";

            mangle ~= serializeType(args[i]);
        }

        return mangle;
    }

    fn mangleArguments(
        args: [SolvedNode], reorder: [i32],
        use_reorder: bool, conversions: Target[][],
        REST_START: i32, REST_TYPE: Type): string
    {
        mut mangle = "";

        let REST_END = use_reorder ? reorder.len : args.len;
        let N = REST_END.min(REST_START);
        for (mut i = 0; i < N; i++)
        {
            if (i)
                mangle ~= ",";

            let callsiteIndex = use_reorder ? reorder[i] : i;

            if (conversions.len > i && conversions[i].len)
                mangle ~= serializeType(
                    GET(conversions[i].last).type);

            else if (callsiteIndex >= 0 && callsiteIndex <= args.len)
                mangle ~= serializeType(
                    args[callsiteIndex].type);
        }

        if (REST_START < REST_END)
        {
            if (REST_START)
                mangle ~= ",";

            mangle ~= serializeType(REST_TYPE);
        }

        return mangle;
    }


    //

    fn is_SPECFAIL(target: Target): bool
    {
        return target.modid == 2147483647;
    }

    fn trySpecialize(
        overloadIdx: Target, args: SolvedNode[], ref args_mangled: string,
        REST_START: i32, REST_TYPE?: Type,
        reorder?: [i32], use_reorder?: bool, conversions?: Target[][])
            : Target
    {
        args_mangled ||= mangleArguments(
                :args, :reorder, :use_reorder, :conversions,
                :REST_START, :REST_TYPE);

        // TODO memoize the whole mangle.
        //  Or use a hash here, perhaps nest them per template or smth.
        //   Also this prefix is nasty, unless we can reuse between modules.
        //
        // TODO perhaps reuse between modules?
        //  Would make the prefix stuff more meaningful.
        //
        let mangle = overloadIdx.modid ~ "#" ~ overloadIdx.index ~ " " ~ args_mangled;
        let spec = _specs[mangle] || doTrySpecialize(
            :overloadIdx, args_in:args, :mangle,
            :reorder, :use_reorder, :conversions,
            :REST_START, :REST_TYPE);

        return !spec.is_SPECFAIL && spec;
    }


    //

    fn ScopeSkip_push(ref scope_skip: ScopeSkip[], start: i32, end: i32)
    {
        start <= end || fail("ScopeSkip_push: bad args.");
        if (end == start)
            return;

        let last = scope_skip.if_last;
        last.end <= start || fail("ScopeSkip_push: last.end > start.");

        // Opti - don't grow if possible, so we stay in small storage.
        if (scope_skip && last.end == start)
            scope_skip.last.end = end;
        else
            scope_skip ~= ScopeSkip(:start, :end);
    }

    fn ScopeSkip_setup(template: Template, scope0: ScopeMemo, isInline!: bool)
    {
        if (_root_scope)
        {
            let start = template.scope_memo || _root_scope;
            _ss = template.scope_skip;

            ScopeSkip_push(_ss.items,    start: start.items_len,    end: scope0.items_len);

            // The declash thing is for ease of codegen - not technically needed by the solver.
            //  This is what postfixes variable names with numbers to disambiguate them,
            //   and not pushing here means we'll declash against things we don't see in items above.
            if (!isInline)
                ScopeSkip_push(_ss.declash,  start: start.items_len,    end: scope0.items_len);

            ScopeSkip_push(_ss.imports,  start: start.imports_len,  end: scope0.imports_len);
            ScopeSkip_push(_ss.usings,   start: start.usings_len,   end: scope0.usings_len);
            ScopeSkip_push(_ss.converts, start: start.converts_len, end: scope0.converts_len);

            ScopeSkip_push(_ss.helpers,  start: start.helpers_len,  end: scope0.helpers_len);
        }

        // We'll need the original imports in scope
        //  in order to solve type params & pattern match below.
        for (mut i = 0; i < template.imports.len; i++)
            Scope_import(template.imports[i], private: i == 0);
    }


    //

    fn doTrySpecialize(
        into?: Target,
        overloadIdx?: Target, args_in?: SolvedNode[],
        mut mangle?: string, reorder?: [i32], use_reorder?: bool, conversions?: Target[][],
        REST_START?: i32, REST_TYPE?: Type)
            : Target
    {
        mut args: Type[];
        if (use_reorder)
        {
            for (mut i = 0; i < reorder.len; i++)
            {
                let callsiteIndex = reorder[i];
                args.push(
                    callsiteIndex >= 0 && callsiteIndex < args_in.len
                        && args_in[callsiteIndex].type);
            }
        }
        else
        {
            for (mut i = 0; i < args_in.len; i++)
                args.push(args_in[i].type);
        }

        for (mut i = 0; i < conversions.len; i++)
        {
            let c = conversions[i];
            if (c)
                args[i] = GET(c.last).type;
        }

        if (REST_TYPE)
            args[REST_START] = REST_TYPE;

        //
        mut mangle00 = mangle; //REF2MUTREF
        let SPECFAIL = Target(modid: 2147483647, index: 0);

        //
        let original = overloadIdx || into || fail();
        mut template = original.template;

        mut parent_idx = original.local_of;
        {
            // If we're taking a closure as an argument,
            //  we're becoming a closure ourselves of whatever that closure is closing over -
            //   so that e.g. lifetime reasoning can have an easier time etc.
            //
            // TODO all of these must form up a common shadowing group -
            //  So nothing by the same name should come in from outer scope,
            //   and yet none of these things shadow each other.
            //
            for (mut i = 0; i < args.len; i++)
            {
                let arg_t = args[i];
                if (addroffn::type_isAddrOfFn(arg_t))
                {
                    addroffn::unpackAddrOfFn(arg_t.canon, |target|
                    {
                        if (target.modid < 0 || target.modid == module.modid)
                        {
                            let overload = GET(target);
                            if (overload.flags & F_SPREAD_INLINE)
                                template.node.flags |= F_INLINE;

                            let local_of = overload.local_of;
                            if (parent_idx < local_of)
                                parent_idx = local_of;
                        }
                    });
                }
            }
        }

        //
        let isInline = !!(template.node.flags & F_INLINE);

        fn setSpec(shadow mangle: string, target: Target, nx?: bool)
        {
            isInline && fail("inline.setSpec");

            ref t = _specs[mangle] ||= Target;

            fn id(shadow target)
                target.is_SPECFAIL  ? "SPEC_FAIL"
                                    : "`" ~ GET(target).name ~ "`";

            !t && nx || t.is_SPECFAIL && !nx || fail(
                "About to screw up royally, replacing spec: "
                    ~ t.index ~ " with " ~ target.index
                        ~ ", mangle: " ~ mangle ~ ", that's: "
                        ~ t.id ~ " becoming " ~ target.id);

            t = target;
        }

        if (!into && !isInline)
            setSpec(mangle, SPECFAIL, nx: true);

        // Scopes & scope skips.
        mut target: Target;

        {
            let scope0 = Scope_snap(_scope);
            mut ss0 = _ss; //REF2MUTREF
            let helpers0vars = _helpers.last.vars.len;

            defer {
                Scope_pop(_scope, scope0);
                _ss = ss0;
                if (_helpers)
                    _helpers.last.vars.shrink(helpers0vars);
            }

            ScopeSkip_setup(:template, :scope0, :isInline);

            //
            let items = template.node.items;
            ref n_fn = template.node;
            n_fn.kind == "fn" || fail("n_fn not a `fn`.");

            // println("  doTrySpec " ~ n_fn.value);

            //
            mut ok = true;
            mut remangle = false;
            mut typeParams: TypeParams;

            fn isNativeBody(n_body: Node)
                n_body.kind == "call" && n_body.value == "__native";

            if (!into)
            {
                let kind    = template.node.kind;
                let numArgs = kind == "fn" ? items.len + FN_ARGS_BACK
                            : fail("TODO numArgs for template:" ~ kind);

                /////////////////
                // Literal fixup.
                mut retypeIndices: i32[];

                // First off, solve type params.
                for (   mut pass_retype  = 0;
                            pass_retype == 0 || pass_retype == 1 && retypeIndices;
                            pass_retype++)
                {
                //        /LITFIX
                /////////////////

                    for (mut i = 0; i < numArgs; i++)
                    {
                        if (pass_retype)
                        {
                            // TODO fix, .try_shift instead.
                            if (!retypeIndices.has(i))
                                continue;
                        }

                        mut inType  = args.len > i && args[i];
                        let inValue = reorder
                            ? reorder.len > i && reorder[i] >= 0 && args_in[reorder[i]]
                            : args_in.len > i && args_in[i];

                        let argNode = items[i] || fail();
                        let annot   = argNode.items[LET_TYPE];

                        // We can lose mutrefs here if arguments are defaulted.
                        if (CANNOT_definit_mutrefs)
                            if (inType.is_mutref && argNode.items[LET_INIT])
                                inType = clear_mutref(inType);

                        /////////////////
                        // Literal fixup.
                        if (couldRetype(inValue))
                        {
                            let paramType =
                                annot.kind == "typeparam"
                                    ? (typeParams[annot.value] ||= TypeParam).matched
                                    : annot.kind == "call" && !annot.items
                                        && Scope_lookupType(annot);

                            // Ignore literals if possible.
                            if (paramType)
                            {
                                let retype = tryRetyping(inValue, paramType);
                                if (retype && retype.canon != inType.canon)
                                {
                                    inType   = args[i] = retype;
                                    remangle = true;
                                }
                            }

                            // Defer for second pass.
                            else if (!pass_retype)
                            {
                                retypeIndices.push(i);
                                continue;
                            }
                        }
                        //        /LITFIX
                        /////////////////

                        argNode.kind == "let"  || fail();

                        //
                        if (inType)
                        {
                            // Enable conversions on fully typed arguments.
                            let exactType = original.args[i].type;
                            if (exactType)
                            {
                                args[i] = exactType;
                                continue;
                            }

                            //
                            let argName = argNode.value || fail();

                            // Same pattern - grabs a mutref.
                            ref argName_typeParam =
                                typeParams[argName] ||= TypeParam;

                            // Values vs refs.
                            if (argNode.flags & F_MUT)
                                inType = clear_refs(inType);
                            else
                                inType = add_ref(inType, Lifetime_temporary);

                            //
                            (argName_typeParam && fail(
                                "Type param name collision with argument: `" ~ argName ~ "`."))
                                    .matched = inType;

                            // Type check.
                            if (annot)
                            {
                                let argOk = inType && trySolveTypeParams(
                                    annot, inType, typeParams);

                                ok = ok && argOk;
                                if (!ok && !remangle)
                                    break;
                            }
                        }
                    }
                }

                /////////////////
                // Literal fixup.
                if (remangle && !isInline)
                {
                    // TODO FIX
                    let start = mangle.find(' ') + 1 || fail();
                    mangle = mangle.slice(0, start) ~ mangleArguments(args);

                    if (mangle00 != mangle)
                    {
                        let preexisting = _specs[mangle] || Target();
                        if (preexisting)
                        {
                            setSpec(mangle00, preexisting);
                            return preexisting;
                        }

                        if (!into)
                            setSpec(mangle, SPECFAIL, nx: true);
                    }
                }
                //        /LITFIX
                /////////////////

                // Match pattern arm here.
                if (!ok)
                    return SPECFAIL;

                // Pattern matching.
                let body = items[items.len + FN_BODY_BACK] || fail();
                if (body.kind == "pattern")
                {
                    let undo = typeParams;
                    let branches = body.items;

                    mut did_match = false;
                    for (mut i = 0; i < branches.len; i++)
                    {
                        // Fails cond if any?
                        let cond = branches[i].items[0];
                        if (cond && !evalTypePattern(cond, typeParams))
                        {
                            typeParams = undo;
                            continue;
                        }

                        // Pass.
                        let cons = branches[i].items;
                        ref sig = n_fn.items;
                        {
                            let n_ret = cons[cons.len + FN_RET_BACK];
                            if (n_ret) sig[sig.len + FN_RET_BACK] = n_ret;

                            let n_body = cons[cons.len + FN_BODY_BACK];
                            sig[sig.len + FN_BODY_BACK] = n_body || fail("doTrySpec: no case/body.");
                        }

                        did_match = true;
                        break;
                    }

                    // All branches mismatch?
                    //  Can't return, faking RAII here.
                    if (!did_match)
                        return SPECFAIL;
                }

                // Native relaxer.
                //  We can't reason about the code of "native" fns,
                //   so we relax based on type assertions here.
                //
                let n_body = n_fn.items[n_fn.items.len + FN_BODY_BACK];
                if (n_body.isNativeBody)
                {
                    for (shadow mut i = 0; i < numArgs; i++)
                    {
                        let argNode = items[i] || fail();
                        let id = argNode.value;
                        if (typeParams.has(id))
                        {
                            ref tp = typeParams[id];
                            tp.matched = tp.consumed;
                        }
                    }
                }
            }

            // Populate scope.
            mut mangle0 = mangle; //REF2MUTREF

            // Prep reject.
            target = into || Scope_create(_scope, local_of: parent_idx,
                status: SS_DID_START | SS_LAZY);

            let extra_items = into
                ? original.extra_items
                : (target.EXT_mut.extra_items = typeParams.intoScopeItems());

            mut current_fn_or_type0     = _current_fn_or_type;
            defer _current_fn_or_type   = current_fn_or_type0;
            _current_fn_or_type         = target;

            ////////////////////////////////////
            // Reset anon counters /////////////
            if (!_current_fn.target) _anons = 0;
            ////////////////////////////////////

            // Go!
            {
                ref o = EXT_mut(target);
                o.locals.clear();
                o.nodes.clear();
            }

            mut out = CurrentFn(
                solved(n_fn,
                    :target, type: addroffn::X_addrofTarget(target)));

            mut root_scope0 = _root_scope; //REF2MUTREF
            if (!root_scope0)
                _root_scope = scope0;

            SWAP(_current_fn, out);

            defer {
                SWAP(_current_fn, out);
                _root_scope = root_scope0;
            }

            /////////////////////////////////
            fn outItems() _current_fn.MUT.items;

            let inItems = n_fn.items;
            outItems.resize(inItems.len);

            // Arg decls.
            _scope.items ~= extra_items;

            let isFirst     = !GET(target).solved;
            let isTemplate  = template.node.flags & F_TEMPLATE;
            let isSpec      = isTemplate && (!into || !isFirst); // TODO FIX this looks really flaky
            let isUnspec    = isTemplate && !isSpec;
            let isPure      = template.node.flags & F_PURE;

            for (mut i = 0; i < inItems.len + FN_ARGS_BACK; i++)
            {
                fn tryGetArgSpecType(id: string): Type
                {
                    mut param = "$" ~ id;
                    for (shadow mut i = 0; i < extra_items.len; i++)
                    {
                        let m = extra_items[i];
                        if (m.id == param)
                        {
                            let o = GET(m.target);
                            o.kind == "type"/* && o.max == 0*/ || fail(
                                "tryGetArgSpecType: Not a typeparam: `"
                                    ~ o.kind ~ ":" ~ param ~ "(" ~ m.target.max ~ ")`.");

                            return o.type;
                        }
                    }

                    return Type;
                }

                let n_arg       = inItems[i];

                // TODO FIX Template prep: mock up free parameters.
                //          Super unclean but at least its contained here.
                if (isUnspec && (n_arg.flags & F_TEMPLATE || !n_arg.items[LET_TYPE]))
                {
                    outItems[i] = SolvedNode(
                        kind: "let", flags: n_arg.flags, value: n_arg.value,
                        type: Type(), items: [ SolvedNode, n_arg.items[LET_INIT] && TODO_FIX_template_defarg ]);

                    continue;
                }

                let specType    = isSpec && tryGetArgSpecType(n_arg.value);
                let arg         = solveLet(n_arg, :specType);
                outItems[i]     = arg;

                if (!isUnspec && arg.target)
                    Reference_trackArgument(_current_fn.flow, arg.target.index, position: i);
            }

            /////////////////////////////////////////////////////
            let n_ret   = !isUnspec && inItems[inItems.len + FN_RET_BACK];
            let n_body  = inItems[inItems.len + FN_BODY_BACK];

            // Builtin?
            n_body || fail("solveFn: no body.");

            let isNative = n_body.isNativeBody;
            if (!isNative && !isUnspec)
                n_body.kind == "block" || fail("solveFn: Body not a block: `" ~ n_body.kind ~ "`.");

            // Return type annot.
            let ret_expect = n_ret && evalTypeAnnot(n_ret).type;

            // Seed return value.
            mut ret_seed = n_ret    ? ret_expect || fail("falsy ret_expect: " ~ n_fn.value)
                                    : t_never;

            if (ret_seed.lifetime)
            {
                ret_seed.lifetime = isNative
                    ? Lifetime_fromNative(inItems, _current_fn.items[0, _current_fn.items.len + FN_ARGS_BACK], ret_seed)
                    : Lifetime_static(); // we'll overpromise during prep
            }
            else if (ret_seed.is_ref)
            {
                fail("fn.ret_actual is a ref without a lifetime.");
            }

            // Used twice, once to enable recursion before body, and once when done.
            fn updateScope(shadow out: CurrentFn, retval: Type)
            {
                shadow let items = out.items;

                let N = items.len + FN_ARGS_BACK;
                mut min = 0;
                mut max = 0;

                shadow mut args: Argument[];
                for (mut i = 0; i < N; i++)
                {
                    let argNode = items[i];
                    argNode.kind == "let" || fail();

                    mut name        = argNode.value;
                    let autocall    = argNode.flags & F_COMPOUND_ID && Autocall_splice(name);
                    let isImplicit  = !!(argNode.flags & F_IMPLICIT);

                    // ARGUMENTS AT RISK ////////////////////////
                    let risk_free   = !isNative && !isUnspec
                        && out.flow.ArgsAtRisk_listRiskFree(i);

                    let argTarget   = argNode.target;
                    let written_via = argNode.type.is_mutref
                        && (isNative
                            ? target // Self: assume all mutref taking natives do actually write.
                            : out.events.args_written_via.unless_oob(argTarget.index));
                    /////////////////////////////////////////////

                    // Validate `pure` asserts.
                    if (isPure && written_via)
                        fail("Not pure: arg " ~ name.human.qID ~ " is written via "
                            ~ written_via.qWHAT);

                    //
                    let arg = Argument(
                        :name,
                        :autocall,
                        :argNode.flags,
                        :argNode.type,
                        default: !isImplicit && argNode.items[LET_INIT],
                        :risk_free,
                        :written_via);

                    arg.type || isUnspec || fail("Unexpected untyped argument: `" ~ name ~ "`.");
                    args.push(arg);

                    if (!isImplicit)
                    {
                        if (max != 0x7fffffff.i32)
                            max++;
                        if (!arg.default)
                            min++;
                    }

                    if (arg.flags & F_REST_ARG)
                        max = 0x7fffffff.i32;
                }

                // Unconditionally replacing the stuff.
                ref overload    = GET_mut(target);
                ref ext         = target.EXT_mut;

                mut change      = false;

                if (overload.callsites)
                {
                    change = args.len != ext.args.len
                        || !(overload.type == retval);

                    if (!change) for (mut i = 0; i < args.len; i++)
                    {
                        let a = args[i];
                        let b = ext.args[i];
                        if !(a.name == b.name && a.type == b.type)
                        {
                            change = true;
                            break;
                        }
                    }
                }

                ext.min     = min;
                ext.max     = max;
                ext.args    = args;

                overload.type   = retval;
                if (isInline)
                    return;

                retval || fail("FnDecl_update: no return type.");
                if (retval.is_ref)
                    Lifetime_test(retval.lifetime);

                overload.flags  = out.flags;
                overload.solved = !isUnspec && out.out;

                if (change)
                    overload.status |= SS_UPDATED;
            }

            // Enable recursion.
            if (isFirst)
            {
                // Previously initScope:
                {
                    // TODO FIX currently we only hash template names.
                    mut name = n_fn.value || fail("TODO anonymous fns");
                    if (isSpec && !isNative && !isInline)
                    {
                        let sig = mangleArguments(outItems[0, outItems.len + FN_ARGS_BACK]);
                        if (sig)
                        {
                            let hash = tea::hash62(sig, chars: 4) || fail();
                            name ~= "_" ~ hash;
                        }
                    }

                    fn HACK_nativeNameParts() // __native(id) or __native("include", id)
                    {
                        shadow mut name = "";
                        if (isNative && n_body.items)
                            for (mut i = 0; i < n_body.items.len; i++)
                                name ~= "\n" ~ n_body.items[i].value;

                        return name;
                    }

                    ref overload        = GET_mut(target);
                    overload.name       = HACK_nativeNameParts || name || fail();

                    overload.kind       = isUnspec      ? "template"
                                        : isNative      ? "__native"
                                        : isInline      ? "inline"
                                                        : "fn";

                    ref ext             = target.EXT_mut;
                    ext.template        = template;
                    ext.spec_of         = overloadIdx;
                }

                updateScope(_current_fn, retval: isInline ? ret_expect : ret_seed);

                // setSpecs & co.
                if (!into && !isInline)
                {
                    let start   = mangle0.find(' ') + 1 || fail();
                    mangle      = mangle0.slice(0, start)
                                ~ mangleArguments(target.args);

                    mut preexisting: Target;
                    let nx0 = mangle0 != mangle;
                    if (nx0)
                    {
                        preexisting = _specs[mangle] || Target();
                        setSpec(mangle0, preexisting || target);
                    }

                    let nx00 = mangle00 != mangle;
                    if (nx00 && mangle00 != mangle0)
                        setSpec(mangle00, preexisting || target);

                    if (preexisting)
                        return preexisting;

                    setSpec(mangle, target, nx: nx0 && nx00);
                }
            }

            mut didSetBody = false;

            // Regular fns again.
            if (!isInline && !isUnspec)
            {
                // The usual.
                mut retval = ret_seed;
                if (!isNative)
                {
                    let s_body = solveBlock(
                        n_body, type: ret_expect,
                        fnbody_of: target.index,
                        id: n_fn.value,
                        mask: i16(HM_Function | HM_CanReturn | HM_LabelUsed | (n_fn.flags & F_LAMBDA && HM_Lambda)),
                        steal: _helpers.last.vars.len - helpers0vars);

                    retval = s_body.type;

                    // MUT DURING SOLVE,
                    //  implicit args splice in
                    outItems[outItems.len + FN_BODY_BACK] = s_body || fail("falsy body");
                    didSetBody = true;

                    // ARGUMENTS AT RISK ///////////////////////////////////////////////////
                    _current_fn.flow.ArgsAtRisk_shake();
                    _current_fn.flow.ArgsWritten_shake(_current_fn.events.args_written_via);
                    ////////////////////////////////////////////////////////////////////////
                }

                // TODO THIS APPEARS TO BE USELESS, sighash not computed in update.
                //  Sighashes include return value.
                outItems[outItems.len + FN_RET_BACK] =
                    createEmpty(type: retval);

                //
                updateScope(_current_fn, :retval);
            }

            if (!didSetBody)
            {
                let o = GET(target);
                o.kind != "fn" || fail(
                    "did not set body on " ~ o.qWHAT ~ ": " ~ humanizeType(o.type));
            }
        }

        // Go!
        lazySolveEnd(target);
        return target;
    }


    //

    fn intoScopeItems(typeParams: TypeParams): ScopeItem[]
    {
        mut res: ScopeItem[];

        typeParams.pairs(|id, tp|
        {
            let name = "$" ~ id;

            fn checkStruct(shadow type: Type)
            {
                // TODO FIX The thing is the type param might not be the naked value type,
                //  but e.g. a reference or something. It's muddy what we have right now.
                //   Consider getting rid of the $argname params, should obsolete this.
                //
                // See solveTypedef below.
                //
                let t = lookupStruct(type).target;
                return GET(t).type == type && t;
            }

            let type = tp.matched;
            let target = type.isStruct
                && checkStruct(type)
                || Scope_create(_scope,
                    kind: "type",
                    name: "$" ~ id, :type, flags: 0);

            Scope_set(res, name, :target, shadows: false);
        });

        return res;
    }


    //

    fn uPrepStruct(node: Node): SolvedNode
    {
        return __solveStruct(solve: false, :node);
    }

    fn __solveStruct(solve!: bool, /*TODO BORROWCK danglefix*/mut node: Node, into?!: Target): SolvedNode
    {
        mut out     = solved(node, target: into, type: into && GET(into).type);

        let origId  = node.value;
        let name    = origId || _current_fn.target && GET(_current_fn.target).name || "Anon";

        if (!out.target)
        {
            shadow ref out = out.MUT;

            out.type && assert();
            out.type = initStruct(:name, :node.flags, :SELF_TEST);
            out.target = Scope_Typedef(_scope, id: origId, :name,
                :out.type, :node.flags,
                status: SS_LAZY);

            out.target.EXT_mut.template = createTemplate(:node);
        }

        if (!solve)
            return out;

        GET_mut(out.target).status |= SS_DID_START;

        ///////////////////////////////////////////////
        let    helpers0 = _helpers.len;
        defer _helpers.shrink(helpers0);

        _helpers ~= Helpers(mask: HM_Struct, target: out.target || fail(
            "solveStruct: no out.target: `" ~ origId ~ "`."));

        mut current_fn_or_type0     = _current_fn_or_type;
        defer _current_fn_or_type   = current_fn_or_type0;
        _current_fn_or_type         = out.target;
        ///////////////////////////////////////////////

        // Struct fields only.
        mut structConverts: Target[];
        mut structImports:  i32[];
        mut flat_cnt:       i32;

        // Struct members, pass 0.
        fn solveMember(shadow node: Node)
        {
            node.kind == "let" || fail("solveStructMembers_1: " ~ node.kind);

            node.items[LET_INIT] &&
            node.items[LET_INIT].kind != "definit" &&
                fail("All structs must be zerofilled by default."
                    ~ " Please remove the initializer of struct member `" ~ node.value ~ "`.");

            // Can't continue/return back/fwd compat.
            return solveLetLike_dontTouchScope(node);
        }

        let members = node.items.map(fn solveMember);

        // (Re)poplate fields.
        {
            ref innerScope = lookupStruct_mut(out.type.canon).items;
            if (!innerScope && members)
            {
                // Dereferencing a struct does not require it
                //  to have any particular qualities.
                let args = [ Argument(name: "this",
                    type: despeculateStruct(out.type)) ];

                for (mut i = 0; i < members.len; i++)
                {
                    let id = node.items[i].value;
                    let target = Scope_create(
                        _scope, "field", name: id || fail(),
                        flags: F_PUB);

                    ref ext     = EXT_mut(target);
                    ext.args    = args;
                    ext.min     = 1;
                    ext.max     = 1;

                    Scope_set(innerScope, :id, :target, shadows: false);
                }

                _field_items ~= innerScope;
            }

            // Update field types.
            innerScope.len == members.len || fail(
                "solveStructMembers_3: field lens mismatch: " ~ innerScope.len ~ " vs " ~ members.len ~ "/" ~ node.items.len ~ ": `struct " ~ name ~ "`.");

            for (mut i = 0; i < innerScope.len; i++)
            {
                let item = innerScope[i];
                shadow let member = members[i];
                item.id == member.value || fail("solveStructMembers_4: field id mismatch.");

                ref field = GET_mut(item.target);
                field.type = member.type;

                flat_cnt += tryLookupStruct(member.type).flat_cnt || 1;

                if (member.flags & F_USING)
                {
                    structConverts.push(item.target);

                    if (field.type.modid != module.modid)
                        structImports.set::add(field.type.modid);

                    structImports.set::add(field.type.lookupTypeImports());
                }
            }
        }

        // Add a default constructor.
        {
            shadow ref out = out.MUT;

            mut CHANGE = false;

            mut commonQuals = -1;
            for (mut i = 0; i < members.len; i++)
                commonQuals &= members[i].type.quals;

            let quals0 = out.type.quals;
            let quals1 = out.type.quals &= commonQuals;
            CHANGE   ||= quals0 != quals1;

            //
            {
                ref s       = lookupStruct_mut(out.type.canon);
                s.target    = out.target || fail("No struct/out.target.");
                s.converts  = structConverts;
                s.imports   = structImports;

                let flat0   = s.flat_cnt;
                s.flat_cnt  = flat_cnt;
                CHANGE    ||= flat0 != flat_cnt;

                GET(s.target).status & SS_DID_START || fail(
                    "Setting stuff but missing SS_DID_START.");
            }

            //
            let max = members.len;
            mut min = 0;
            mut args: Argument[];

            for (mut i = 0; i < members.len; i++)
            {
                let member = members[i];

                let arg = Argument(
                    name:       member.value || fail(),
                    type:       member.type  || fail(),
                    default:    member.items[LET_INIT],
                    flags:      member.flags & F_MUSTNAME);

                if (!arg.default)
                    min++;

                args.push(arg);
            }

            if (max && !min) min++;

            ref overload    = GET_mut(out.target);
            ref ext         = EXT_mut(out.target);

            ext.min         = min;
            ext.max         = max;
            ext.args        = args;
            overload.type   = out.type;

            if (CHANGE && overload.callsites)
                overload.status |= SS_UPDATED;
        }

        //
        lazySolveEnd(out.target);

        // We're done here, return nothing.
        return SolvedNode();
    }


    //

    fn lazySolveStart(target: Target, overload: Overload): bool
    {
        // Isn't lazy-started?
        if (overload.status & (SS_DID_START | SS_LAZY) != SS_LAZY)
            return false;

        {
            ref o = GET_mut(target);
            o.status & (SS_FINALIZED | SS_DID_START | SS_DIRTY) && fail("SS_DID_START: non-zero solver status: " ~ overload.status);
            o.status |= SS_DID_START;

            if (o.kind == "fn")
                doTrySpecialize(into: target);
            else if (o.kind == "type")
                __solveStruct(solve: true, :target.template.node, into: target);
            else
                fail("lazySolveStart: kind is `" ~ o.kind ~ "`.");
        }

        // Expect changes.
        return true;
    }

    fn lazySolveEnd(t: Target): void
    {
        ref o = GET_mut(t);
        mut reopen: i32[];

        let parent = o.local_of;
        if (o.status & SS_UPDATED)
        {
            o.status &= ~SS_UPDATED;

            mut dedupe: Target;

            NEXT_USER:
            for (mut i = 0; i < o.callsites.len; i++)
            {
                let callsite = o.callsites[i].nodeown;
                if (callsite == dedupe)
                    continue;

                dedupe = callsite;

                //
                mut index = callsite.index;

                GO_UP:
                for (;;)
                {
                    shadow ref o = GET_mut(
                        Target(:module.modid, :index));

                    // If not started or dirty, means someone else will take care of us here.
                    if (o.status & (SS_DID_START | SS_DIRTY) != SS_DID_START)
                        continue :NEXT_USER;

                    // If still solving somewhere up our callstack, just flag as dirty.
                    if !(o.status & SS_FINALIZED)
                    {
                        o.status |= SS_DIRTY;
                        continue :NEXT_USER;
                    }

                    // Climb up until sibling (or self) -
                    //  this is A->B->C being invalidated by A->D:
                    //   can't just reopen C here, because we don't have B in scope,
                    //    so we have to invalidate B.
                    let up = o.local_of;
                    if (up != parent) // !sibling
                    {
                        up > parent || fail("lazySolveEnd: about to climb up the wrong tree.");
                        index = up;
                        continue :GO_UP;
                    }

                    // Finally, a finalized, non-local of self,
                    //  gotta reopen & resolve now.
                    makeNote(o.kind == "type" ? N_TypeReopen : N_FnReopen);

                    o.status &= ~(SS_DID_START | SS_DIRTY | SS_FINALIZED);
                    reopen ~= index;

                    continue :NEXT_USER;
                }
            }
        }

        //
        if !(o.status & SS_DIRTY)
        {
            o.status |= SS_FINALIZED;
        }
        else
        {
            o.status & SS_FINALIZED && fail("Stray SS_FINALIZED.");
            o.status &= ~(SS_DID_START | SS_DIRTY);
            makeNote(o.kind == "type" ? N_TypeResolve : N_FnResolve);
        }

        //
        for (mut i = 0; i < reopen.len; i++)
        {
            shadow let t = Target(:module.modid, index: reopen[i]);
            lazySolveStart(t, GET(t));
        }
    }

    fn detectRecursion(target: Target, overload: Overload): void
    {
        if (overload.status & (SS_FINALIZED | SS_LAZY) != SS_LAZY)
            return;

        // TODO FIX Incorrect: fns can use other fns as type annots.
        //  We need to somehow track who depends on others for type info,
        //   and who depends on others for actual compute.
        let note    = overload.kind == "type" ? N_TypeRecursion : N_FnRecursion;
        let status  = overload.kind == "type" ? SS_TYPE_RECUR   : SS_FN_RECUR;

        for (mut i = _helpers.len; i --> 0; )
        {
            let h = _helpers[i];
            if !(h.isFnOrType)
                continue;

            h.mask & HM_Lambda && fail("Recursive lambda, what happened here?");
            GET_mut(h.target).status |= status;
            makeNote(note);

            if (h.target == target)
                return;
        }

        fail("detectRecursion: no _helpers entry for `" ~ overload.name ~ " (" ~ overload.status ~ ")`.");
    }


    //////////////////////////////////////////////////////////

    fn Lifetime_climb(lifetime, visit, locals_start?!: i32)
    {
        for (mut i = lifetime.uni0n.len; i --> 0; )
        {
            let r = lifetime.uni0n[i];
            if (r.index < locals_start)
                break;

            if (r.Region_isTemp)
                continue;

            ref o = GET_mut(nested(r.Region_toLocalIndex()));
            visit(:o, i?: i, lifetime?: lifetime);
        }
    }

    fn Lifetime_climbType(o: Overload)
    {
        if (o.kind == "var")
            return o.solved.items[LET_INIT].type;

        o.kind == "lifetime" || fail(
            "Lifetime_climbType: not a `var` nor `lifetime`: " ~ o.qWHAT);

        return o.type;
    }

    fn Lifetime_unwind(mut lifetime: Lifetime, locals_start?!: i32): Lifetime
    {
        Lifetime_climb(:lifetime, :locals_start, visit: |o, i, shadow lifetime|
        {
            let init = o.Lifetime_climbType;
            if !(init.is_ref)
                continue;

            init.lifetime.uni0n.len || fail();
            lifetime.uni0n.splice(i, 1);

            let N0      = lifetime.uni0n.len;
            lifetime    = Lifetime_union(lifetime, init.lifetime);
            let N1      = lifetime.uni0n.len;

            i += N1 - N0;
        });

        return lifetime;
    }

    fn Lifetime_F_MOVED_FROM(lifetime: Lifetime): Lifetime
    {
        Lifetime_climb(:lifetime, visit: |o|
        {
            if (o.flags & F_MOVED_FROM)
                continue;

            o.flags |= F_MOVED_FROM;

            // println("MOVED FROM " ~ o.name ~ ": " ~ o.type.humanizeType);

            let init = o.Lifetime_climbType;
            if (init.is_ref)
                Lifetime_F_MOVED_FROM(init.lifetime);
        });
    }

    //////////////////////////////////////////////////////////

    // Note - as soon as we re-assign the return value,
    //  we want to re-iterate all the return statements,
    //   because that can change our copy/move decision.

    fn superType(reason: string, a: Type, b: Type, id?: string)
    {
        return type_trySuper(a, b) || fail(
            (id && "`" ~ id.human ~ "`: ")
            ~ reason
            ~ "No common supertype: `"
            ~ serializeType(a) ~ "` | `" ~ serializeType(b) ~ "`.");
    }

    fn intersectionType(reason: string, a: Type, b: Type, id?: string)
    {
        return type_tryIntersect(a, b) || fail(
            (id && "`" ~ id.human ~ "`: ")
            ~ reason
            ~ "Cannot intersect a common subtype: `"
            ~ serializeType(a) ~ "` & `" ~ serializeType(b) ~ "`.");
    }

    fn Lifetime_vs(lifetime: Lifetime, locals_start!: i32)
    {
        return lifetime.uni0n.if_first.Region_toLocalIndex >= locals_start  ? +1
             : lifetime.uni0n.if_last .Region_toLocalIndex <  locals_start  ? -1
                                                                            :  0;
    }

    fn solveJump(node: Node, kills: i32): SolvedNode
    {
        mut helpers_idx = node.kind == "return"
            ? Scope_lookupReturn(node.value, lambdaOK: !!(node.flags & F_SINGLE_STMT))
            : Scope_lookupLabel (node.value, cont: node.kind == "continue");

        /////////////////////////////
        fn h() _helpers[helpers_idx];
        /////////////////////////////

        // Deal with expression first, might noop the jump.
        mut expr = node.items && solveNode(
            node.items.only,
            type: h.ret_actual || h.ret_expect,

            // Kills is +1 so that kills=0 means noone.
            kills: helpers_idx + 1);

        // Dead code elim.
        if (expr.type.is_never)
            return expr;

        // This kinda does it for return non-expression.
        let redundant = kills == helpers_idx + 1;
        if (redundant && expr.type.is_void)
            return expr;

        // In { a { b { c }}}, c kills b kills a.
        while (h.kills)
            helpers_idx = h.kills - 1;

        // TODO FIX see how functions are special,
        //  if we could get rid of the compulsory returns this would clean up nicely.
        if (redundant && !(h.mask & HM_Function))
            return expr;

        // Lazy labels.
        let target = h.target ||= Scope_addLabel(h.id, :h.local_of);

        h.mask |= HM_LabelUsed;

        if (!node.items)
        {
            reportReturnType(:helpers_idx, t_void);
            return createJump(:target);
        }

        if (expr.type.is_ref)
        {
            mut original            = expr.type.lifetime; // TODO BORROWCK danglefix

            expr.MUT.type.lifetime  = expr.type.lifetime.Lifetime_unwind(:h.locals_start);
            let ltCompare           = expr.type.lifetime.Lifetime_vs    (:h.locals_start || fail());

            if (ltCompare >= 0)
            {
                if (ltCompare > 0)
                {
                    expr = createMove(expr, :original);
                }
                else
                {
                    // Might survive, so we cant move,
                    //  might not survive, so we can't return reference,
                    //   so we have to copy.
                    //
                    // We'll try to prevent this from happening by hinting control flow
                    //  primitives such as and/or/ifs to copy preemptively
                    //   but this can happen after lt replace on callsite,
                    //    when return might point to a temporary argument.
                    //
                    expr = createCopy(expr);
                }
            }
            else
            {
                // This is not a real read/write -
                //  but the thing is the ref will be used LATER, in the caller,
                //   so we need to check it will be still valid there.
                //
                trackReadWrite(original.uni0n, :expr.nodeidx,
                    not_read_from_but: "return");
            }
        }

        reportReturnType(:helpers_idx, expr.type);

        //
        let jump = createJump(:target, expr);
        h.returns ~= jump;
        return jump;

    }

    fn createJump(target: Target, expr?: SolvedNode)
    {
        return SolvedNode("jump", type: t_never, :target,
            items: expr && [ expr ]);
    }

    fn resetReturns(helpers_idx: i32, ret_actual?!: Type, ret_expect?!: Type)
    {
        ref h = _helpers[helpers_idx];

        h.ret_actual = ret_actual;
        h.ret_expect = ret_expect;
    }

    fn reportReturnType(helpers_idx: i32, type: Type)
    {
        ref h = _helpers[helpers_idx];

        // Regular block expects are best-effort type inference hints,
        //  whereas fn expects are explicit type annotations that must be enforced.
        if (h.ret_expect && h.mask & HM_Function)
            checkAssignable(host: h.ret_expect, type,
                "Expression not assignable to return annotation");

        h.ret_actual = h.ret_actual
            ? superType("Subsequent return: ", h.ret_actual, type)
            : type;

        h.ret_actual || fail("Can't be null past this point.");
    }


    //////////////////////////////////////////////////////////

    fn checkAssignable(
        host: Type, guest: Type, err: string,
        id?: string, sep?: string)
    {
        isAssignable(
            :host   || fail("Bad host type."),
            :guest  || fail("Bad guest type."))
                    || fail(err ~ (id && " `" ~ id ~ "`") ~ ": "
                                ~ host .humanizeType() ~ (sep || " <- ")
                                ~ guest.humanizeType());
    }


    // Loops.

    fn Scope_addLabel(id: string, local_of!: i32): Target
    {
        return Scope_create(_scope, "label",
            name: id || ANON(),
            type: Type, flags: F_SHADOW, :local_of, nest: true);
    }

    fn Scope_lookupReturn(id: string, lambdaOK: bool): i32
    {
        _helpers.reveach(_ss.helpers, |item, i|
        {
            if !(item.mask & HM_CanReturn)
                continue;
            if (item.mask & HM_Lambda && !lambdaOK)
                continue;
            if (id && item.id != id)
                continue;

            return i;
        });

        fail("No return `" ~ id ~ "` in scope.");
    }

    fn Scope_lookupLabel(id: string, cont!: bool): i32
    {
        mut CONTINUE_BELOW: i32;

        _helpers.reveach(_ss.helpers, |item, ref i|
        {
            // Continue into first return when possible,
            //  this comparison works because of the scope skips.
            if (i < CONTINUE_BELOW - 1)
                i++;

            if !(item.mask & HM_CanBreak)
            {
                if (!CONTINUE_BELOW)
                {
                    if (id || !(item.mask & HM_Lambda))
                        continue;

                    // Lambda break & continue.
                    if !(cont)
                    {
                        CONTINUE_BELOW = i;
                        continue;
                    }
                }

                return i;
            }

            if (!CONTINUE_BELOW)
            {
                if !(id ? item.id == id : item.mask & HM_Anon != 0)
                    continue;

                if (cont)
                {
                    i++;
                    i < _helpers.len || fail("Cannot continue to label `" ~ id ~ "` from here, did you mean to `break`?");
                }
            }

            return i;
        });

        fail("No label `" ~ id ~ "` in scope.");
    }

    fn solveArgID(node: Node, type: Type): SolvedNode
    {
        let expr = solveNode(node.items.only, :type);
        return solved(node, [ expr ], :expr.type);
    }

    fn solveLoop(node: Node): SolvedNode
    {
        ////////////////////////////////
        let scope0 = Scope_snap(_scope);
        defer Scope_pop(_scope, scope0);
        ////////////////////////////////

        // TODO really consider getting rid of this,
        //  ideally we'll only have labels on blocks -
        //   the continues-map-to-inner-block thing.
        let brk_idx     = _helpers.len;
        _helpers       ~= Helpers(
            id:             node.value,
            mask:           HM_Anon | HM_CanBreak,
            local_of:       _current_fn.target.index,
            locals_start:   GET_next_local_index());

        let n_init      = node.items[LOOP_INIT];
        let n_pre_cond  = node.items[LOOP_COND];
        let n_body      = node.items[LOOP_BODY];
        let n_post_cond = node.items[LOOP_POST_COND];
        let n_post      = node.items[LOOP_POST];

        let init        = n_init      && solveLetStatement(n_init);

        ////////////////////////////////////////////////////////////////////////
        mut loop_start0                     = _current_fn.loop_start;
        let loop_start                      = GET_next_local_index();
        mut events0                         = _current_fn.events.used_in_a_loop;

        _current_fn.loop_start              = loop_start;
        defer _current_fn.loop_start        = loop_start0;
        ////////////////////////////////////////////////////////////////////////

        let pre_cond    = n_pre_cond  && solveNode(n_pre_cond,  t_bool);    trackReadWrite(pre_cond); // call:#test
        let body        = n_body      && solveBlock(n_body, type: t_void);

        ////////////////////////////////////////////////////////////////////////
        _current_fn.events.used_in_a_loop   = events0;
        ////////////////////////////////////////////////////////////////////////

        let post_cond   = n_post_cond && solveNode(n_post_cond, t_bool);    trackReadWrite(post_cond); // call:#test
        let post        = n_post      && solveNode(n_post,      t_void);

        // Control flow.
        let h           = _helpers[brk_idx];
        let label_used  = h.mask & HM_LabelUsed;
        let type        = !pre_cond && !post_cond && !label_used
                            ? t_never
                            : t_void;

        return solved(node, type,
            [ init, pre_cond, body, post_cond, post ],
                target: label_used && h.target);
    }


    // Exotic loops.

    fn solveForFieldsOf(node: Node): SolvedNode
    {
        fn astReplace(shadow node: Node, mutate): Node
        {
            fn walk(shadow ref node: Node)
            {
                for (mut i = 0; i < node.items.len; i++)
                    walk(node.items[i]);

                mutate(node);
            }

            shadow mut node = node;
            walk(node);
            return node;
        }

        let placeholder     = node.value;
        let body_template   = node.items[1];
        let fields_of       = evalTypeAnnot(node.items[0]).type;
        fields_of.isStruct || fail("[for fieldname]: This is not a struct: `" ~ serializeType(fields_of) ~ "`.");

        let fields          = lookupStruct(fields_of).items;

        mut items_ast: Node[];
        for (mut i = 0; i < fields.len; i++)
        {
            let field = fields[i];
            if (GET(field.target).kind == "field")
            {
                items_ast ~= astReplace(body_template, |ref item: Node|
                {
                    if (item.value == placeholder)
                    {
                        if (item.items.len == 1 && item.kind == "call")
                        {
                            // TODO field access syntax disables any kind of scope lookup but fields,
                            //  otherwise we risk miscellaneous stuff randomly breaking templates for no good reason.
                            //
                            // if (item.flags & F_ACCESS)
                            //     item.flags |= F_NOSCOPE;
                            //
                            item.value = field.id;
                        }
                        else if (item.kind == "str")
                        {
                            // String literals, potentially useful for serialization.
                            item.value = field.id;
                        }
                    }
                });
            }
        }

        // Control flow & deadcode elim.
        //  TODO break & continue.
        let items = solveNodes(items_ast, deadcode_on_never: true);
        let type  = items.last.type.is_never ? t_never : t_void;

        return createBlock(type, items);
    }


    //

    fn solveLetLike_dontTouchScope(
        node: Node, specType?!: Type,
        deadcode_on_never?!: bool): SolvedNode
    {
        let n_annot = node.items[LET_TYPE];
        mut annot   = specType || n_annot && evalTypeAnnot(n_annot).type;

        if (annot && node.flags & F_REF)
            annot   = add_mutref(annot, Lifetime_temporary);

        let n_init  = node.items[LET_INIT];
        let init    = n_init && solveNode(n_init, annot);

        return solveLetLike_dontTouchScope(
            node.value, :node.flags,
            :annot, :init,
            :specType, :deadcode_on_never);
    }

    fn solveLetLike_dontTouchScope(
        id: string, mut flags: i32,
        mut init!: SolvedNode,
        mut annot?!: Type, specType?!: Type,
        deadcode_on_never?!: bool): SolvedNode
    {
        annot || init.type || fail(
            "Variable declarations without type annotations must be initialized: `" ~ id ~ "`.");

        if (annot && init.type)
        {
            if (specType)
            {
                // Kinda arbitrary -
                //  if init expr doesn't resolve to a mutref,
                //   infer we want no mutref under any circumstance,
                //    this should help herd the specs a little.
                if (specType.is_mutref && !init.type.is_mutref)
                    annot = clear_mutref(annot);

                // Drop defaults that don't match current spec types,
                //  this will effectively make the args non-defaulted.
                if (!isAssignable(host: annot, init.type))
                    init = SolvedNode();
            }               // ^
                            // |
            if (init.type)  // | Might be dropped here.
            {
                checkAssignable(host: annot, init.type,
                    "Type annotation does not match init expression",
                        id, "=");
            }
        }

        let t_init  = init.type;
        let killref = t_init.is_ref2temp();

        // Dead code elim.
        if (deadcode_on_never && t_init.is_never)
        {
            makeNote(N_DeadLet);
            return init;
        }

        //
        if (annot.is_mutref)
            flags |= F_REF;

        if (flags & F_REF)
        {
            t_init.is_mutref    || t_init.is_never && annot
                                || !init && flags & F_ARG || fail(
                "`ref` variables must be initialized to a mutable reference: `" ~ id ~ "`"
                    ~ (t_init ? " = " ~ humanizeType(t_init) : "."));

            killref && fail(
                "`ref` varibles cannot bind to temporaries.");
        }

        //
        mut t_let   = annot && (flags & (F_ARG | F_MUT) || !t_init)

                        ? flags & F_ARG && !(flags & F_MUT)
                            ? add_ref(annot, Lifetime_temporary)
                            : annot

                        : t_init.is_mutref || flags & F_MUT || killref
                            ? flags & F_REF                                     && (!killref || fail("redundant, see above, refs cant bind to temps"))
                                ? t_init
                                : USE_ref_to_mutref && !(flags & F_MUT) && !killref
                                    ? clear_mutref(t_init)
                                    : clear_refs(t_init)
                            : flags & F_ARG && !(flags & F_MUT)
                                ? add_ref(t_init, Lifetime_temporary)
                                : t_init;

        // TODO clean this up: inliner broke for `v: &mut T` arg annots,
        //  which don't have the F_REF flag, which drops the mutrefness here on createLet.
        //
        // Best way to fix is to use the original argument type on createLet,
        //  search for TODO__ORIGINAL_ANNOT_OR_TYPE
        if (t_let.is_mutref)
            flags |= F_REF;

        if (init)
        {
            maybeCopyOrMove(init, t_let);

            // Can change due to propagate type:
            //  let a = b[i]: mutref -> ref unions-in a static lt.
            if (t_let.lifetime && !(flags & F_ARG))
                t_let.lifetime = init.lifetime || fail();
        }

        // TODO clean this up, annots not needed.
        //  We could move init out of here?
        //   So we can edit out of order maybe?
        return SolvedNode(
            kind: "let", value: id, :flags,
            type: t_let, items: [ SolvedNode, init ]);
    }

    fn solveLet(node: Node, specType?!: Type, deadcode_on_never?!: bool): SolvedNode
    {
        mut out = solveLetLike_dontTouchScope(node, :specType, :deadcode_on_never);
        let id  = out.value;
        solveLet(:out, :id, :deadcode_on_never);
        return out;
    }

    fn solveLet(ref out!: SolvedNode, id!: string, deadcode_on_never?!: bool)
    {
        // Dead code elim.
        if (out.kind != "let")
        {
            if (SELF_TEST)
                deadcode_on_never && out.type.is_never || fail(
                    "solveLet: results in a `" ~ out.kind ~ ": " ~ id ~ "`.");

            return;
        }

        !out.type.is_ref || out.type.lifetime || fail(
            "solveLet: ref without lifetime: `" ~ id ~ "`.");

        mut shadows = !!(out.flags & F_SHADOW);

        // TODO FIX: AUTOCALL ////////
        let cleanID = out.flags & F_COMPOUND_ID && id.slice(0, id.find('.'));
        shadow let id = cleanID || id;
        //////////////////////////////

        let isArg = out.flags & F_ARG;

        if (!addroffn::X_unpackAddrOfFnBinding(_scope.items, id, out.type, :shadows))
        {
            ////////////////////////////////////////////////////////////////
            if (OPTI_dedupe_vars && !isArg)
            {
                let init = out.items[LET_INIT];
                if (init.kind == "call" && !init.items)
                {
                    let target  = init.target;
                    let other   = GET(target);

                    if (other.kind == "var")
                    {
                        if (isAssignable(host: other.type, out.type))
                        {
                            // println("VARFOLD " ~ id ~ ": " ~ humanizeType(out.type)
                            //                    ~ " := " ~ other.name ~ ": " ~ humanizeType(other.type));

                            Scope_set(_scope, :id, :target, :shadows);
                            if (out.flags & F_USING)
                                _scope.usings.push(target);

                            out = createEmpty();
                            return;
                        }
                    }
                }
            }
            ////////////////////////////////////////////////////////////////

            let target = out.MUT.target = Binding(:id, :out.flags, :out.type, :shadows);
            GET_mut(target).solved = out;

            ///////////////////////////////////////////////////////////////
            // Track references.
            if !(isArg)
            {
                let init = out.items[LET_INIT];
                if (init.type.is_ref)
                    trackLocalRef(left: target, right: init.type.lifetime);
            }
            ///////////////////////////////////////////////////////////////

            Scope_set(_scope, :id, :target, :shadows);
            if (out.flags & F_USING)
                _scope.usings.push(target);
        }
    }

    fn createLet(id: string, flags: i32, init: SolvedNode)
    {
        mut out = solveLetLike_dontTouchScope(:flags, :id, :init);
        solveLet(:out, :id);
        return out;
    }


    //

    fn solveTypedef(node: Node): SolvedNode
    {
        let annot = evalTypeAnnot(node.items.only);

        // TODO FIX see the typeparams stuff, its the same mess.
        //  The original typedef is setup to work as a constructor, which the Scope_Typedef here won't do.
        //   Perhaps this is fine but we only want to do it if the annot is exactly the same as the original,
        //    or perhaps if the original is assignable to this annot or something?
        //
        if (annot.type.isStruct)
            Scope_set(_scope, node.value, lookupStruct(annot.type).target, shadows: false);
        else
            Scope_Typedef(_scope, node.value, annot.type, node.flags);

        return createEmpty();
    }

    fn solveLetStatement(node: Node): SolvedNode
    {
        node.kind == "let" || fail("Expected a `let` statement, got: `" ~ node.kind ~ "`.");
        return solveNode(node, t_void);
    }

    fn solveCatch(node: Node): SolvedNode
    {
        node.items.len == 3 || fail();

        let var_ok = solveLetStatement(node.items[0]);

        ////////////////////////////////
        let scope0 = Scope_snap(_scope);
        defer Scope_pop(_scope, scope0);
        ////////////////////////////////

        let var_err = solveLetStatement(node.items[1]);
        let catch   = solveNode(node.items[2], t_void);

        let type = var_ok.type;
        catch.type.is_never || fail(
            "[let catch]: catch clause must exit local scope.");

        var_err.kind == "let" && isAssignableAsArgument(
            var_err.type, t_string) || fail(
                "catch: exceptions are strings,"
                    ~ " consider dropping the annotation.");

        return solved(node, type,
            [ var_ok, var_err, catch ]);
    }

    fn solveTryCatch(node: Node): SolvedNode
    {
        node.items.len == 3 || fail();

        /////////////////////////////////
        let scope0  = Scope_snap(_scope);
        /////////////////////////////////

        let try     = solveNode(node.items[0], t_void);

        ///////////////////////////////////////
        Scope_pop(_scope, scope0);
        shadow let scope0 = Scope_snap(_scope);
        ///////////////////////////////////////

        let err     = solveLetStatement(node.items[1]);
        let catch   = solveNode(node.items[2], t_void);

        //////////////////////////
        Scope_pop(_scope, scope0);
        //////////////////////////

        err.kind == "let" && isAssignableAsArgument(
            host: err.type, t_string) || fail(
                "catch: exceptions are strings,"
                    ~ " consider dropping the annotation.");

        let type    = try.type.is_never && catch.type.is_never
                        ? t_never
                        : t_void;

        return solved(node, type, [ try, err, catch ]);
    }

    fn findModule(fuzimport: string): &Module
    {
        let fname = resolveFile_x(fuzimport);

        let modules = ctx.modules;
        for (mut i = 1; i < modules.len; i++)
        {
            let m = modules[i];
            if (m.fname == fname)
                return m;
        }

        fail("Cannot locate: " ~ fname);
    }

    fn solveImport(node: Node): SolvedNode
    {
        let m = findModule(fuzimport: node.value);
        Scope_import(m.modid);

        //
        return createEmpty();
    }

    fn solveDefer(node: Node): SolvedNode
    {
        ////////////////////////////////////////////
        // TODO unless defer:ok, must be noexcept //
        ////////////////////////////////////////////

        let item = solveNode(node.items.only, t_void);
        return solved(node, t_void, [ item ]);
    }


    // TODO we have to get rid of this.

    fn Scope_lookupType(mut id: string, flags: i32 = 0): Type
    {
        mut scope_iterator: i32;
        mut overloadIdx: Target;
        mut shadows: bool;

        let qualified = flags & F_COMPOUND_ID;
        let scope = qualified
            ? dequalify_andGetScope(id)
            : _scope;

        while (overloadIdx =
            scope.items.search(id, scope_iterator,
                scope_skip: !qualified && _ss.items, :shadows))
        {
            let maybe = GET(overloadIdx);
            if (maybe.kind == "type")
                return maybe.type || fail();
        }

        return fail("No type `" ~ id ~ "` in scope.");
    }

    fn Scope_lookupType(annot: Node): Type
    {
        return Scope_lookupType(annot.value, :annot.flags);
    }


    //

    fn evalTypeParam(id: string, typeParams?: TypeParams): Type
    {
        return typeParams[id].matched || Scope_lookupType(
                            "$" ~ (id || fail("Falsy type param id.")))
                                      || fail("No type param `$" ~ id ~ "` in scope.");
    }

    fn solveTypeParam(node: Node): SolvedNode
    {
        return solved(node, evalTypeParam(node.value));
    }

    fn solveAddrOfFn(node: Node): SolvedNode
    {
        let id = node.value;

        mut shadow = false;
        mut result: Target[];

        // Visit local scope.
        fn visitScope(items: [ScopeItem])
        {
            mut scope_iterator: i32;
            mut target: Target;
            mut shadows: bool;
            while (!shadow && (target = items.search(
                :id, :scope_iterator, scope_skip: _ss.items, :shadows)))
            {
                // Can't shadow here -
                //  shadowing works per signature,
                //   we can't just shadow everything by the same name in scope.
                result.push(target);
            }
        }

        visitScope(_scope.items);

        // TODO FIX:
        //  emit a regular lambda instead.
        if (node.flags & F_ACCESS)
        {
            // Iterate all visible types, this is slow.
            //  Alternatively we could just unwrap all of these things in
            //   module root scope but that'd slow everything else down.
            fn visitTypes(shadow module: Module)
                module.out.types.each(
                    |struct| visitScope(struct.items));

            // From this module ...
            visitTypes(module);

            // ... and all visible imports.
            _scope.imports.each(_ss.imports,
                |import| visitTypes(ctx.modules[import]));
        }

        //
        result || fail("No `fn " ~ id ~ "` in scope.");

        let type = Type(ValueType(quals: 0, modid: 0, canon: addroffn::packAddrOfFn(result)));
        return createEmpty(:type);
    }


    //

    fn evalTypeAnnot(node: Node, typeParams?: TypeParams): SolvedNode
    {
        fn T(i: i32 = 0) evalTypeAnnot(node.items[i], typeParams).type;

        if (node.kind == "call")
        {
            let items = node.items;
            if (items.len == 1)
            {
                if (node.value == "&")
                    return solved(node, add_ref(T, Lifetime_temporary));

                if (node.value == "&mut")
                    return solved(node, add_mutref(T, Lifetime_temporary));

                if (node.value == "[]")
                    return solved(node, createArray(T));
            }
            else if (items.len == 2)
            {
                if (node.value == "Map")
                    return solved(node, createMap(T(0), T(1)));
            }

            return solveCall(node);
        }
        else if (node.kind == "typeparam")
        {
            return solved(node, evalTypeParam(node.value, typeParams));
        }
        else if (node.kind == "arrlit" && node.items.len == 1)
        {
            // Slice.
            return solved(node, createSlice(T, Lifetime_temporary));
        }

        return fail("TODO evalTypeAnnot: " ~ node.kind ~ "[" ~ node.items.len ~ "]");
    }

    fn trySolveTypeParams(
        node: Node, mut type: Type, ref typeParams: TypeParams): bool
    {
        if (node.kind == "call")
        {
            let items = node.items;
            if (items.len)
            {
                if (items.len == 1)
                {
                    mut t   = node.value == "&"    ? tryClear_ref(type)
                            : node.value == "&mut" ? tryClear_mutref(type)
                            : node.value == "[]"   ? tryClear_array(type)
                            : fail("TODO trySolveTypeParams unary call");

                    if (!t)
                        return false;

                    return trySolveTypeParams(
                        items[0] || fail(), t, typeParams);
                }
                else if (items.len == 2)
                {
                    if (node.value == "Map")
                    {
                        let kv = tryClear_map(type);
                        if (!kv)
                            return false;

                        return trySolveTypeParams(items[0] || fail(), kv.key  , typeParams)
                            && trySolveTypeParams(items[1] || fail(), kv.value, typeParams);
                    }
                }
            }
            else
            {
                return isAssignable(
                    Scope_lookupType(node),
                        type);
            }
        }
        else if (node.kind == "typeparam")
        {
            let id = node.value || fail();

            // What is happening here?
            // This is crazy, no?
            ref _param = (typeParams[id] ||= TypeParam);
            if (_param)
            {
                let union = type_trySuper(_param.matched, type);
                if (!union)
                    return false;

                type = union;
            }

            // TODO not here:
            //  we want to clear everything non-canonical from
            //   type params AFTER we solve & match the args,
            //    during the matching it shouldn't be necessary.
            //
            // After the match we need this to e.g. lift `non_zero`
            //  from integral results, etc.
            //
            _param.matched = relax_typeParam(type);

            return true;
        }
        else if (node.kind == "arrlit" && node.items.len == 1)
        {
            // Slice.
            let t = tryClear_sliceable(type);
            return t && trySolveTypeParams(
                node.items[0] || fail(), t, typeParams);
        }

        return fail("TODO trySolveTypeParams fallthrough");
    }

    fn evalTypePattern(node: Node, ref typeParams: TypeParams): bool
    {
        if (node.kind == "and")
        {
            for (mut i = 0; i < node.items.len; i++)
                if (!evalTypePattern(node.items[i], typeParams))
                    return false;

            return true;
        }
        else if (node.kind == "or")
        {
            for (mut i = 0; i < node.items.len; i++)
                if (evalTypePattern(node.items[i], typeParams))
                    return true;

            return false;
        }
        else if (node.kind == "typeassert")
        {
            let left  = node.items[0] || fail();
            let right = node.items[1] || fail();

            // We'll have to figure out the type tag nonsense at some point.
            //  Perhaps when we have an `any` type,
            //   we could subtype it with the desired quals.
            if (left.kind  == "typeparam" && right.kind == "typetag")
                return type_has(
                    evalTypeParam(left.value, typeParams),
                    right.value || fail("Falsy type tag."));
            else
            {
                let actual = evalTypeAnnot(left, typeParams).type;

                let ok = trySolveTypeParams(
                    type: actual, node: right,
                        :typeParams);

                if (ok && left.kind == "typeparam")
                {
                    let id = left.value;
                    ref tp = typeParams[id];

                    tp.consumed = tp.consumed
                        ? type_tryIntersect(tp.consumed, actual) || fail("typeassert intersect fail.")
                        : actual;
                }

                return ok;
            }
        }

        return fail("TODO evalTypePattern fallthrough: "
                    ~ node.kind ~ "(" ~ node.items.len ~ ")");
    }


    //

    fn createRead(id: string): Node
    {
        return Node(
            kind:   "call",
            value:  id,
            token:  (_here || fail()));
    }

    fn dequalify_andGetScope(ref id: string): &Scope
    {
        let split = id.find('\t');
        split >= 0 || fail();

        let fname = id.slice(0, split);
        id        = id.slice(split + 1);

        let other = findModule(fuzimport: fname);
        if (other.modid != module.modid)
            return other.out.solve.scope;

        return _scope;
    }

    fn solveCall(node: Node, target?!: Target, kills?!: i32): SolvedNode
    {
        // Dead code elim.
        mut args = solveNodes(node.items, deadcode_on_never: true, mode: M_WILL_RETYPE);
        if (args.if_last.type.is_never)
        {
            makeNote(N_DeadCall);
            return createBlock(t_never, args);
        }

        //
        mut id = node.value;
        if (!id) target || fail();

        // Qualified?
        let qualified = node.flags & F_COMPOUND_ID;
        let scope = qualified
            ? dequalify_andGetScope(id)
            : _scope;

        //
        mut reorder: i32[];
        mut conversions: Target[][];
        let callTargIdx = match__mutargs(
            :scope, local_scope: !qualified,
            :id, :args, :reorder, :conversions, :node.flags, :target);

        //
        return CallerNode(node.value, callTargIdx, args, :kills, :reorder, :conversions);
    }


    // I feel this should be a fncall instead of this here.
    //  It's varargs - so is it a template or what?

    fn solveArrlit(node: Node, type: Type): SolvedNode
    {
        mut itemType = type && tryClear_array(type);

        // Default constructor calls.
        if (!itemType && type.isStruct)
            return solveCall(node,
                target: lookupStruct(type).target);

        // Dead code elim.
        mut args = solveNodes(node.items, itemType, deadcode_on_never: true/*, mode: M_WILL_RETYPE*/);  // TODO FIX retype here, Or maybe this should really just go through trymatch.
        if (args.if_last.type.is_never)
        {
            makeNote(N_DeadArrlit);
            return createBlock(t_never, args);
        }

        return createArrlit(args, itemType);
    }

    fn solveArrlit_itemType_init(head!: Type)
    {
        // Super trivial, just don't want to hardcode this here.
        return clear_refs(head) || fail();
    }

    fn solveArrlit_itemType(items: [SolvedNode], mut itemType?: Type, mut start = 0)
    {
        // Init.
        if (!itemType)
        {
            if (start == items.len)
                return fail("Cannot infer empty arraylit.");

            itemType = solveArrlit_itemType_init(head: items[start++].type);
        }
        else if (itemType.is_ref)
        {
            fail("Array items cannot be refs. TODO Why an error? Should this not just clear_refs?");
        }

        // Rest is simple inter.
        for (mut i = start; i < items.len; i++)
            itemType = superType("Array literal: ", itemType, items[i].type);

        return itemType;
    }

    fn solveArrlit_done(itemType!: Type)
    {
        return createArray(itemType);
    }

    fn createArrlit(mut items: SolvedNode[], itemType?: Type)
    {
        shadow let itemType = solveArrlit_itemType(items, itemType);

        for (mut i = 0; i < items.len; i++)
            maybeCopyOrMove(items[i], itemType);

        return SolvedNode("arrlit", :items, type: solveArrlit_done(:itemType));
    }


    //

    fn createLet(id: string, type: Type, flags: i32, ref shadows!: bool): SolvedNode
    {
        let target = Binding(id, type, :flags, :shadows);
        let ret = SolvedNode(
            kind: "let", :flags,
            value: target.name, :target.type, :target);

        target.GET_mut.solved = ret;
        return ret;
    }

    fn injectImplicitArg(id: string, type: Type, becauseOf!: Target): Target
    {
        _current_fn.items || fail(
            "No implicit `" ~ id ~ "` in scope, needed to call `" ~ GET(becauseOf).name ~ "`.");

        // Reuse existing or add new argnode.
        for (mut i = 0; i < _current_fn.items.len + FN_ARGS_BACK; i++)
        {
            let arg = _current_fn.items[i];
            if (arg.value == id)
            {
                mut super = intersectionType(
                    :id, "Implicit argument collision: ",
                    add_ref(type, arg.type.lifetime), arg.type);

                //////////////////////////////////////////////////////////
                // TODO FIX just let the stuff below rerun?             //
                //  Here we're monkey patching, this is just not good.  //
                arg.MUT.type            = super;                        //
                arg.target.GET_mut.type = super;                        //
                //////////////////////////////////////////////////////////

                return arg.target || fail();
            }
        }

        // We'll be adding a new thing here.
        mut shadows: bool;
        let flags = F_IMPLICIT | F_ARG;

        let newArgNode  = createLet(id, type, :flags, :shadows);
        let newArgIdx   = _current_fn.items.len + FN_ARGS_BACK;
        _current_fn.MUT.items.insert(newArgIdx, newArgNode);

        Reference_trackArgument(_current_fn.flow, newArgNode.target.index, position: newArgIdx);

        return newArgNode.target;
    }

    fn bindImplicitArg(name: string, type: Type, becauseOf!: Target): SolvedNode
    {
        let id = name;

        // CLOSURE-ID-HACK
        {
            let target = hacks::tryParseClosureID(:id, :MODID);
            if (target)
            {
                let o = GET(target);
                if (o.local_of == _current_fn.target.index)
                {
                    o.kind == "var" || fail("CLOSURE-ID-HACK #2");
                    return CallerNode("__closure", target);
                }
            }
        }
        // CLOSURE-ID-HACK

        mut reorder: i32[];
        mut conversions: Target[][];
        let target = tryMatch__mutargs(_scope, local_scope: true, :id, :reorder, :conversions, flags: F_IMPLICIT)
            || injectImplicitArg(:id, :type, :becauseOf)
            || fail();

        let o = GET(target);
        o.flags & F_IMPLICIT || fail(
            "Matching a non-implicit item in scope: `" ~ name ~ "`, binds to call to `" ~ GET(becauseOf).name ~ "`.");

        checkAssignable(host: type, o.type, "Implicit `" ~ name ~ "` type mismatch");

        return CallerNode("__implicit", :target, :reorder, :conversions);
    }


    //

    fn TODO_FIX_pop(ref items: SolvedNode[])
    {
        // TODO FIX pop should just return the last element, this is idiotic.
        mut last = items.last;
        items.pop();
        return last;
    }

    fn solveIf(node: Node, mut type: Type): SolvedNode
    {
        mut cond    = solveNode(node.items[0], t_bool);

        trackReadWrite(cond); // call:#test

        // Dead code elim.
        if (cond.type.is_never)
        {
            makeNote(N_DeadIf);
            return cond;
        }

        // `a && THROWS ? b : c` is the same as `a ? THROWS : b`
        mut cons    = cond.kind == "and" && cond.items.last.type.is_never
            ? { makeNote(N_DeadIfCons); cond.MUT.items.TODO_FIX_pop }
            : solveBlock(node.items[1], :type);

        mut alt     = solveBlock(node.items[2], type: type || cons.type);

        if (!type.is_void)
        {
            type = superType("if/else: ", cons.type, alt.type);

            type.is_ref || !type.lifetime || fail("[if] stray lifetime");
            maybeCopyOrMove(cons, type);
            maybeCopyOrMove(alt,  type);
        }

        // Control flow.
        if (cons.type.is_never && alt.type.is_never)
            type = t_never;

        return solved(node, type || fail(), [ cond, cons, alt ]);
    }


    //////////////////////////////////////////////////
    // Logic                  .                     //
    //////////////////////////////////////////////////

    fn solveOr(node: Node, mut type: Type): SolvedNode
    {
        mut items = solveNodes(node.items, deadcode_on_never: true, as_blocks: true,
            type_last: type,
            use_type_last: true,
            type_all: type.is_void ? t_bool : type,
            track_reads: node.items.len - 1);

        if (items.len < 2)
            return items.only;

        // Statement mode.
        if (type.is_void)
            type = t_bool;

        // Unless this is an explicit bool context:
        if (!type.is_bool)
        {
            mut sumType: Type;
            mut hasNever = false;

            // Sum types, ignoring never.
            for (mut i = items.len; i --> 0; )
            {
                let item = items[i];
                if (item.type.is_never)
                {
                    hasNever = true;
                    continue;
                }

                // a && b || never: b can be mutref!
                let andLast = hasNever && item.kind == "and" && item.items && item.items[item.items.len - 1];
                let itemType = andLast && !andLast.type.is_never
                    ? andLast.type
                    : item.type;

                if (sumType)
                {
                    sumType = type_trySuper(sumType, itemType);
                    if (!sumType)
                        break;
                }
                else
                {
                    sumType = itemType;
                }
            }

            if (!sumType)
            {
                type = t_bool;
            }
            else
            {
                type = sumType;
                for (mut i = 0; i < items.len; i++)
                    maybeCopyOrMove(items[i], sumType);
            }
        }

        return solved(node, type, items);
    }

    fn solveAnd(node: Node, mut type: Type): SolvedNode
    {
        let items = solveNodes(node.items, deadcode_on_never: true,
            type_last: type,
            use_type_last: true,
            type_all: type.is_void ? t_bool : type,
            track_reads: node.items.len - 1);

        if (items.len < 2)
            return items.only;

        // Statement mode.
        if (type.is_void)
            type = t_bool;

        // Unless this is an explicit bool context:
        if (!type.is_bool)
        {
            mut sumType: Type;

            // Last item type wins -
            //  unless it's never, which we can safely ignore.
            for (mut i = items.len; i --> 0; )
            {
                let item = items[i];
                if (item.type.is_never)
                    continue;

                if (sumType)
                {
                    sumType = type_trySuper(sumType, item.type);
                    if (!sumType.is_ref)
                        break;
                }
                else
                {
                    type    = item.type;
                    sumType = item.type;
                }
            }

            if (!sumType.is_ref)
            {
                // We'll use the type of the last operand,
                //  and generate a falsy default for the rest.
                if (type.is_ref)
                {
                    // We can generate falsy values and refs,
                    //  but not mutrefs - can't allocate
                    //   a static mut and expect it to remain falsy.
                    if (CANNOT_definit_mutrefs)
                        type = clear_mutref(type);

                    // Default zerofills are static.
                    type.lifetime = Lifetime_makeShared(type.lifetime);
                }
            }
            else
            {
                type = sumType;
            }
        }

        // Because values remain values and refs remain refs,
        //  there's no copying/moving involved in an && chain.
        return solved(node, type, items);
    }

    fn solvedAndOr(node: Node, type: Type, items: SolvedNode[])
    {
        return solved(node, type, items);
    }


    //

    fn trackLocalRef(left: Target, right: Lifetime)
    {
        trackReadWrite(right.uni0n, not_read_from_but: "bind to");

        return Reference_trackLocalRef(_current_fn.flow, left.index, :right);
    }

    fn trackReadWrite(node: SolvedNode, write?!: Target, not_read_from_but?!: string)
    {
        if (!node.type.is_ref || !_current_fn.target.index)
            return;

        let regions = node.type.lifetime.uni0n;
        trackReadWrite(:regions, :node.nodeidx, :write, :not_read_from_but);
    }

    fn trackReadWrite(regions: Region[], nodeidx?!: i32, write?!: Target, not_read_from_but?!: string)
    {
        fn name(shadow target: i32)
        {
            let o = GET(nested(target));

            // a|b|c instead of the useless [mutref union] thing.
            if (o.kind == "lifetime")
            {
                mut str = o.name ~ "(";
                for (mut i = 0; i < o.type.lifetime.uni0n.len; i++)
                {
                    if (i)
                        str ~= "|";

                    let t = Region_asIndex(o.type.lifetime.uni0n[i]);
                    let n = t.name;
                    str  ~= n;
                }

                return str ~ ")";
            }

            return GET(nested(target)).name.human;
        }

        let token   = _here;

        // Writes invalidate subsequent reads.
        ref flow    = _current_fn.flow;
        ref events  = _current_fn.events;
        for (mut i = 0; i < regions.len; i++)
        {
            let target = Region_asIndex(regions[i]);
            if (!target)
                continue;

            if (events.invalidated_by.len > target)
            {
                let u = events.invalidated_by[target];
                if (u.target && !(options.dev & options::DEV_DisableBCK))
                    fail("BORROWCK: Cannot " ~ (write ? "write to" : not_read_from_but || "read from")
                        ~ " " ~ target.name.qBAD ~ ", reference invalidated by write to"
                        ~ " " ~ u.target.name.qBAD ~ " at "
                        ~ u.token.addr_and_snippet
                        ~ RWEvent_stack(u.nodeidx, u.target));
            }

            // ARGUMENTS AT RISK ////////////////////////
            if (events.args_written && flow.is_arg.has(target))
                flow.args_at_risk.grow_if_oob(target)
                    .set::add(events.args_written);
            /////////////////////////////////////////////
        }

        let loop_start = _current_fn.loop_start;

        if (write) for (mut i = 0; i < regions.len; i++)
        {
            let target = Region_asIndex(regions[i]);
            if (!target)
                continue;

            let invalidates = flow.invalidates.unless_oob(target);

            // Writes in a loop invalidate preceding reads.
            for (shadow mut i = 0; i < invalidates.len; i++)
            {
                let other = invalidates[i];
                let u = events.used_in_a_loop.unless_oob(other);
                if (u.target && !(options.dev & options::DEV_DisableBCK))
                    fail("BORROWCK: Write to `" ~ target.name ~ "`"
                        ~ " invalidates the use of `" ~ other.name ~ "` at "
                        ~ u.token.addr_and_snippet
                        ~ " on next loop iteration."); // TODO loop starts at x:x!
            }

            // Track writes, easy.
            for (shadow mut i = 0; i < invalidates.len; i++)
            {
                ref u = events.invalidated_by.grow_if_oob(invalidates[i]);
                if (!u.target)
                    u = RWEvent(:target, :token, :nodeidx);
            }

            // ARGUMENTS AT RISK ////////////////////////
            if (flow.is_arg.has(target))
            {
                events.args_written.set::add(target);
                events.args_written_via.grow_if_oob(target) ||= write;

                if (loop_start)
                    for (shadow mut i = 0; i < events.args_in_a_loop.len; i++)
                        flow.args_at_risk.grow_if_oob(events.args_in_a_loop[i])
                            .set::add(target);
            }
            /////////////////////////////////////////////
        }

        // Finally track reads and writes in a loop.
        if (loop_start) for (mut i = 0; i < regions.len; i++)
        {
            let target = Region_asIndex(regions[i]);
            if (!target)
                continue;

            // Track uses.
            if (target < loop_start)
            {
                ref u = events.used_in_a_loop.grow_if_oob(target);
                if (!u.target)
                    u = RWEvent(target: loop_start, :token, :nodeidx);
            }

            // ARGUMENTS AT RISK ////////////////////////
            if (flow.is_arg.has(target))
            {
                // And this clearly sucks
                //  because we can't clean up after ourselves,
                //   perhaps we don't want this but should use used_in_a_loop instead?
                events.args_in_a_loop.set::add(target);
            }
            /////////////////////////////////////////////
        }
    }

    fn addr(using token: TokenIdx)
    {
        let using t = token._token;

        if (modid != module.modid)
            return _fname ~ "@" ~ line ~ ":" ~ col;

        return line ~ ":" ~ col;
    }

    fn addr_and_snippet(using token: TokenIdx)
    {
        return token.addr ~ ":\n\n" ~ formatCodeSnippet(token);
    }

    fn RWEvent_stack(nodeidx: i32, target: i32)
    {
        let nodeown = _current_fn.target || fail("RWEvent_stack: no current fn.");
        let node    = SolvedNode(:nodeown, :nodeidx);

        if (node.kind != "call")
            return "\n\tVia " ~ node.kind.qKW;

        // TODO this is the target we've written to,
        //  see which mutref args aliase it at the callsite, then descend.
        //
        if (target) {}

        let o = GET(node.target);
        return "\n\tAt call to " ~ o.name.qID;
    }


    //

    fn solved(
        node: Node, type: Type, items: SolvedNode[] = [], target = Target)
            : SolvedNode
    {
        return SolvedNode(
            kind:  node.kind ,
            flags: node.flags,
            value: node.value,

            :items, :type, :target);
    }

    fn CallerNode(
        debug: string,
        mut target: Target, mut args: SolvedNode[] = [], kills?!: i32, reorder?: i32[], conversions?: Target[][])
            : SolvedNode
    {
        // Do reorder.
        if (reorder)
        {
            // TODO FIX this can be done in place, a neat little algo with swaps
            mut args_out: SolvedNode[]; args_out.resize(reorder.len);

            for (mut i = 0; i < reorder.len; i++)
            {
                let idx = reorder[i];
                if (idx >= 0)
                    args_out[i] = args[idx];
            }

            args = args_out;
        }

        // `using` codegen.
        for (mut argIdx = 0; argIdx < conversions.len; argIdx++)
        {
            let conversion = conversions[argIdx];

            for (mut i = 0; i < conversion.len; i++)
            {
                let t = conversion[i];
                if (t.min || t.max && args[argIdx])
                {
                    args[argIdx] = CallerNode("__using.a", t, [ args[argIdx] ]);
                    continue;
                }

                i && fail("Bad conversion chain, non-leading nullary: `" ~ t.name ~ "`.");
                args[argIdx] && fail("Bad conversion chain, about to throw away an argnode.");
                args[argIdx] = CallerNode("__using.b", t);
            }
        }

        // Rest params.
        let REST_START = target.findRestStart();
        if (REST_START < args.len)
        {
            mut rest: SolvedNode[];
            rest.resize(args.len - REST_START);

            for (mut i = args.len; i --> REST_START; )
            {
                SWAP(rest[i - REST_START], args[i]);
                if (i > REST_START)
                    args.splice(i, 1);
                else
                    args[i] = createArrlit(rest);
            }
        }

        // This was previously part of tryMatch,
        //  but we can just as easily do it here.
        let isZeroInit = target.kind == "type" && !args.len;
        if (!isZeroInit)
        {
            // Defaults & implicit argument injection.
            mut host_args = target.args;
            args.resize(host_args.len);
            for (mut i = 0; i < args.len; i++)
            {
                if (!args[i])
                {
                    let host_arg = host_args[i];

                    args[i] = host_arg.default ||
                    {
                        host_arg.flags & F_IMPLICIT || fail(
                            "tryMatch: about to implicit-bind a non-implicit argument: `"
                                ~ host_arg.name ~ ": " ~ serializeType(host_arg.type) ~ "`.");

                        bindImplicitArg(:host_arg.name,
                                        :host_arg.type, becauseOf: target)
                    };
                }
            }
        }

        mut type = target.type;

        // BORROWCK /////////////
        mut bck_writes: Region[];
        /////////////////////////

        // HACK -
        //  TBD how we make this stuff work in real life.
        //   OR alternatively, do this for arrays too.
        if (target.kind == "field")
        {
            type = add_refs(from: args.only.type || fail(), to: target.type);
        }

        // So we're turning closeovers into implicit arguments -
        //  previously we tracked them separately but we're making everything more samey.
        else if (target.kind == "var")
        {
            type.lifetime.uni0n.len == 1 || fail(
                "CallerNode: var " ~ target.name ~ " type.lifetime.len != 1");

            if (target.local_of &&
                target.local_of != _current_fn.target.index)
            {
                // CLOSURE-ID-HACK
                // TODO perhaps forbid ClosureIDs here, and hunt down the source of the problem -
                //  complicated close-over schemes do this but its really confusing so not exactly sure why,
                //   there's a good test for it.
                target = injectImplicitArg(
                    id:     hacks::ClosureID(
                            hacks::tryParseClosureID(id: target.name, :MODID) || target),

                    type:   target.type, becauseOf: target);
                // CLOSURE-ID-HACK

                type = GET(target).type || fail("CallerNode: !type on var " ~ target.name);
            }
        }

        // Funcs & co.
        else
        {
            // Tag copies and moves.
            if (args)
            {
                let host_args = target.args || fail("CallerNode: no host args: " ~ target.qWHAT);
                host_args.len >= args.len || fail("CallerNode: host_arg.len mismatch: " ~ target.qWHAT);

                // BORROWCK ///////////////////
                mut mutref_first    = -1;    //
                mut mutref_last     = -1;    //
                mut ref_first       = -1;    //
                mut ref_last        = -1;    //
                                             //
                mut bck_unwound: Lifetime[]; //
                ///////////////////////////////

                for (mut i0 = 0; i0 < args.len; i0++)
                {
                    let host_arg = host_args[i0];

                    /////////////////
                    // Literal fixup.

                    // Drop argids at this point, not useful.
                    ref arg = args[i0];
                    if (arg.kind == "argid")
                        arg = arg.items.only;

                    let expect = host_arg.type;
                    {
                        let retype = tryRetyping(arg, expect);
                        if (isAssignableAsArgument(expect, retype))
                            arg.MUT.type = retype;
                    }
                    //        /LITFIX
                    /////////////////

                    // BORROWCK: multiple mutrefs error,
                    //  this is the only thing we can't workaround by copying.
                    if (expect.is_ref)
                    {
                        // Lazy init unwound lifetimes.
                        if !(bck_unwound)
                        {
                            if (mutref_first >= 0 || ref_first >= 0 && expect.is_mutref)
                            {
                                bck_unwound.resize(args.len);
                                for (mut i = ref_first; i <= ref_last; i++)
                                    bck_unwound[i] = Lifetime_unwind(args[i].type.lifetime);
                            }
                        }

                        // Validate aliasing.
                        if (bck_unwound)
                        {
                            let unwound = bck_unwound[i0] = Lifetime_unwind(args[i0].type.lifetime);

                            fn validate(i: i32)
                            {
                                // Can the fn handle aliasing here?
                                if (host_arg.risk_free.has(i))
                                    return;

                                // Do we see any aliasing here?
                                let inter = Lifetime_inter(unwound, bck_unwound[i]);
                                if !(inter)
                                    return;

                                // TODO here we can verify subsets at risk + subsets written.
                                let other = host_args[i];

                                // Try to resolve by injecting a copy -
                                //  We don't allow this on implicit arguments, which includes closures.
                                //   Implicitly copying implicit arguments is a bit much.
                                {
                                    mut which = -1;
                                    if !(host_arg.is_mutref || host_arg.flags & F_IMPLICIT)
                                        which = i0;
                                    else if !(other.is_mutref || other.flags & F_IMPLICIT)
                                        which = i;

                                    if (which >= 0)
                                    {
                                        // Don't attempt if no-copy, the error is not useful.
                                        ref node = args[which];
                                        if (node.is_rx_copy)
                                            return BORROWCK_resolveByCopyToTemporary(
                                                node: args     [which],
                                                slot: host_args[which].type);
                                    }
                                }

                                // BORROWCK Error message.
                                if !(options.dev & options::DEV_DisableBCK)
                                {
                                    mut err = target.qWHAT;

                                    err ~= host_args.len == 2 && target.flags & F_OPERATOR
                                        ?   ": Both operands refer to:\n"
                                        :   ": Arguments " ~ host_args[i0].name.human.qBAD
                                            ~      " and " ~ host_args[i ].name.human.qBAD
                                            ~      " (args #" ~ i0 ~ " and #" ~ i  ~ ") both refer to:\n";

                                    for (shadow mut i = 0; i < inter.uni0n.len; i++)
                                    {
                                        let o = inter.uni0n[i];

                                        err ~=   "\n                ";
                                        err ~= o.qWHAT;
                                    }

                                    fail(err);
                                }
                            }

                            // If we have a mutref, go over all refs.
                            if (expect.is_mutref) {
                                for (mut i = ref_first; i <= ref_last; i++)
                                    if (host_args[i].is_ref)
                                        validate(i);
                            }

                            // Else we only care about mutrefs here.
                            else if (bck_unwound) {
                                for (mut i = mutref_first; i <= mutref_last; i++)
                                    if (host_args[i].is_mutref)
                                        validate(i);
                            }
                        }

                        // Track the two lists.
                        if (expect.is_mutref)
                        {
                            if (mutref_first < 0)
                                mutref_first = i0;

                            mutref_last = i0;
                        }

                        if (ref_first < 0)
                            ref_first = i0;

                        ref_last = i0;
                    }
                }

                for (mut i0 = 0; i0 < args.len; i0++)
                {
                    let host_arg    = host_args[i0];
                    ref arg         = args[i0];

                    //
                    maybeCopyOrMove(
                        arg || fail(), host_arg.type,
                        isArgument: true);

                    if (arg.is_ref)
                    {
                        // The mutref pseudovar trick, helps passing unions into fns,
                        //  which can then return them for further modification -
                        //   without this, a write to `a|b` invalidates both `a` and `b`,
                        //    whilst a write to `c=a|b` allows further writes to `c`.
                        if (host_arg.written_via)
                        {
                            // Again, this solves the `ref a = c; ref b = c; ++++(a || b)` problem:
                            //  We need to have a single lifetime to describe what we're writing to,
                            //   otherwise it just looks like two unions that are not correlated.
                            if (arg.lifetime.uni0n.len > 1)
                            {
                                // We solve the problem by "naming" the lifetime,
                                //  as if there was a ref x = ... that we're passing in instead of this argument,
                                //   allowing the fn to return x's lifetime, instead of the union.
                                let left = Scope_create(_scope,
                                    nest: true, local_of: _current_fn.target.index,
                                    kind: "lifetime", type: arg.type, name: debug);

                                trackLocalRef(:left, arg.type.lifetime);
                                arg.MUT.lifetime.uni0n = [ Region_fromLocalIndex(left.index) ];
                            }

                            // We'll batch all writes together in a bit.
                            arg.is_mutref || fail("Written but not mutref?");
                            host_arg.is_mutref || fail("Not relaxed?");
                            bck_writes.set::add(arg.lifetime.uni0n);
                        }
                        else
                        {
                            trackReadWrite(args[i0]);
                        }
                    }
                }

                if (type.is_ref)
                    type.lifetime = Lifetime_test(
                        Lifetime_replaceArgsAtCallsite(target, args),
                        tempsOK: true);
            }

            // Inliner.
            if (target.kind == "inline")
            {
                let scope0 = Scope_snap(_scope);
                mut ss0 = _ss; //REF2MUTREF
                let helpers0vars = _helpers.last.vars.len;

                defer {
                    Scope_pop(_scope, scope0);
                    _ss = ss0;
                    if (_helpers)
                        _helpers.last.vars.shrink(helpers0vars);
                }

                let template    = target.template;

                ScopeSkip_setup(:template, :scope0, isInline: true);
                _scope.items ~= target.extra_items;

                //
                let n_fn        = template.node;
                let n_body      = n_fn.items.last;
                let ret_expect  = target.type;
                let host_args   = target.args;

                mut result: SolvedNode[];
                host_args.len == args.len || fail("inline: arglen mismatch");
                result.resize(args.len + 1);

                for (mut i = 0; i < args.len; i++)
                {
                    let slot = host_args[i];
                    result[i] = createLet(id: slot.name, init: args[i], // TODO__ORIGINAL_ANNOT_OR_TYPE
                        :slot.flags &~ F_ARG); // As if not an arg.
                }

                let s_body = solveBlock(
                    n_body, type: ret_expect,
                    mask: i16(HM_CanReturn | (n_fn.flags & F_LAMBDA && HM_Lambda)),
                    id: n_fn.value,
                    :kills,
                    steal: _helpers.last.vars.len - helpers0vars);

                result.last = s_body;

                return createBlock(result, :s_body.type);
            }
        }

        //
        let callsite = SolvedNode(
            "call", flags: 0, value: debug,
                    :type, args, :target);

        // BORROWCK /////////////////////////////////////////////////////
        // Track all writes at once, not important for reads,
        //  but tracking args one by one would prevent args-at-risk.
        //
        if (bck_writes)
            trackReadWrite(bck_writes, :callsite.nodeidx, write: target);
        /////////////////////////////////////////////////////////////////

        // Track deps.
        if (target.modid < 0 || target.modid == module.modid)
        {
            ref o = GET_mut(target);

            // Tracking call graph & type annotations.
            if (o.kind == "fn"   ||
                o.kind == "type" ||
                o.kind == "var")
            {
                o.callsites ~= callsite;
                detectRecursion(target, o);
            }
        }

        return callsite;
    }

    fn BORROWCK_resolveByCopyToTemporary(ref node: SolvedNode, slot: Type)
    {
        // Reconstruct a maybe-copyable value type -
        //  slot is a ref which may not need q_rx_copy.
        mut temporary = clear_refs(slot);
        temporary.quals |= node.type.quals & q_rx_copy;

        //
        return maybeCopyOrMove(:node, temporary);
    }

    fn maybeCopyOrMove(ref node: SolvedNode, slot: Type,
        isArgument = false): void
    {
        if (SELF_TEST)
            slot.canon == node.canon || node.is_never || fail(
                "Considering copy or move for incompatible types: "
                    ~ humanizeType(slot) ~ " <- "
                    ~ humanizeType(node));

        // Clear mutrefs unless needed.
        propagateType(:node, :slot);

        // No copy needed when the slot is a reference.
        if (slot.is_ref)
        {
            // TODO move this to codegen
            if (node.type.is_trivial)
            {
                // Except if we're talking a fnarg,
                //  in which case we're better off binding a temporary,
                //   else we risk cache missing on the useless global defval.
                //
                // We only do it for trivial types because
                //  we don't want to add a destructor call here.
                //
                if (node.kind == "definit" && isArgument)
                    node.MUT.type = clear_refs(node.type);
            }

            return;
        }

        // Also, no copy needed when the expression is a value.
        if (!node.type.is_ref)
            return;

        // Definits can just as well emit values.
        if (node.kind == "definit")
        {
            node.MUT.type = clear_refs(node.type);
            return;
        }

        if (!slot.is_rx_copy)
            fail("Needs an explicit STEAL or CLONE: " ~ humanizeType(slot));

        if (!node.type.is_trivial)
        {
            USE_nontriv_autocopy || fail("Non-trivial implicit copy.");
            makeNote(N_NonTrivAutoCopy);
        }

        node = createCopy(node);
    }

    fn createCopy(node: SolvedNode): SolvedNode
    {
        trackReadWrite(node); // call:#copy

        return SolvedNode(
            kind:   "copy",
            items:  [ node ],
            type:   clear_refs(node.type));
    }

    fn createMove(node: SolvedNode, original: Lifetime): SolvedNode
    {
        trackReadWrite(node); // call:#move

        // C++ codegen uses the F_MOVED_FROM flag
        //  to remove `const` annotations on locals & refs to locals.
        //
        Lifetime_F_MOVED_FROM(original);

        return SolvedNode(
            kind:   "move",
            items:  [ node ],
            type:   clear_refs(node.type));
    }


    //

    fn solveNodes(
        nodes: Node[],
        type_all?: Type,
        type_last?!: Type,
        use_type_last?!: bool,
        deadcode_on_never?!: bool,
        as_blocks?!: bool,
        track_reads?!: i32,
        kills?!: i32,
        mode?: u16): SolvedNode[]
    {
        mut result: SolvedNode[];

        ////////////////////
        mut here0   = _here; // TODO BORROWCK danglefix
        defer _here = here0;
        ////////////////////

        for (mut i = 0; i < nodes.len; i++)
        {
            let node = nodes[i];
            if (!node)
                continue;

            // Regular solve.
            mut unorderedClass = unorderedClassify(node.kind);
            if (!unorderedClass)
            {
                HERE(node);

                let type = i == nodes.len - 1 && use_type_last
                    ? type_last
                    : type_all;

                let solved = as_blocks
                    ? solveBlock(:node, :type)
                    : solveNode(:node, :deadcode_on_never, :type,
                        kills: i == nodes.len - 1 && kills, :mode);

                if (i < track_reads)
                    trackReadWrite(solved);

                //
                result ~= solved;

                // Dead code elim.
                if (deadcode_on_never && solved.type.is_never)
                {
                    if (i < nodes.len - 1)
                        makeNote(N_DeadCode);

                    break;
                }

                continue;
            }

            // Unordered solve -
            //  batches multiple potentially recursive declarations,
            //   so we can expose them all in scope prior to solving types.

            // This allows us to have groups of mutually recursive types & functions,
            //  without risking stuff depending on constants & variables
            //   introduced halfway through.
            let i0 = i;
            mut i1 = nodes.len;

            let offset = result.len - i0;

            // First pass, expose stuff in scope
            //  without doing type checking when possible.
            for (shadow mut i = i0; i < nodes.len; i++)
            {
                shadow let node = nodes[i] || fail("solveNodes, prep-a: falsy node");
                if (unorderedClassify(node.kind) != unorderedClass)
                {
                    i1 = i;
                    break;
                }

                HERE(node);
                result ~= unorderedPrep_A(node);
            }

            // Later we'll continue from group end.
            i1 > i0 || fail();
            i = i1 - 1; // <- loop++

            // Second prep pass, limit access to scope
            //  of all newly generated entries to what we have right now.
            //
            for (shadow mut i = i0; i < i1; i++)
            {
                shadow let node = nodes[i] || fail("solveNodes, prep-b: falsy node");
                HERE(node);
                unorderedPrep_B(:node, result[i + offset].target);
            }

            // TODO REMOVE, solve all.
            mut repeat = true;
            while (repeat)
            {
                repeat = false;

                for (shadow mut i = i0; i < i1; i++)
                {
                    shadow let node = nodes[i] || fail("solveNodes, solve: falsy node");
                    HERE(node);

                    // TODO do this while listing exports instead, expect trouble with prelude.
                    mut into = result[i + offset].target; // TODO FIX not mut, just want a val here
                    if (lazySolveStart(into, GET(into)))
                        repeat = true;
                }
            }
        }

        //
        return result;
    }

    // SOLVE END

    // Import prelude / inject builtins.
    if (module.modid)
    {
        // Ensure can't reimport self.
        _scope.imports ~= module.modid;

        // Load prelude.
        _Scope_import__forceCopy(0);
    }
    else
    {
        // Pre-populate prelude with primitive types and such.
        _scope = listGlobals();
    }

    // Solve.
    {
        // println("\n----------------------------\n");

        let root = solveNode(parse);

        _current_fn.out && fail("non-empty _current_fn.");

        // println("TOTAL OVERLOADS " ~ module.fname ~ ": " ~ _scope.overloads.len);

        // Run the thing.
        return SolverOutput(:root,
            scope: Scope_exports(_scope, :module.modid, _field_items),
            notes: _notes);
    }
}
