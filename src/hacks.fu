import fail;
import module;
import helpers;

struct ClosureID
{
    true target: Target;
    revision: u32;
};

fn serialize(using _: ClosureID)
{
    mut result  = "`";

    let modid   = target.modid;
    let globid  = target.globid;
    let locid   = target.locid;

    if (globid <= 0)
        BUG("ClosureID: bad globid");

    result.appendVarint(modid.u32);
    result.appendVarint(revision);
    result.appendVarint(globid.u32);
    result.appendVarint(locid.u32);

    return result;
}

fn tryParseClosureID(id!: string): ClosureID
{
    if (id.len > 3 /* "`0a0".len == 6 */ && id[0] == '`')
    {
        mut   offset = 1;
        defer offset == id.len || BUG(
            "Bad ClosureID: trailing stuff.");

        let modid    = parseVarint(offset, id).i32;
        let revision = parseVarint(offset, id);
        let globid   = parseVarint(offset, id).i32;
        let locid    = parseVarint(offset, id).i32;

        return ClosureID(Target(:modid, :globid, :locid), :revision);
    }

    return [];
}


//

struct NativeQualities
{
    name_start_idx:     i32;


    // We don't see inside functions written in c/c++,
    //  so the next best thing is to support some annotations
    //   that can help us "infer" various useful qualities.

    // Arguments may alias each other, e.g. swap:
    //  tmp <- a; a <- b; b <- tmp;
    //
    // If a and b are the same object, this still works correctly:
    //  tmp <- a; 0 <- 0; a <- tmp;
    //
    MayAlias?:          bool;
};

fn NativeQualities(name: string)
{
    if (name.starts(with: "\n#MayAlias"))
    {
        return NativeQualities(
            name_start_idx:     10,
            MayAlias:           true);
    }

    return [];
}
