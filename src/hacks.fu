import module;

fn ClosureID(using target: Target)
    modid < 0
        ? "`" ~ index ~ "-" ~ -modid
        : throw("Not a local.");

fn tryParseClosureID(id!: string)
{
    if (id[0] == '`')
    {
        mut   offset = 1;
        defer offset == id.len || throw(
            "Bad ClosureID: trailing stuff.");

        let index = helpers::parse10i32(offset, id);
        id[offset++] == '-' || throw(
            "Bad ClosureID: no dash.");

        let modid = -helpers::parse10i32(offset, id);

        return Target(:modid, :index);
    }

    return [];
}


//

struct NativeOpts
{
    name_start_idx:     i32;

    // Opts.
    no_AAR:             bool;
};

fn NativeOpts(name: string)
{
    if (name.starts(with: "\nno_AAR"))
    {
        return NativeOpts(
            name_start_idx: 7,
            no_AAR: true);
    }

    return [];
}
