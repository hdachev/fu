import fail;
import module;
import helpers;

struct ClosureID
{
    target: Target;
    revision: u32;
};

fn serialize(using _: ClosureID)
{
    mut result = "`";

    if (target.modid >= 0 || target.index < 0)
        BUG("ClosureID: target.modid >= 0 || target.index < 0");

    result.append09AV(target.index.u32);
    result ~= "-";
    result.append09AV((-target.modid).u32);
    result ~= "-";
    result.append09AV(revision);

    return result;
}

fn tryParseClosureID(id!: string): ClosureID
{
    if (id.len > 5 /* "`0-0-0".len == 6 */ && id[0] == '`')
    {
        mut   offset = 1;
        defer offset == id.len || BUG("Bad ClosureID: trailing stuff.");
        let index = parse09AV(offset, id).i32;

        id[offset++] == '-' || BUG("Bad ClosureID: no modid-dash.");
        let modid = -parse09AV(offset, id).i32;

        id[offset++] == '-' || BUG("Bad ClosureID: no rev-dash.");
        let revision = parse09AV(offset, id);

        return ClosureID(Target(:modid, :index), :revision);
    }

    return [];
}


//

struct NativeHacks
{
    name_start_idx:     i32;

    // Opts.
    soft_risk:          bool;
};

fn NativeHacks(name: string)
{
    if (name.starts(with: "\nhacks/soft_risk"))
    {
        return NativeHacks(
            name_start_idx:     16,
            soft_risk:          true);
    }

    return [];
}
