import compiler;
import test_utils;


// Run the whole battery & build self.

pub extern fn runTests()
{
    ////////////////////////////////////////////////
    let TESTDIFFS_FILE = fudir::FU_ROOT ~ "testdiff/now.td";
    let implicit mut testdiffs = testdiff::TestDiffs;
    defer:ok file::write(
        TESTDIFFS_FILE, testdiff::serialize(testdiffs));
    ////////////////////////////////////////////////

    ZERO(`
        struct Node { target: int; items?: Node[] }

        noinline fn revSpecFewerArgs(overloads: Node[], args: int[][], root: Node)
        {
            fn cgNode(n: Node) {
                mut src = "";
                for (mut i = 0; i < n.items.len; i++)
                    src ~= cgFn(n.items[i].target);

                return src;
            }

            fn cgFn(target: int) {
                mut src = cgNode(overloads[target]);

                fn foreach(arg: int)
                    src ~= cgNode(overloads[arg]);

                shadow let args = args[target];
                for (mut i = 0; i < args.len; i++)
                    foreach(args[i]);

                return src;
            }

            return cgNode(root);
        }

        fn main() {
            return revSpecFewerArgs(
                [ Node() ], [ [] => int[] ], Node()).len;
        }
    `);

}
