import compiler;
import test_utils;


// Run the whole battery & build self.

pub extern fn runTests()
{
    ////////////////////////////////////////////////
    let TESTDIFFS_FILE = FUDIR ~ "testdiff/now.td";
    let implicit mut testdiffs = testdiff::TestDiffs;
    defer:ok file::write(
        TESTDIFFS_FILE, testdiff::serialize(testdiffs));
    ////////////////////////////////////////////////


    // Solo mode, so you can mute all tests
    //  but what you want to work on -

    /*
    let SOLO            = fn ZERO;

    fn SOLO_muteRest (lax a) {}
    let ZERO            = fn SOLO_muteRest;
    let TODO            = fn SOLO_muteRest;
    let ZERO_SAME       = fn SOLO_muteRest;

    defer:ok throw("\n\n\tDONT COMMIT:\n\n\tSOLO mode is on.\n");
    // */


    // Parallel mode,
    //  comment it out to set breakpoints & such.

    //*
    mut PARZERO_queue: string[][];

    fn PARZERO(src: string[])
        PARZERO_queue ~= src;

    fn PARZERO(src: string)
        PARZERO_queue ~= [ src ];

    defer:ok
    {
        struct TestResult
        {
            error:      string;
            testdiffs:  testdiff::TestDiffs;
        };

        let results = PARZERO_queue.par::map(|test|
        {
            mut error: string;
            let implicit shadow mut testdiffs: testdiff::TestDiffs;

            try
                ZERO(test);
            catch (e)
                error = e;

            continue TestResult(:error, :testdiffs);
        });

        mut error: string;
        for (mut i = 0; i < results.len; i++)
        {
            let result = results[i];
            if (result.error)
                error ~= result.error ~ "\n";
            else
                testdiffs.append(result.testdiffs);
        }

        if (error)
            throw(error);
    }

    shadow let ZERO = fn PARZERO;
    // */


    // Categorizing what doesn't work and why -

    let TODO_borrowck   = fn TODO;
    let TODO_disjoint   = fn TODO;
    let TODO_move       = fn TODO;
    let TODO_unique     = fn TODO;
    let TODO_inline     = fn TODO;
    let TODO_args       = fn TODO;
    let TODO_conv       = fn TODO;
    let TODO_fntype     = fn TODO;
    let TODO_specpat    = fn TODO;
    let TODO_relaxer    = fn TODO;
    let TODO_ambig      = fn TODO;
    let TODO_dead       = fn TODO;

    let TODO_Map        = fn TODO;

    let SKETCH          = fn TODO;


    //

    ZERO(`
        <fail return>
        fn main(): i32 {}               <pass/>
        fn main(): i32 { return 0; }    </fail>
    `);

    ZERO(`
        <fail return>
        fn test(): i32 {}               <pass/>
        fn test(): i32 { return 0; }    </fail>
        fn main() test();
    `);

    ZERO(`
        return 1 - 1;
    `);

    ZERO(`
        return <fail COMPILER BUG or INCORRECT TESTCASE exit code 3>
                        3 <pass/>
                        0 </fail>
    `);

    ZERO(`
        return 0
        <fail COMPILER BUG or INCORRECT TESTCASE exit code>
            || throw("TESTERR")
                 <pass/></fail>
    `);

    ZERO(`
        fn sum(a: i32, b: i32): i32
            a + b;

        return sum(1, -1);
    `);

    ZERO(`
        fn sum(a: i32, b: i32)
            a + b;

        return sum(1, -1);
    `);

    ZERO(`
        fn sign(a: i32)
            a > 0 ? 1 : a < 0 ? -1 : 0;

        return sign(7) + sign(-3) + sign(0);
    `);

    ZERO(`
        fn sign(a: i32) {
            if (a > 0)
                return 1;

            return -2;
        }

        return sign(10) * 2 + sign(-5);
    `);

    ZERO(`
        fn sign(a: i32) {
            if (a > 0)
                return 1;
            else
                return -2;
        }

        return sign(10) * 2 + sign(-5);
    `);

    ZERO(`
        fn main() {
            let  i = -1;
            let sb = i.i8;
            let  b = i.u8;

            return sb == -1 && b == 255 ? 0 : 1;
        }
    `);

    ZERO(`
        fn main() {
            let sb = (-1).i8;
            let  i =  sb.i32;
            let  u =  sb.u32;

            return i == -1 && u.i32 == 255 ? 0 : 1;
        }
    `);

    ZERO(`
        fn main() {
            let b = byte(200);
            let i = b.i32;
            return i == 200 ? 0 : 1;
        }
    `);


    // Mutation & references.

    ZERO(`
        mut arr = [ 0 ];
        return arr[0];
    `);

    ZERO(`
        let a = 3;
        mut b = a;
        b++;
        return b - (a + 1);
    `);

    ZERO(`
        mut sum = 0;
        for (mut i = 0; i < 10; i++)
            sum++;

        return sum * 2 - 20;
    `);

    ZERO(`
        mut sum = 0;
        for (mut i = 10; i --> 0; )
            sum--;

        return sum * 2 + 20;
    `);

    ZERO(`
        fn decr(num: &mut i32)
            num--;

        mut res = 0;
        decr(res);
        return res + 1;
    `);

    ZERO(`
        fn decr(ref num: i32)
            num--;

        mut res = 0;
        decr(res);
        return res + 1;
    `);

    ZERO(`
        mut res = 0;
        fn decr()
            res--;

        decr();
        return res + 1;
    `);

    ZERO(`
        mut res = 0;
        fn decr(num: &mut i32) { num--; } // ret void

        decr(res);
        return res + 1;
    `);

    ZERO(`
        mut sum = 0;
        while (sum < 15)
            sum++;

        return sum - 15;
    `);

    ZERO(`
        <fail ++>
        let sum = 0;        <pass/>
        mut sum = 0;        </fail>
        while (sum < 15)
            sum++;

        return sum - 15;
    `);

    ZERO(`
        mut sum = 0;
        while (sum < 15)
            sum += 2;

        return sum - 16;
    `);

    ZERO(`
        mut i = 5;
        mut sum = 0;
        while (let x = i--) sum += x - i;
        return sum - 5;
    `);

    ZERO(`
        fn named(a: i32, b: i32)
            a - b * 2;

        return named(b: 3, 6);
    `);

    ZERO(`
        fn named(a: i32, b: i32)
            a - b * 2;

        fn other(a: i32, b: i32)
            named(:b, :a);

        return other(b: 3, 6);
    `);

    ZERO(`
        fn ret_only_arg(a) a;
        <split/>
        fn main() 0.ret_only_arg;
    `);


    // Structs & using.

    ZERO(`
        struct Range {
            min: i32;
            max: i32;
        }

        fn size(r: Range)
            r.max - r.min;

        return size(Range(14, 21)) - 7;
    `);

    ZERO(`
        struct Range {
            min: i32;
            max: i32;
        }

        mut r = Range(1, 2);
        r.min++;
        return r.max - r.min;
    `);

    ZERO(`
        struct Range {
            min: i32;
            max: i32;
        }

        <fail ++>
        let r =             <pass/>
        mut r =             </fail>
            Range(1, 2);

        r.min++;
        return r.max - r.min;
    `);

    ZERO(`
        struct Range {
            r_min: i32;
            r_max: i32;
        }

        fn size(using r: Range)
            r_max - r_min;

        return size(Range(14, 21)) - 7;
    `);

    ZERO(`
        struct X {
            a: i32;
        }

        fn test(using x: X, b: i32) a + b;
        fn hey(using x: X) test(-1);

        return X(1).hey;
    `);

    ZERO(`
        struct Pos {
            x: i32;
        }

        struct Player {
            using pos: Pos;
        }

        fn dist(using p: Player, other: Player)
            x - other.x;

        let a = Player(Pos(10));
        let b = Player(Pos( 4));

        return dist(a, b) - 6;
    `);

    ZERO(`
        struct A { x: i32; y: i32; };
        struct B { x: i32; z: i32; };
        fn test(using a: A, using b: B)
            <fail ambig>
            x + z; <pass/>
            y + z; </fail>

        fn main() test(A(1, 1), B(-1, -1));
    `);

    ZERO(`
        struct CurrentFn {
            parent_idx: i32;
            using RoR?: CurrentFn_ResetOnResolve; // not yet populated
        };

        struct CurrentFn_ResetOnResolve {
            ret_count: i32;
        };

        fn test(f: CurrentFn) f.parent_idx - f.ret_count;
        fn main() test(CurrentFn(1, CurrentFn_ResetOnResolve(1)));
    `);

    ZERO(`
        struct HasPredicate {
            true kind   : string;
            items       : i32;
        };

        fn main() {
            let isTrue  = HasPredicate("let", 0);
            let isFalse = HasPredicate("",    1);
            return isTrue && !isFalse ? 0 : 1;
        }
    `);

    ZERO(`
        struct Stuff { name: string };

        fn shadowsStructMember(using stuff: Stuff, other: string) {
            shadow let name = other || name;
            return name;
        }

        fn main() = shadowsStructMember(Stuff("a"), "bb").len - 2;
    `);


    // Templating checks.

    ZERO(`
        let x = 3;
        return x / 2 - 1;
    `);

    ZERO(`
        fn hey(a) a * a;
        fn main = 0.hey;
    `);

    ZERO(`
        fn div3by(a: $T) 3 / a;
        return div3by(2) - 1;
    `);

    ZERO(`
        fn div3by(a) 3 / a;
        return div3by(2) - 1;
    `);

    ZERO(`
        fn add3(a: i32, b = 3) a + b;
        fn main() add3(-3);
    `);

    ZERO(`
        fn add3(a: $T, b = 3) a + b;
        struct v1 { x: i32; };
        fn +(a: v1, b: i32) v1(a.x + b);
        fn main() add3(2.v1).x - 5;
    `);

    ZERO(`
        fn mul_ab_init(a: $T, b = 0) a*b;
        fn main() mul_ab_init(1);
    `);

    ZERO(`
        fn mul_ab_annot_init(a: $T, b: $T = 0) a*b;
        fn main() mul_ab_annot_init(1);
    `);

    ZERO(`
        fn mul_ab_opt(a: $T, b?: $T) a*b;
        fn main() mul_ab_opt(1);
    `);

    ZERO(`
        fn ab(a, b) a + b*2;
        fn main() ab(b: 1, a: -2);
    `);

    ZERO(`
        struct yi32 { y: i32; };
        fn add_s_vy(v, s) s + v.y;
        fn main() add_s_vy(v: yi32(1), -1);
    `);

    ZERO(`
        struct xi32 { x: i32; };
        fn add_s_vx(s, v) s + v.x; // <- args reordered
        fn main() add_s_vx(v: xi32(1), -1);
    `);

    ZERO(`
        fn ab(a, b = 0, c = 0) a + b*2 + c*3;
        fn main() ab(3, c: -1);
    `);

    ZERO(`
        fn ab(a, b = -1) a + b*2;
        fn main() ab(3.0, -1.5).i32;
    `);

    ZERO(`
        let NEG_ONE_FIVE = -1.5;
        fn ab(a: $T, b: $T = -1) a + b*2;
        fn main() ab(3, NEG_ONE_FIVE).i32;
    `);

    ZERO(`
        let TWO = 2.0;
        fn ab(a: $T, b: $T = -1) a + b*2;
        fn main() ab(TWO).i32;
    `);

    ZERO(`
        fn self_rec_template(x: $T): $T                     ;; !N_FnResolve
            x > 0 ? self_rec_template(x / 2 - 5) : x;

        fn main()
            self_rec_template(7) + 2;
    `);

    ZERO(`
        fn ab_rec(a: $T): $T = a ? ba_rec(a - 2) : -100;
        fn ba_rec(a: $T): $T = a ? ab_rec(a - 7) : -200;
        fn main() ab_rec(11) + 200;
    `);

    ZERO(`
        fn main() {
            let a = 1;
            fn add1(b) a + b;
            return 2.add1 - 3;
        }
    `);

    ZERO(`
        pub fn MAP(a: [$T], fn) {               ;; !N_DeadCode
            mut res: fn($T)[];
            res.grow_junk(a.len);
            for (mut i = 0; i < a.len; i++) res[i] = fn(a[i]);
            return res;
        }

        pub fn clone(a: $T)
        case ($T.is::copy) a;
        case ($T -> [$U]) a.MAP(fn clone);
        default {
            mut res: $T;
            for (fieldname i: $T) res.i = a.i.clone();
            return res;
        }

        pub nocopy struct Scope { x: i32; };
        pub struct ModuleOutputs { deps: Scope[]; };

        pub fn test(a: ModuleOutputs) {
            let b = a.clone();
            return a.deps.len - b.deps.len;
        }

        pub fn main() test(ModuleOutputs);
    `);

    ZERO(`
        struct X { a: i32; };
        inline fn add_uxa_b_inline(using x: X, b: i32) a + b;
        fn hey(using x: X) add_uxa_b_inline(-1);
        return X(1).hey;
    `);

    ZERO(`
        struct X { a: i32; };
        fn add_uxa_b_template(using x: X, b /* untyped */) a + b;
        fn hey(using x: X) add_uxa_b_template(-1);
        return X(1).hey;
    `);

    ZERO(`
        fn incr(a) a++;
        fn main() {
            mut a = 1;
            incr: || a;
            return a - 2;
        }
    `);

    ZERO(`
        inline fn inl_lies(x: u32)<fail actual return match annot>: i32<pass/></fail> = x;
        fn main() 0.inl_lies ? 1 : 0;
    `);

    ZERO(`
        fn what(ref x: i32, ref y: i32) {
            <fail bad call swap>
            let z = y;   <pass/>
            ref z = y;   </fail>
            swap(x, z);  // swap is defined(ref x: $T, ref y: $T),
        }                //  we ignore the 'ref' part in type patterns,
                         //   so we only notice later when checking the spec
        fn main() {
            mut a = 1; mut b = 0; what(a, b);
            return a;
        }
    `);

    ZERO(`
        fn any(a, b) a || b;
        fn main() any(0, []);
    `);

    ZERO(`
        fn both(a, b) a && b;
        fn main() both(1, []);
    `);

    ZERO(`
        fn either(a, b) a ? a : b;
        fn main() either(0, []);
    `);


    // Lexical vs dynamically scoped templates -
    //  I guess we want both, but how?
    //   Should we just make it explicit?

    ZERO([
    `
        pub fn identity(dont_leak_me) dont_leak_me;
    `,
    `
        let dont_leak_me = 1;
        fn main() _0::identity(dont_leak_me * 2) - 2;
    `
    ]);

    ZERO(`
        pub inline fn inl_id_leak(dont_leak_me) dont_leak_me;
        let dont_leak_me = 1;
        fn main() inl_id_leak(dont_leak_me * 2) - 2;
    `);

    ZERO(`
        let static = 1;
        fn template(arg) static + arg;
        let arg = 7;                        // <- template shouldn't see this
        let result = template(arg / -4);    // <- when specializing here
        fn main() result;
    `);

    ZERO(`
        fn main() {
            let static = 1;
            fn template(arg) static + arg;
            let arg = 7; // same here, except we're in a fn.
            return template(arg / -4);
        }
    `);

    ZERO([`
        fn template_add(a, b) a + b;
    `,`
        struct HasInt { i: i32 };
        <split/>
        fn +(a: HasInt, b: HasInt) HasInt(a.i + b.i);
        fn main() _0::template_add(HasInt(1), HasInt(2)).i - 3;
    `]);

    TODO_ambig([`
        fn template_add(a, b) a + b;
    `,`
        struct HasInt { i: i32 };
        fn main() {
            infix fn +(a: HasInt, b: HasInt) HasInt(a.i + b.i); // its hard to defend this -
            _0::template_add(HasInt(1), HasInt(2)).i - 3;       //  the thing above works but this doesn't.
        }                                                       //   given the autoshadowing, we might just want to allow everything.
    `]);


    // Recursion, closures & implicit args.

    ZERO(`
        fn inner(i: i32): i32
            i > 0 ? outer(i - 1) : 0;

        fn outer(i: i32): i32
            2 * inner(i);

        return outer(1);
    `);

    ZERO(`
        fn test(one: i32)
        {
            let zero = one - 1;
            let two  = one * 2;

            fn inner(i: i32): i32
                i > zero ? outer(i - one) : zero;

            fn outer(i: i32): i32
                two * inner(i);

            return outer(one) + (two - one) * 17;
        }

        fn main() test(1) - 17;
    `);

    ZERO(`
        fn inner(i: i32): i32
            outer(i - 1);

        fn outer(implicit x: i32, i: i32): i32
            i > 0   ? inner(i)
                    : x + i;

        let implicit x = 7;
        return outer(1) - 7;
    `);

    ZERO(`
        fn inner_noret(i: i32)
            outer_noret(i - 1);

        fn outer_noret(implicit x: i32, i: i32)
            i > 0   ? inner_noret(i)
                    : x + i;

        let implicit x = 7;
        return outer_noret(1) - 7;
    `);

    ZERO(`
        inline fn inner_inl(i: i32): i32
            outer_inl(i - 1);

        fn outer_inl(implicit x: i32, i: i32): i32
            i > 0   ? inner_inl(i)
                    : x + i;

        let implicit x = 7;
        return outer_inl(1) - 7;
    `);

    ZERO(`
        fn inner_templ(i): i32
            outer_templ(i - 1);

        fn outer_templ(implicit x: i32, i): i32
            i > 0   ? inner_templ(i)
                    : x + i;

        let implicit x = 7;
        return outer_templ(1) - 7;
    `);

    ZERO(`
        fn inner_templ_noret(i)
            outer_templ_noret(i - 1);

        fn outer_templ_noret(implicit x: i32, i)
            i > 0   ? inner_templ_noret(i)
                    : x + i;

        let implicit x = 7;
        return outer_templ_noret(1) - 7;
    `);

    ZERO(`
        fn outer(i: i32): i32
            i > 0   ? inner(i)
                    : 2 * i;

        fn inner(implicit x: i32, i: i32): i32
            outer(i - 2 * x);

        let implicit x = 3;
        return outer(6);
    `);

    ZERO(`
        fn has_implicit(implicit i: i32, add: i32): i32
            i + add;

        inline fn injects_implicit_while_inlined(): i32
            has_implicit(1); // broken by no ss.declash

        fn main() {
            let implicit i = 2;
            return injects_implicit_while_inlined() - 3;
        }
    `);

    ZERO(`
        inline fn outer_inl(i: i32): i32
            i > 0   ? inner_inl(i)
                    : 2 * i;

        fn inner_inl(implicit x: i32, i: i32): i32
            outer_inl(i - 2 * x); // broken by no ss.declash

        let implicit x = 3;
        return outer_inl(6);
    `);

    ZERO(`
        fn outer_templ(i): i32
            i > 0   ? inner_templ(i)
                    : 2 * i;

        fn inner_templ(implicit x: i32, i): i32
            outer_templ(i - 2 * x);

        let implicit x = 3;
        return outer_templ(6);
    `);

    ZERO(`
        fn outer(implicit x: i32, i: i32): i32
            i > 0   ? inner(i)
                    : x + i;

        fn inner(i: i32): i32
            outer(i - 1);

        let implicit x = 7;
        return outer(1) - 7;
    `);

    ZERO(`
        fn outer(implicit x: i32, i: i32)
            i > 0   ? inner(i)
                    : x + i;

        fn noret(i: i32) = outer(i);

        fn template(i) = i & 1 ? outer(i) : noret(i);

        fn inner(i: i32): i32
            template(i - 1);

        fn main() {
            let implicit x = 7;
            return outer(1) - 7;
        }
    `);

    ZERO(`
        fn returns_x(implicit x: i32): i32
            = x;

        fn calls_self_1(call_self = false): i32
            = !call_self ? returns_x : calls_self_1 * 2;

        let implicit x = 7;
        return calls_self_1(true) - 14;
    `);

    ZERO(`
        fn returns_x(implicit x: i32): i32
            = x;

        fn calls_self_2(call_self = false): i32
            = call_self ? calls_self_2 * 3 : returns_x;

        let implicit x = 7;
        return calls_self_2(true) - 21;
    `);

    ZERO(`
        fn returns_x(implicit x: i32): i32
            = x;

        fn calls_self_3(call_self = false): i32
        {
            let add = 1; // <- this wasnt visible
            fn do_call_self(mul: i32 = 0)
                = calls_self_3 * mul + add;

            return call_self ? do_call_self(4) : returns_x;
        }

        let implicit x = 7;
        return calls_self_3(true) - 29;
    `);

    ZERO(`
        fn noret_x(implicit x: i32) x;

        fn templ_calls_self_2(call_self): i32
            = call_self ? templ_calls_self_2(false) * 3 : noret_x;

        fn main() {
            let implicit x = 7;
            return templ_calls_self_2(true) - 21;
        }
    `);

    ZERO(`
        struct Range {
            min: i32;
            max: i32;
        }

        fn size(using implicit r: Range)
            max - min;

        fn test()
            size();

        let implicit r = Range(14, 21);

        return test  - 7;
    `);

    ZERO(`
        struct Range {
            min: i32;
            max: i32;
        }

        fn size(using implicit r: Range)
            max - min;

        fn inner()
            size();

        fn outer()
            inner();

        let implicit r = Range(14, 21);

        return outer() - 7;
    `);

    ZERO(`
        fn main() {
            let a = 1;
            let b = 2;
            let c = 3;

            fn depth1(x: i32) {
                fn depth2(y: i32) {
                    return sibling1(x + y + b);
                }

                return depth2(x + a);
            }

            fn sibling1(z: i32): i32 {
                return z + c;
            }

            return depth1(0) - 6;
        }
    `);

    ZERO(`
        fn goto0(x): i32 = x ? goto0(x / 2) : 0;
        fn main() goto0(1);
    `);

    ZERO(`
        fn goto0(x) x ? goto0(x / 2) : 0;
        fn main() goto0(1);
    `);

    ZERO(`
        fn goto0(x) x ? goto0(x / 2) : x; // ideally same as above
        fn main() goto0(1);
    `);

    ZERO(`
        fn goto0(x) x && goto0(x / 2); // ideally same as above [again]
        fn main() goto0(1);
    `);

    ZERO(`
        fn ref_a(ref a: i32) a;

        fn main() {
            mut a: i32;
            ref r = ref_a(a);
            r++;
            return a - 1;
        }
    `);

    ZERO(`
        fn ref_a_or_ref_b(ref a: i32, ref b: i32)
            a || b;

        fn main() {
            mut a: i32;
            mut b: i32;
            ref a_or_b = ref_a_or_ref_b(a, b);
            a_or_b++;
            return b - 1;
        }
    `);

    ZERO(`
        fn impl(implicit ref _impl: i32) _impl;
        fn arg_or_impl(ref arg: i32) arg || impl;
        fn main() {
            implicit mut _impl: i32;
            mut arg: i32;
            ref ref = arg_or_impl(arg);
            return arg - ref;
        }
    `);

    ZERO(`
        fn hello(ref a: i32[], ref b: i32[], x: i32): &mut i32[] {
            if (x == 0) return a;
            if (x == 1) return b;
            return hello(b, a, x / 17);
        }

        fn main() {
            mut a = [1, 2, 3];
            mut b = [4, 5, 6];
            hello(a, b, 397)[1] *= 5;
            return b[1] - 25;
        }
    `);

    ZERO(`
        pub fn ZERO(implicit ref sum: i32, mut x: i32) {
            while (x) {
                ZERO( --x ); // Same as below but without the unused 'y' thing,
                sum += x;    //  everything works because the call to ZERO isnt really unconditional,
            }                //   and if it were, then the never return would actually be correct.
        }

        fn main() {
            implicit mut sum = 0;
            ZERO(4);
            return sum - 11;
        }
    `);

    ZERO(`
        pub fn ZERO(implicit ref sum: i32, mut x: i32) {
            while (x) {
                let y = x / 2;
                ZERO( --x ); // Unconditional self recursion, initially hinted as t_never,
                ZERO(   y ); //  meaning y remains unused here on first solve.
                sum += x;
            }
        }

        fn main() {
            implicit mut sum = 0;
            ZERO(4);
            return sum - 12;
        }
    `);

    ZERO(`
        struct Node {
            items: Node[];
        }

        fn solve(root: Node)
        {
            fn solveBlock(node: Node) {
                let items = solveNodes(node.items);
                //*
                return solveBlock(items);
            }

            fn solveBlock(items: i32[]) {
                //*/
                if (!Lifetime_allowsMutrefReturn(items))
                    throw("Nope!");

                return items;
            }

            fn solveNode(node: Node, implicit ref next: i32) {
                if (!node.items)
                    return [ next++ ];

                let implicit CTX = node.items.len; // <- this shows up as an closure-arg with an outdated revision
                return solveBlock(node);
            }

            fn Lifetime_each(items, visit)
                for (mut i = items.len; i --> 0; )
                    visit(items[i]);

            fn Lifetime_allowsMutrefReturn(items: i32[]) {
                Lifetime_each(:items, visit: |item, implicit CTX: i32| {
                    if (item == CTX)
                        return false;
                });

                return true;
            }

            fn solveNodes(nodes: Node[]) {
                mut result: i32[];
                for (mut i = 0; i < nodes.len; i++)
                    result ~= solveNode(nodes[i]);

                return result;
            }

            return solveNode(root);
        }

        fn main() {
            implicit mut next = 0;

            let solve = solve(Node([
                Node([ Node ]),
                Node(),
            ]));

            return solve.len - 2;
        }
    `);

    ZERO(`
        fn woot(implicit x: i32) = x;

        fn main() {
            <fail no implicit x>
            <pass/>
            let implicit x = 2;
            </fail>
            return woot() - 2;
        }
    `);

    ZERO(`
        <fail no implicit y>
        fn woot(implicit y: i32) = y;
        <pass/>
        fn woot(implicit x: i32) = x;
        </fail>

        fn hey() {
            let implicit x = 2;
            return woot() - 2;
        }

        let here = hey();
        fn main() = here;
    `);

    ZERO(`
        fn main() {
            mut x = +1;
            mut y: x = -x;
            return x + y;
        }
    `);

    ZERO(`
        ;; N_UnusedImplicit
        fn dont_inject_my_implicit_args(implicit unused_implicit_arg: i32) {
            return unused_implicit_arg;
        }

        fn not_extern() {
            mut x: dont_inject_my_implicit_args = 2;
            return x;
        }

        fn not_extern(mut x: dont_inject_my_implicit_args) {
            return x;
        }

        fn main() {
            return not_extern() + not_extern(-2);
        }
    `);

    ZERO(`
        fn mustwarn_unused_implicit(implicit forgot_to_use: i32, ref x: i32) {
            <fail unused forgot_to_use>
            x *= 3;             <pass/>
            x *= forgot_to_use; </fail>
        }

        fn main() {
            mut x = 7;
            implicit forgot_to_use = 3;
            mustwarn_unused_implicit(x);
            return x == forgot_to_use * 7 ? 0 : 1;
        }
    `);


    //

    ZERO(`
        let x = 1;

        fn test(): &i32
            x;

        return test - 1;
    `);

    ZERO(`
        let a = 1;
        let x: &i32 = a;

        return a - x;
    `);

    ZERO(`
        struct Test {
            x: &i32;
        }

        let a = 1;
        let test = Test(a);

        return test.x - 1;
    `);

    ZERO(`
        mut a = 0;
        mut b = a;
        b++;
        let c = a = b;

        return a - c;
    `);


    // Arrays.

    ZERO(`
        mut arr = [0, 1, 2, 3, 4];
        arr.push(5);

        fn test(view: &i32[]): i32 {
            mut sum = 0;
            for (mut i = 0; i < view.len; i++)
                sum += view[i];

            return sum - 15;
        }

        return test(arr);
    `);

    ZERO(`
        mut arr: i32[] = [1, 2, 3, 4];
        arr.push(5);

        fn test(view: &i32[]): i32 {
            mut sum = 0;
            for (mut i = 0; i < view.len; i++)
                sum += view[i];

            return sum - 15;
        }

        return test(arr);
    `);

    ZERO(`
        let x = 5;
        mut arr = [ -5 ];
        arr.push(x);
        return arr[0] + arr[1];
    `);

    ZERO(`
        <fail name>
        let x = [ named: 0 ]; <pass/>
        let x = [        0 ]; </fail>
        return x[0];
    `);

    ZERO(`
        mut other: i32[][];
        mut arr:   i32[][];
        for (mut i = 4; i --> 0; )
        {
            arr.resize(i);

            // fill up with non small vecs so we can check alloc counts
            for (shadow mut i = 0; i < arr.len; i++)
                arr[i] ||= [ i, i, i, i, i, i, i, i ]; // defeat small vec

            // now this convers the "Last chance to do nothing" opti -
            //  noop resize a shared vec.
            other = arr;
            arr.resize(other.len || i);
        }
        return other.len;
    `);


    // A basic testing setup for array ops,
    //  that can be flipped around for making sure
    //   e.g. copy-on-write behaves as expected.

    fn ARROPS(
        literal: string,
        operation: string,
        mut assertion: string)
    {
        assertion = "(" ~ assertion ~ ")";

        fn EXPR(varname: string)
            assertion.replace(
                all: "@", with: varname);

        mut src: string;

        src ~= "\n";
        src ~= "\n    {";
        src ~= "\n        mut arr0 = [" ~ literal ~ "];";
        src ~= "\n        arr0." ~ operation ~ ";";
        src ~= "\n        if (" ~ EXPR("arr0") ~ " != 0) return 13;";
        src ~= "\n    }";
        src ~= "\n";
        src ~= "\n    mut orig = [" ~ literal ~ "];";
        src ~= "\n";
        src ~= "\n    {";
        src ~= "\n        mut arr1 = orig;";
        src ~= "\n        arr1." ~ operation ~ ";";
        src ~= "\n        if (" ~ EXPR("arr1") ~ " != 0) return 17;";
        src ~= "\n    }";
        src ~= "\n";
        src ~= "\n    {";
        src ~= "\n        ref arr2 = orig;";
        src ~= "\n        if (arr2.len != 5) return 38;";
        src ~= "\n        arr2." ~ operation ~ ";";
        src ~= "\n        if (" ~ EXPR("arr2") ~ " != 0) return 23;";
        src ~= "\n    }";
        src ~= "\n";
        src ~= "\n    return 0;";
        src ~= "\n";

        ZERO(src);
    };

    ARROPS( "0,1,2,3,4",
            "push(5)",
            "@[1] + @[4] - @[5]");

    ARROPS( "0,1,2,3,4",
            "insert(5, 5)",
            "@[1] + @[4] - @[5]");

    ARROPS( "0,1,2,3,4",
            "pop()",
            "@[1] + @[3] - @.len");

    ARROPS( "0,1,2,3,4",
            "splice(4, 1)",
            "@[1] + @[3] - @.len");

    ARROPS( "0,1,2,3,4",
            "unshift(5)",
            "@[2] + @[5] - @[0]");

    ARROPS( "0,1,2,3,4",
            "insert(0, 5)",
            "@[2] + @[5] - @[0]");

    ARROPS( "0,1,2,3,4",
            "shift()",
            "@[0] + @[2] - @[3]");

    ARROPS( "0,1,2,3,4",
            "insert(1, 5)",
            "@[2] + @[5] - @[1]");

    ARROPS( "0,1,2,3,100",
            "splice(1, 3)",
            "@.len + @[0] + @[1] - 102");


    //

    ZERO(`
        let OPERATORS = [ "+", "-", "*", "/" ];

        fn main()
            OPERATORS[2] == "*" ? 0 : 1;
    `);

    ZERO(`
        struct Y { b: bool; }
        struct X { y: Y[]; }

        mut x: X[];
        x.push( X([ Y(true) ]) );

        return x.len + x[0].y.len * 2 - 3;
    `);

    ZERO(`
        struct SelfRec { x: SelfRec[]; };
        fn main() SelfRec( [ SelfRec() ] ).x.len - 1; // <- solved with a dirty selfrec & defctor
    `);

    ZERO(`
        struct ABRec { x: BARec[]; };
        struct BARec { x: ABRec[]; };
        fn main() ABRec( [ BARec() ] ).x.len - 1; // <- solved with a dirty selfrec & defctor
    `);

    ZERO(`
        struct ABRec { x: BARec[]; y: ABBARec[]; };
        struct BARec { x: ABRec[]; y: ABBARec[]; };
        struct ABBARec { x: ABRec[]; y: BARec[]; };
        fn main() ABRec( [ BARec() ], [ ABBARec() ] ).x.len - 1; // <- solved with a dirty selfrec & defctor
    `);

    ZERO(`
        mut a = [7, 1, 5, 3, 99, -13]; // [-13, 1, 3, 5, 7, 99]
        a.sort();
        return a[0] + a[1] + a[3] + a[4];
    `);

    ZERO(`
        let a = [0, 1, 2, 3];
        let b = a.slice(1, 3);
        return b.len - b[1];
    `);

    ZERO(`
        let a = [0, 1, 2, 3];
        let b = a.slice(1);
        return b.len - b[2];
    `);

    ZERO(`
        fn collectDedupes(mut vals<alt>: i32[]</alt>) {
            vals.sort();
            return vals[0];
        }

        fn main() {
            let vals = [ 1, 0 ];
            return collectDedupes(vals);
        }
    `);

    ZERO(`
        fn sort01(ref arr: [$T]) {
            mut tmp: $T;
            if (arr[0] > arr[1]) {
                swap(arr[0], tmp);
                swap(arr[1], tmp);
            }
        }

        fn collectDedupes(mut vals) {
            vals.sort01();
            return vals[0];
        }

        fn main() {
            let vals = [ 1, 0 ];
            return collectDedupes(vals);
        }
    `);


    // Strings.

    ZERO(`
        mut str = "hello ";
        str ~= "world";

        return str.len - 11;
    `);

    ZERO(`
        let str = "hello " ~ "world";

        return str.starts(with: "hel")
             ? str  .ends(with: "rld")
             ? str.len - 11
             : 171
             : 173;
    `);

    ZERO(`
        let str = "a" ~ 1710010;

        return str == "a1710010"
             ? 0 : 101;
    `);

    ZERO(`
        let str = "hello world";
        mut cpy = "";
        for (mut i = 0; i < str.len; i++)
            cpy ~= str[i];

        return (cpy.len - 11) + (cpy == str ? 0 : 1);
    `);

    ZERO(`
        return "hello world".find("world")
             - 2 * [1, 7, 13, 14, 19].find(14);
    `);

    ZERO(`
        return ("hello world".has("world") ? 1 : 0)
             + ([1, 14, 96, 2].has(14)     ? 2 : 0)
             - 3;
    `);

    ZERO(`
        let hw = "hello world!";
        let a = hw.slice(6, 6 + 5);
        let b = hw.substr(6, 5);
        return a == b && a == "world" ? a.len - 5 : 1;
    `);

    ZERO(`
        let tests =
        [
            "",
            " ",
            "  ",
            "hey you duders",
            " hey you duders",
            "hey you duders ",
            "  hey you duders ",
            "  hey you  duders ",
            "  hey you  duders  "
        ];

        fn test(item: string)
            item == item.split(" ").join(" ")
                ? 0
                : item.len;

        mut sum = 0;
        for (mut i = 0; i < tests.len; i++)
            sum += test(tests[i]);

        return sum;
    `);

    ZERO(`
        fn main() {
            let sj = "heelloo"  .split("ee").join("e")
                                .split('o').join("o!")
                                .split("he").join();

            return sj == "llo!o!" ? 0 : 1;
        }
    `);

    ZERO(`
        fn main() '\\e'.i32 - 27
             ||   '\\0'.i32
             || '\\x11'.i32 - 17
             || '\\xaA'.i32 - 170;
    `);

    ZERO(`
        fn main()                           <fail invalid code point>
            "\\u{ffffff}".u32               <pass/>
            "\\u{042e}" == "Ю"  ? 0 : 1     </fail>
            ;
    `);


    // String opti checkers.

    ZERO(`
        let strA = "0123456789abcdef0123456789ABCDEF";

        fn main()
        {
            let a0 = mem::ALLOC_STAT_COUNT();
            strA.slice(0, 26) == "0123456789abcdef0123456789" || throw("bad slice");

            let a1 = mem::ALLOC_STAT_COUNT();
            a0 == a1 || throw("did alloc");

            return 0;
        }
    `);

    ZERO(`
        let strA = "0123456789abcdef0123456789ABCDEF";

        fn main()
            strA.slice(26, 32) == "ABCDEF"
                ? 0 : 1;
    `);


    // Maps.

    TODO_Map(`
        mut x: Map(string, i32);

        x["hello"] = 1;
        x["world"] = 2;

        return x["hello"] - x["world"] + 1;
    `);

    TODO_Map(`
        mut x: Map(string, i32);

        x["hello"] = 1;
        x["world"] = 2;

        let b = "hello world";
        mut offset = 0;

        fn pop(): string {
            mut a = "";

            while (offset < b.len) {
                let c = b[offset++];
                if (c == ' ')
                    break;

                a ~= c;
            }

            return a;
        }

        return x[pop()] - x[pop()] + 1;
    `);


    // Default arguments.

    ZERO(`
        fn test(a = 1, b = 2) a + b;
        return test() - 3;
    `);

    ZERO(`
        fn test(a = 1, b = 2) a + b;
        return test(b: -1);
    `);

    ZERO(`
        fn test(a = 1, b = 2) a + b;
        return test(-2);
    `);

    ZERO(`
        struct Test { a?: i32; b?: i32; }
        let t = Test(1);
        return t.a - 1 + t.b * 7;
    `);

    ZERO(`
        struct Test { a?: i32; b?: i32; }
        let t = Test(1);
        return t.b;
    `);

    ZERO(`
        struct Test { a?: i32; b?: i32; }
        let t = Test(a: 1);
        return t.a - 1 + t.b * 7;
    `);

    ZERO(`
        struct Test { a?: i32; b?: i32; }
        let t = Test(b: 1);
        return t.b - 1 + t.a * 7;
    `);

    ZERO(`
        struct Test { x?: i32; };
        fn hey() Test();
        return hey.x;
    `);

    ZERO(`
        struct Test { x?: i32; };
        fn hey(y: i32 = 0)
            y   ? Test(1)
                : Test();

        return hey.x;
    `);

    ZERO(`
        <fail bad call>
        fn test(a = "hello") a.len;     <pass/>
        fn test(a = 0) a + 1;           </fail>
        fn main() test(-1);
    `);

    TODO_args(`
        fn test(a = 3, b = a * 2) a + b;
        fn main() test + test(a: -1) * 3;
    `);

    TODO_args(`
        fn woot(ref a: i32, ref b: i32) {
            ref c = a || b;
            fn arg_defaulted_to_closure(ref x = c)
                x *= 2;

            arg_defaulted_to_closure( );
            arg_defaulted_to_closure(a);
            arg_defaulted_to_closure(b);
        }

        fn main() {
            mut a = 1;
            mut b = 1;
            woot(a, b);
            return a * 10 + b - 42;
        }
    `);

    TODO_args(`
        fn test(ref a: i32, mut incr: i32) {
            fn woot(ref x, ref b = a) { // 'a' closes over here!
                if (x & 1) {
                    x /= 2;
                    return test(x, b);
                }
                return b += x;
            }

            return woot(incr<alt>, a</alt>);
        }

        fn main() {
            mut x = 10;
            return test(x, 5) - 12;
        }
    `);

    ZERO(`
        struct Arg { name: string };
        fn main() {
            let arg = Arg(<fail argument name id>id<pass/>name</fail>: "hey");
            return arg.name.len - 3;
        }
    `);


    // Truth tests.

    ZERO(`
        let s = 7;
        return s ? 0 : 1;
    `);

    ZERO(`
        let s = 0;
        return s ? 1 : 0;
    `);

    ZERO(`
        let s = "hello";
        return s ? 0 : 1;
    `);

    ZERO(`
        let s = "";
        return s ? 1 : 0;
    `);

    ZERO(`
        let s = [ 4 ];
        return s ? 0 : 1;
    `);

    ZERO(`
        mut s = [ 4 ];
        s.pop();
        return s ? 1 : 0;
    `);

    ZERO(`
        struct S { x: i32; }
        let s: S = S(1);
        return s ? 0 : 1;
    `);

    ZERO(`
        struct S { x: i32; }
        let s: S;
        return s ? 1 : 0;
    `);


    // Loop labels.

    ZERO(`
        mut sum = 0;
        :OUTER for (mut y = 1; y < 10; y++)
        {
            sum += y * 10; // 10, 20
            for (mut x = 1; x < 10; x++)
            {
                sum += x; // 1, 1, 2
                if (y == 1) continue :OUTER;
                if (x == 2) break    :OUTER;
            }
        }

        return sum - 34;
    `);

    ZERO(`
        mut sum = 0;
        :OUTER for (mut x = 0;; x++) {
            for (mut y = 0; y < x; y++) {
                if (y & 1 && !(x & 1))
                    continue :OUTER;

                sum += x;
            }

            sum += x * 1000 + 100;
            if (x > 1) ;; EXPECT break;
                break; // anon
        }

        // x=0:           + 0100
        // x=1: 1         + 1100
        // x=2: 2
        // x=3: 3 + 3 + 3 + 3100 break
        return sum - 4312;
    `);

    ZERO(`
        fn test(ref sum: i32) {
            :FIRST {
                if (sum & 1)
                    break:
                        FIRST;
                sum++;
            }
            :SECOND {
                if (sum & 1)
                    break:
                        <fail label>
                        FIRST;      <pass/>
                        SECOND;     </fail>
                sum++;

                if (sum & 2)
                    break:
                        SECOND;
                sum++;
            }
        }

        fn main() {
            mut sum = 0;
            test(sum);
            return sum - 1;
        }
    `);


    // Logic and selectors.

    ZERO(`
        let x = "hello";
        let y = "world";
        let w = x || y;

        return w == "hello" ? 0 : 1;
    `);

    ZERO(`
        let x = "hello";
        let y = "world";
        let w = x && y;

        return w == "world" ? 0 : 1;
    `);

    ZERO(`
        let x = "hello";
        let y = "world";
        let w = 3 && x || y;

        return w == "hello" ? 0 : 1;
    `);

    ZERO(`
        let x = "hello";
        let y = "world";
        let arr: i32[];
        let w = arr && x || y;

        return w == "world" ? 0 : 1;
    `);

    ZERO(`
        let x = "hello";
        let y = "world";
        let arr: i32[];
        let w = arr && x || y || throw("Nope.");

        return w == "world" ? 0 : 1;
    `);

    ZERO(`
        fn what(a: i32) {
            a == 2 || a & 1 || throw("what1");
            a  > 1 && a & 1 && throw("what2");
            a  > 0 && a & 3 || throw("what3");
            return a + 4;
        }
        fn main() 1.what - 2.what + 1;
    `);

    ZERO(`
        fn gen(len: i32) {
            mut res: i32[];
            for (mut i = 0; i < len; i++) res ~= i;
            return res;
        }
        fn test(len: i32) {
            let x = [-5, +5];
            let y = len.gen && x;
            return x[y.len / 2];
        }
        fn main() 0.test + 1.test;
    `);

    ZERO(`
        fn is_mutref(t: string)     t.len == 6;
        fn is_never(t: string)      t.len == 5;

        fn test(ref init: string, ref annot: string)
            init.is_mutref && annot ||
            init.is_never  && annot || throw("noreturn");

        fn main() {
            mut annot = "hey!";
            mut init = "woot!";
            return test(:init, :annot).len - 4;
        }
    `);

    ZERO(`
        fn test(mut init: string) {
            init.len && init || throw("noreturn");
            return init.len;
        }

        fn main() test("woot!") - 5;
    `);

    ZERO(`
        fn is_mutref(t: string)     t.len == 6;
        fn is_never(t: string)      t.len == 5;
        let F_ARG = 1;

        fn test(ref init: string, ref annot: string, mut flags: i32) {
            init.is_mutref  || init.is_never  && annot
                            || !init && flags & F_ARG
                            || throw("noreturn");
            return flags;
        }

        fn main() {
            mut annot = "hey!";
            mut init = "woot!";
            return test(:init, :annot, 0);
        }
    `);

    ZERO(`
        fn a(a)  a ?  a : [];   // ifs used cons-type to seed alt-type
        fn b(b) !b ? [] : b;    //  which works for 'a', but not for 'b'.
        fn main() 1.a - 1.b;
    `);

    ZERO(`
        struct Type { i: i32 };
        fn is_mutref (t: Type) !!(t.i & 3);
        fn is_ref    (t: Type) !!(t.i & 1);
        fn clear_refs(t: Type) Type(t.i &~ 3);

        fn tryClearRefs(t: Type, mutref?: bool): Type =     // type-hints vs type-assertions:
            (mutref ? t.is_mutref : t.is_ref)               //  solveBlocks used within '&&' and '?'
                && clear_refs(t);                           //   so the '?' complained 'bool' doesnt assign to 'Type'

        fn main() {
            let a = tryClearRefs(Type(6), true);
            let b = tryClearRefs(Type(6), false);
            return a.i + b.i - 4;
        }
    `);

    ZERO(`
        fn ambig_or(x: i32, y: f32)
            "Hello: " ~
                <fail ambig operand non bool context>       // So it happened that at some point I had an 'a || b'
                    (x || y)                  <pass/>       //  where a and b were of the same type used in string concat like this,
                    (x || y.i32)              </fail>       //   and then later when the types no longer matched this fell back silently to a '!!a || !!b'
                ;                                           //    which was is not the intent but compiled fine because str concat also accepts bool.

        fn main() {
            mut res = ambig_or(1, 2);
            return res == "Hello: 1" ? 0 : 1;
        }
    `);

    ZERO(`
        fn unambig_or(b: bool, i: i32, f: f32)  <alt>
            b || i || f;                        <alt/>      // But currently the thinking is that so long as one operand is a bool
            i || f || b;                        </alt>      //  the whole thing should weaken to (!!a || !!b) instead of erroring out.

        fn main() = unambig_or(false, 0, 0).i32;
    `);

    // /Logic and selectors.


    // Short-circuit assignment, esp. useful for maps
    //  and the cpp `map[k] = v`,
    //   which doesn't decompose safely.

    ZERO(`
        mut i = 7;
        i ||= 11;
        return i - 7;
    `);

    ZERO(`
        mut i = 0;
        i ||= 11;
        return i - 11;
    `);

    ZERO(`
        mut a = 1;
        mut b = 0;
        a ||= ++b;
        return  b;
    `);

    ZERO(`
        mut CHANGE = false;
        CHANGE ||= true;
        return CHANGE.i32 - 1;
    `);

    TODO_Map(`
        mut m: Map(string, string);
        mut g = 0;

        m["hello"] = "world";
        fn f() {
            g++;
            return "cruel world";
        }

        m["hello"] ||= f();
        return g;
    `);

    TODO_Map(`
        mut m: Map(string, string);
        mut g = 0;

        m["_not_hello_"] = "world";
        fn f() {
            g++;
            return "cruel world";
        }

        m["hello"] ||= f();
        return g - 1;
    `);

    ZERO(`
        fn and_incr(ref x: i32, v: i32)
            x &&= x + v;

        fn main() {
            mut x: i32 = 0;
            and_incr(x, 10);
            return x;
        }
    `);


    // Lints.

    ZERO(`
        struct Test { x: i32; }
        fn test(t: &mut Test) t.x++;
        mut t = Test();
        <fail orphan>
        t.test;             <pass/>
        t.test();           </fail>
        return t.x - 1;
    `);

    ZERO(`
        {
            {
                return 0;
            }
        }
    `);

    ZERO(`
        {
        <fail block>
        {
            return 0;
        }
        <pass/>
            {
                return 0;
            }
        </fail>
        }
    `);

    ZERO(`
        {
            return 0;
        }
    `);

    ZERO(`
        {
            return 0;
        <fail block>
       }
        <pass/>
        }
        </fail>
    `);

    ZERO(`
        {
            return 0;
        <fail block>
         }
        <pass/>
        }
        </fail>
    `);

    ZERO(`
        let y = [ 1 ];              ;; TODO fu::slate<1, int> y
        let <fail unused><pass/>lax</fail>
            z = [ 2 ];              ;; TODO fu::slate<1, int> z

        return y[0] - 1
    `);

    ZERO(`
        fn fail(a: string) throw("hey: " ~ a);
        fn hello(a: string,
            <fail unused><pass/>lax</fail>
            b: string)
                a && fail(a) ? b : a;

        fn main() hello("", "nope").len;
    `);

    ZERO(`
        fn incr(ref x: i32) x++;
        fn lints_ambig_expr_indent(ref a: i32, ref b: i32) {
            return a.incr
            <fail indent>
            +
            <pass/>
              +
            </fail>
                b.incr;
        }

        fn main() {
            mut a = 0; mut b = 0;
            lints_ambig_expr_indent(a, b);
            return a - b;
        }
    `);

    ZERO(`
        fn lints_ambig_jump_semis(mut x: i32) {
            <fail indent>
            return
            x;
            <pass/>
            return x;
            </fail>
        }

        fn main() 0.lints_ambig_jump_semis;
    `);

    ZERO(`
        fn incr(ref a: i32) ++a;
        fn A(ref a: i32) a || <fail parenthes left side>
                              a = A(incr(a));    <pass/> // Lint should complain here,
                             (a = A(incr(a)));   </fail> //  this was an honest mistake.

        fn main() { mut v = 0; return A(v) - 1; }
    `);

    ZERO(`
        fn test(is_mutref: bool, args: i32[], ref sum: i32) {
            <fail indent else>
            if (is_mutref)
                for (mut i = 0; i < args.len; i++)
                    if (args[i] & 1)
                        sum += args[i];
            <pass/>
            if (is_mutref) {
                for (mut i = 0; i < args.len; i++)
                    if (args[i] & 1)
                        sum += args[i];
            }
            </fail>
            else
                for (mut i = 0; i < args.len; i++)
                    if (args[i] & 2)
                        sum += args[i];
        }

        fn main() {
            mut sum = 0;
            test(true , [ 1,  2,  3  ], sum);
            test(false, [ 11, 22, 33 ], sum);
            return sum - 1 - 3 - 11 - 22;
        }
    `);

    ZERO(`
        //
        // The -1.abs problem.
        //
        // Ruby lexes the minus into the numeric literal.
        //  This is kinda inconsistent, altough it does make sense.
        //
        // Rust & all c-likes lex to -abs(1).
        //  Rust linters warn about this.
        //
        // One thing we can do is change the precedence of some unaries
        //  to above method call - others, like ! benefit from usual precedence.
        //   In my experience, the unary * op in c/cpp always disappoints re: precedence,
        //    but the & op usually works the way you want it to.
        //     So introducing more precedence rules is a really questionable idea.
        //
        // We'll go the rust way for starters,
        //  this will be a compile time error for now.
        //
        fn test()   <fail parenthes explicit>
            -1.0    <pass/>
            (-1.0)  </fail>
                .abs;

        fn main() test ? 0 : 7;
    `);

    ZERO(`
        fn id(x) = x;
        fn main() {
            return id(
                0 +
            <fail ambig indent>
               0  <pass/>
                0 </fail>
            );
        }
    `);


    // Borrow checker.

    ZERO(`
        fn test(ref a: i32, ref b: i32) {
            return (++a) + 10 * (++b);              ;; N_BckMustSeq
        }

        fn main() {                                 ;; N_BckSoftRisk
            mut x = 0;
        <alt>
            let z = test(x, x);
        <alt/>
            ref y = x;
            let z = test(x, y);
        </alt>
            return x == 2 && z == 21 ? 0 : 1;
        }
    `);

    ZERO(`
        pub fn test_inner(ref a: i32, ref b: i32)
            (++a) + 10 * (++b);                     ;; N_BckMustSeq

        pub fn test_outer(ref a: i32, ref b: i32)
            test_inner(a, b);

        fn main() {                                 ;; N_BckSoftRisk
            mut x = 0;
        <alt>
            let z = test_outer(x, x);
        <alt/>
            ref y = x;
            let z = test_outer(x, y);
        </alt>
            return x == 2 && z == 21 ? 0 : 1;
        }
    `);

    ZERO(`
        fn test(ref a: i32[]) {
            ref b = a[0];
            if (a.len & 1) {
                <fail invalidate 9:13 6:19>
                a ~= 1; // Invalidates 'b'.
                <pass/>
                b++;
                </fail>
            }
            b++;
        }

        fn main() {
            mut arr = [ 1 ]; test(arr);
            mut sum = 0;
            for (mut i = 0; i < arr.len; i++) sum += arr[i];
            return sum - 3;
        }
    `);

    ZERO(`
        nocopy struct nci32 { i: i32; };

        fn test(ref a: nci32, b: nci32) a.i++ || b.i;
        fn main() {
            mut x = nci32(0);
            <fail arguments b and a both alias var x>
            ref y = x;                        <pass/>
            let y = nci32(0);                 </fail>

            return test(x, y);
        }
    `);

    ZERO(`
        fn test(ref a: i32[]) {
            ref b = a[0];
            if (a.len & 1) { // Lets be extra sure here.
                <fail invalidate 7:17 6:19>
                a ~= 1; // Invalidates 'b'.
                b++;
                <pass/>
                b++;
                a ~= 1;
                </fail>
            }
        }

        fn main() {
            mut arr = [ 1 ]; test(arr);
            mut sum = 0;
            for (mut i = 0; i < arr.len; i++) sum += arr[i];
            return sum - 3;
        }
    `);

    ZERO(`
        fn test(ref a: i32[]) {
            ref b = a[0];
            for (mut i = 2; i --> 0; )
            {
                b++; // Same thing but reordered as a loop.
                if (a.len & 3) {
                    <fail inval next iter 9:23 6:17>
                    a ~= 1; // Invalidates 'b'.
                    <pass/>
                    b++;
                    </fail>
                }
            }
            a ~= 100; // Invalidates 'b' but that's fine!
        }

        fn main() {
            mut arr = [ 1 ]; test(arr);
            mut sum = 0;
            for (mut i = 0; i < arr.len; i++) sum += arr[i];
            return sum - 105;
        }
    `);

    ZERO(`
        fn test(ref a: i32[]) {
            ref b = a[0];
            for (mut i = 2; i --> 0; )
            {
                if (i & 1) {
                    b += 2; // Same thing but reordered as a loop.
                }
                else {
                    <fail inval next iter 11:23 7:21>
                    a ~= 1; // Invalidates 'b', same as a above, but now in an if/else -
                    <pass/> //  got the used-in-a-loop stuff wrong when switching to cant_invalidate.
                    b += 3;
                    </fail>
                }
            }
            a ~= 100; // Invalidates 'b' but that's fine!
        }

        fn main() {
            mut arr = [ 1 ]; test(arr);
            mut sum = 0;
            for (mut i = 0; i < arr.len; i++) sum += arr[i];
            return sum - 106;
        }
    `);

    ZERO(`
        // both args alias, but there's no risk of inval.
        fn incr_a_or_b(ref a: i32, ref b: i32)
            (a || b)++;

        fn main() {
            mut Z = 0;
            mut A = 1;
            mut B = 0;

            incr_a_or_b(Z, B); // incr B, now 1
            incr_a_or_b(A, B); // incr A, now 2
            incr_a_or_b(B, B); // incr _target, now 2 // alias!

            return (100*A + B) - 202;
        }
    `);

    ZERO(`
        struct V { v: i32; };

        fn main() {
            mut A: V = [ 1 ];
            ref a = A.v;
            ref b = A.v;
            ref c = a || b;
            return ++++c - 3; // double mutation of a union
        }
    `);

    ZERO(`
        struct V { v: i32; };

        fn main() {
            mut A: V = [ 1 ];
            ref a = A.v;
            ref b = A.v;
            return ++++(a || b) - 3; // same, without a helper var
        }
    `);

    ZERO(`
        struct V { v: i32; w?: i32; ww?: i32; };

        fn main() {
            mut A: V = [ 1 ];
            mut B: V = [ 1 ];

            <fail invalidate 20:20 18:15>
            ref aa = A.v || A.w; <pass/>
            fn  aa = A.v || A.w; </fail>

            ref bb = B.v || B.w;
            ++++bb;

            ref a = A.v || A.ww;
            ref b = B.v || B.ww;

            ref c = a || b;
            ++++c;

            return aa - 3; // same, without a helper var
        }
    `);

    ZERO(`
        // a can alias b
        // c can alias d
        pub fn ab_cd (ref a: i32, ref b: i32, ref c: i32, ref d: i32) {
            ref ab = a || b;
            ref cd = c || d;
            ++++ab;
            ++++cd;
        }

        fn main() {
            mut ab = 0;
            mut cd = 0;

            <fail alias>
            ab_cd(ab, cd, ab, cd); <pass/>
            ab_cd(ab, ab, cd, cd); </fail>

            return ab - cd;
        }
    `);

    ZERO(`
        struct X { i: i32; j: i32; };
        // a can alias b
        // c can alias d
        pub fn ab_cd_defer(ref a: X, ref b: X, ref c: X, ref d: X, j?: bool) {
            ref ab = a || b;
            defer {
                ref abi = j ? ab.j : ab.i;
                ++++abi;
            }
            ref cd = c || d;
            ref cdi = j ? cd.j : cd.i;
            ++++cdi;
        }

        fn main() {
            mut ab = X(0, 0);
            mut cd = X(0, 0);

            <fail alias>
            ab_cd_defer(ab, cd, ab, cd); <pass/>
            ab_cd_defer(ab, ab, cd, cd); </fail>

            return ab.i - cd.i;
        }
    `);

    ZERO(`
        // a can alias b
        // c can alias d
        pub fn ab_cd_inner (ref a: i32, ref b: i32, ref c: i32, ref d: i32) {
            ref ab = a || b;
            ref cd = c || d;
            ++++ab;
            ++++cd;
        }

        pub fn ab_cd_outer (ref a: i32, ref b: i32, ref c: i32, ref d: i32)
            ab_cd_inner(a, b, c, d);

        fn main() {
            mut ab = 0;
            mut cd = 0;

            <fail alias>
            ab_cd_outer(ab, cd, ab, cd); <pass/>
            ab_cd_outer(ab, ab, cd, cd); </fail>

            return ab - cd;
        }
    `);

    ZERO(`
        // a can alias b
        // c can alias d
        // e can alias f
        // g can alias h
        pub fn abcd_efgh(ref a: i32, ref b: i32, ref c: i32, ref d: i32,
                         ref e: i32, ref f: i32, ref g: i32, ref h: i32)
        {
            ref ab = a || b; ref cd = c || d; ref abcd = ab || cd;
            ref ef = e || f; ref gh = g || h; ref efgh = ef || gh;
            ++++abcd; ++++ab; ++++cd;
            ++++efgh; ++++ef; ++++gh;
        }

        fn main() {
            mut ab = 0; mut cd = 0;
            mut ef = 0; mut gh = 0;

            <fail alias>
            abcd_efgh(ab, ab, cd, gh, ef, ef, cd, gh); <pass/>
            abcd_efgh(ab, ab, cd, cd, ef, ef, gh, gh); </fail>

            return (ab + cd) - (ef + gh);
        }
    `);

    ZERO(`
        pub fn incr_a_or_b_and_b_or_a(ref a: i32, ref b: i32) {
            ref x = a || b; ++x;
            ref y = b || a; ++y;
        }

        fn main() {
            mut a = 0;                          ;; N_BckSoftRisk

            <alt>
            incr_a_or_b_and_b_or_a(a, a);
            <alt/>
            ref b = a;
            incr_a_or_b_and_b_or_a(a, b);
            </alt>

            return a - 2;
        }
    `);

    ZERO(`
        // same as below -
        //  but using a helper variable
        //   which provides a "name" for the outcome of a|b.
        fn incr_a_or_b_by2_via_x(ref a: i32, ref b: i32) {
            ref x = a || b;
            ++++x;
        }

        fn main() {
            mut Z = 0;
            mut A = 2;
            mut B = 0;

            incr_a_or_b_by2_via_x(Z, B); // incr B, now 2
            incr_a_or_b_by2_via_x(A, B); // incr A, now 4
            incr_a_or_b_by2_via_x(B, B); // incr _target, now 4 // alias!

            return (100*A + B) - 404;
        }
    `);

    ZERO(`
        // same as above -
        //  but notice we increment twice, which breaks current setup.
        fn incr_a_or_b_by2(ref a: i32, ref b: i32)
            ++++(a || b);

        fn main() {
            mut Z = 0;
            mut A = 2;
            mut B = 0;

            incr_a_or_b_by2(Z, B); // incr B, now 2
            incr_a_or_b_by2(A, B); // incr A, now 4
            incr_a_or_b_by2(B, B); // incr _target, now 4 // alias!

            return (100*A + B) - 404;
        }
    `);

    ZERO(`
        fn alias(ref arr: i32[], ref item: i32) {
            arr ~= 1;
            return item;
        }

        fn main() {
            mut a = [ 0 ];
            <fail alias>
            ref c = alias(a, a[0]);
            <pass/>
            mut b = [ 0 ];
            ref c = alias(a, b[0]);
            </fail>
            return c++;
        }
    `);

    ZERO(`
        fn test(ref a: i32[], ref b: i32[]) {
            <fail invalidate 7:28 6:30>
            ref aa = a[0]; <pass/>
            fn  aa() a[0]; </fail>

            ref bb = b[0]; a ~= 1; // Invalidates 'aa' if ref.
            ref cc = bb || aa;     // Mustn't compile.
            return cc;
        }

        fn main() { mut a = [ 0 ]; mut b = [ 0 ]; return test(a, b); }
    `);

    ZERO(`
        fn test(ref a: i32[], ref b: i32[]) {
            <fail invalidate 7:26 6:30>
            ref aa = a[0]; <pass/>
            fn  aa() a[0]; </fail>

            ref bb = b[0]; a ~= 1; // Invalidates 'aa' if ref.
            return bb || aa;       // Same as above, but no explicit binding.
        }

        fn main() { mut a = [ 0 ]; mut b = [ 0 ]; return test(a, b); }
    `);

    ZERO(`
        fn noop(x) x;
        fn test(ref a: i32[], ref b: i32[]) {
            <fail invalidate 8:31 7:30>
            ref aa = a[0]; <pass/>
            fn  aa() a[0]; </fail>

            ref bb = b[0]; a ~= 1; // Invalidates 'aa' if ref.
            return noop(bb || aa); // Same as above, but bound at callsite.
        }

        fn main() { mut a = [ 0 ]; mut b = [ 0 ]; return test(a, b); }
    `);

    ZERO(`
        fn either(a, b) a || b;
        fn test(ref a: i32[], ref b: i32[]) {
            <fail invalidate 8:31 7:30>
            ref aa = a[0]; <pass/>
            fn aa()  a[0]; </fail>

            ref bb = b[0]; a ~= 1; // Invalidates 'aa' if ref.
            return either(bb, aa); // For completeness.
        }

        fn main() { mut a = [ 0 ]; mut b = [ 0 ]; return test(a, b); }
    `);

    ZERO(`
        fn what(ref cond: i32, ref cons: i32)
            cond && (cons += 1);

        fn main() {
            mut x = 1;
            return what(x, x) - 2;
        }
    `);

    ZERO(`
        struct Target {
            overload: i32[];
            extended: i32[];
        };

        fn which(ref t: Target, i: i32) i & 1
            ? t.overload
            : t.extended;

        fn test(ref target: Target)
        {
            ref overload = target.which(target.overload.len);
            ref extended = target.which(target.overload.len + 1);

            mut change = false;
            if (overload)
            {
                for (mut i = 0; i < overload.len; i++)
                {
                    let a = overload[i];
                    let b = extended[i];
                    if (a != b)
                    {
                        change = true;
                        break;
                    }
                }
            }

            if (change)
            {
                extended[0] = 3;

                shadow ref overload = target.which(target.overload.len);
                overload[0] = 5; // Said write to overload invalidates ext on next loop iter.
            }
        }

        fn main()
        {
            mut target = Target([ 0 ], [ 1 ]);
            target.test();
            return target.overload[0] * 10 + target.extended[0] * 100 - 350;
        }
    `);

    TODO_disjoint(`
        fn test(ref a: i32, ref b: i32) {
            a += b;
            b += a;
        }

        struct AB { a: i32; b: i32 };

        fn main() {
            mut ab = AB(1, 2);
            <alt>
            ref a = ab.a;
            ref b = ab.b;
            test(a, b);
            <alt/>
            ref a = ab.a;
            test(a, ab.b);
            <alt/>
            test(ab.a, ab.b);
            </alt>
            return ab.b - 5;
        }
    `);

    TODO_borrowck(`
        struct Helper { vars: i32[]; };

        fn test(ref _helpers: Helper[], helpers_idx: i32) {
            ref old = _helpers[helpers_idx - 1].vars;
            ref new = _helpers[helpers_idx    ].vars;
            new    ~= old[helpers_idx];
        }

        fn main() {
            mut helpers = [ Helpers([ 1, 2 ]), Helpers([ 4, 8 ]) ];
            test(helpers, 1);
            return helpers[1][2] - 2;
        }
    `);

    ZERO(`
        fn outer() {
            mut sum = 0;
            mut x = 1;
            for (;;) {      // bck complained that the write to 'x' at the end
                let v = x;  //  invalidates use of 'v' on next loop iter here, which is not true
                for (mut i = 0; i < 10; i++) {
                    sum += v;
                    if (sum > 40)
                        return sum;
                }

                x = v * 2;
            }
        }

        fn main() outer - 42;
    `);

    ZERO(`
        fn append_self(ref a: i32[])
        {
            let b = a;
            a ~= b; // b narrowed down to a slice which is non-copyable
                    //  but it (unfortunately) wanted to copy to a temp.
        }

        fn main() {
            mut arr = [1, 2];
            arr.append_self();
            return arr[2] + arr[3] - 3;
        }
    `);

    ZERO(`
        fn but_is_it_pure(ref x: i32) {
            <fail not pure 6:9 8:34 4:21>
            return x++; <pass/>
            return x;   </fail>
        }
        pure fn pure_fn(ref a: i32, ref b: i32) {
            ref x = a || b;
            return but_is_it_pure(x);
        }
        fn main() {
            mut x = 0;
            mut y = 0;
            return pure_fn(x, y);
        }
    `);

    ZERO(`
        fn main() {
            mut _info: string[];

            pure fn fail(mut reason: string = "") {
                for (mut i = _info.len; i --> 0; ) {
                    ref info = _info[i]; // notice the ref, has to relax away
                    reason ~= info<alt> && i<alt/> ? i : []</alt>;
                }

                return reason;
            }

            return fail.len;
        }
    `);

    ZERO(`
        fn main() {
            mut _info = [ 101 ];

            pure fn fail(mut reason: string = "") {
                ref info = _info[0]; // <- notice the ref, has to relax away
                reason ~= info<alt> && ("" ~ info)<alt/> ? ("" ~ info) : []</alt>;
                return reason;
            }

            return fail.len - 3; // "101".len is 3.
        }
    `);

    ZERO(`
        struct Helpers { row: i32[]; };

        fn test(ref _helpers: Helpers[], mut N: i32, row: i32)
        {
            fn solveNode_H(h: Helpers) {
                while (N % h.row[h.row.len - 1]) {
                    N--;
                    _helpers.grow(_helpers.len * 2);
                }
            }

            fn solveJump() {
                solveNode_H(_helpers[row]);
                return _helpers.len;
            }

            return solveJump() - 1 * 2*2*2*2;
        }

        fn main()
        {
            mut _helpers = [ Helpers([ 1, 2, 3, 4, 5 ]) ];
            return test(_helpers, row: 0, N: 4)
        }
    `);

    ZERO(`
        struct Helpers { row: i32[]; };

        fn test(ref _helpers: Helpers[], mut N: i32, row: i32)
        {
            fn solveNode_HH_inner(h: Helpers) {
                while (N % h.row[h.row.len - 1]) {
                    N--;
                    _helpers.grow(_helpers.len * 2);
                }
            }

            fn solveNode_HH(h: Helpers) {
                return solveNode_HH_inner(h);
            }

            fn solveJump() {
                solveNode_HH(_helpers[row]);
                return _helpers.len;
            }

            return solveJump() - 1 * 2*2*2*2;
        }

        fn main()
        {
            mut _helpers = [ Helpers([ 1, 2, 3, 4, 5 ]) ];
            return test(_helpers, row: 0, N: 4)
        }
    `);

    ZERO(`
        fn test(ref _helpers: i32[][], mut N: i32, row: i32)
        {
            fn solveNode_a(h: i32[]) {
                while (N % h[h.len - 1]) {
                    N--;
                    _helpers.grow(_helpers.len * 2);
                }
            }

            fn solveJump() {
                solveNode_a(_helpers[row]); // We've relaxed to a view, which bck can't copy
                return _helpers.len;
            }

            return solveJump() - 1 * 2*2*2*2;
        }

        fn main()
        {
            mut _helpers = [[ 1, 2, 3, 4, 5 ]];
            return test(_helpers, row: 0, N: 4)
        }
    `);

    ZERO(`
        struct Arg { i: i32; };

        // A mutref fail.
        fn mutargs(args: &mut Arg[])
        {
            // This miscompiles to ref into args,
            //  after which we invalidate the reference.
            //
            <fail inval badref>
            ref <pass/>
            mut </fail> badref = args[0];

            args = [ Arg(11) ]; // INVALIDATE badref.
            return badref;
        }       // oct2021: now latest issue here is that
                //  this gets bcked AFTER jump lifetimes are unwound
                //   and it all looks as if everything's fine (lt badref == lt args).

        fn main()
        {
            mut args = [ Arg(7) ];
            return mutargs(args).i - 7;
        }
    `);

    ZERO(`
        struct Arg { i: i32[]; };

        fn witharg(using a: Arg)
            i[i.len - 1] * 4;

        fn mutargs(args: &mut Arg[]) {
            <fail invalidate badref>
            ref <pass/>
            let </fail> badref = args[0];

            args = [ Arg([ 11 ]) ]; // INVALIDATE badref.
            return witharg(badref);
        }

        fn main() {
            mut args = [ Arg([ 7 ]) ];
            return mutargs(args) - 28;
        }
    `);

    ZERO(`
        struct Arg { i: i32[]; };

        fn witharg(using a: Arg, x: i32)
            i[i.len - 1] * x;

        fn mutargs(args: &mut Arg[]) {
            <fail inval badref>
            ref <pass/>
            let </fail> badref = args[0];

            for (mut i = 0;; i++) {
                let ret = witharg(badref, i * 4);
                if (ret)
                    return ret;

                args = [ Arg([ 11 ]) ]; // INVALIDATE badref.
            }
        }

        fn main() {
            mut args = [ Arg([ 7 ]) ];
            return mutargs(args) - 28;
        }
    `);

    ZERO(`
        fn test(ref woot: i32[], x: i32, y: i32) {
            ref b = woot[y];
            ref a = woot[x]; // the 'shadow ref' below ...
            if (a == 1) {
                <fail invalidate write to woot at 4:25>
                <pass/>
                shadow ref a = woot[x]; // ... should relax 'ref a' above to a let ...
                </fail>
                a += 1;
            }
            else {
                b += 1; // ... and this should ignore cond write above.
            }
        }

        fn main() {
            mut x = [ -1, +1 ];
            test(x, 0, 1);
            return x[1] - 2;
        }
    `);

    ZERO(`
        fn test(ref a: i32[], ref b: i32[]) {
            <alt>
            if (a[0]++ == 1)            ;; N_BckSoftRisk
            <alt/>
            if (a[0] == 1)
            </alt>
                a ~= 1;
            else
                b ~= 1;
        }

        fn main() {
            mut x = [ 1 ];
            test(x, x);
            return x.len - 2;
        }
    `);

    TODO_disjoint(`
        nocopy struct Woot {
            x: i32[];
            y: i32[];
        };

        fn test(ref w: Woot) {
            ref x = w.x;
            //*F
            ref y = w.x;
            /*/
            ref y = w.y;
            //*/
            y ~= y; // <- DONT RESOLVE BY COPY! ref can relax to let
            x ~= y;
        }

        fn main() {
            mut w: Woot;
            test(w);
            return w.x.len;
        }
    `);

    TODO_disjoint(`
        nocopy struct Woot {
            x: i32[];
            y: i32[];
        };

        fn test(ref w0: Woot, ref w1: Woot) {
            ref x = w0.x;
            //*F
            ref y = w1.x;
            /*/
            ref y = w1.y;
            //*/
            y ~= y; // <- DONT RESOLVE BY COPY! ref can relax to let
            x ~= y;
        }

        fn main() {
            mut w: Woot;
            test(w, w);
            return w.x.len;
        }
    `);

    ZERO(`
        fn indexIntoImplicit(j: i32, implicit strings: string[]) strings[j];

        fn selfRecurBeforeImplicitDep(x: i32)
        {
            // On second solve we're talking about a region, but the argnode is gone.
            fn T(i: i32) selfRecurBeforeImplicitDep(i / 2);
            if (x > 1) return T(x);
            return indexIntoImplicit(x);
        }

        fn main() {
            let implicit strings = [ "a", "b" ];
            return selfRecurBeforeImplicitDep(2) == "b" ? 0 : 1;
        }
    `);

    ZERO(`
        <fail arg invalidated by subseq eval>
        nocopy                 <pass/></fail>
        struct Type       { canon: string; };
        struct SolvedNode {  type: Type;   };

        fn solved(type: Type, implicit ref out: SolvedNode[]) {
            out.grow(out.len * 100 + 1);

            ref tail = out[out.len - 1];
            tail.type.canon = type.canon;
            return tail;
        }

        fn createMap(a: Type, b: Type): Type {
            return Type(a.canon ~ b.canon);
        }

        fn evalTypeAnnot(nodes: string[]): SolvedNode
        {
            // Each T() call should invalidate the results from previous T() calls -
            //  so this shouldn't compile if Type is nocopy.
            fn T(i: i32)
                evalTypeAnnot([ nodes[i] ]).type;

            if (nodes.len > 1)
                return solved(createMap(T(0), T(1))); // <<< HERE >>>

            return solved(Type(nodes[0]));
        }

        fn main() {
            implicit mut out: SolvedNode[];
            let annot = evalTypeAnnot([ "a", "b" ]);
            return out.len == 10101 && annot.type.canon.len == 2 ? 0 : 1;
        }
    `);

    ZERO(`
        fn main() {
            mut x = 0;
            let s = ++x + ++x;
            return s - 3; // Not 4! one arg must invalidate
        }
    `);

    ZERO(`
        <fail arg inval subsequent write 14:23 14:25 14:33 8:16>
        nocopy                                    <pass/></fail>
        struct X { x: i32; }
        fn sum(a: X, b: X) a.x + b.x;

        fn incr(ref x: X) {
            x.x++;
            return x;
        }

        fn main() {
            mut x: X;
            return sum(x.incr, x.incr) - 3; // Not 4! one arg must invalidate
        }
    `);

    ZERO(`
        <fail arg inval subsequent write 23:23 23:25 23:33 16:18>
        nocopy                                     <pass/></fail>
        struct X { x: i32; }
        struct Y { y: X;   }

        fn x(y: Y) y.y.x;
        fn sum(a, b) a.x + b.x;

        fn incr(ref x: X) {
            x.x++;
            return x;
        }

        fn incr(ref y: Y) {
            y.y.x++;
            return y;
        }

        fn main() {
            mut x: Y;
            ref y = x.y;
            return sum(y.incr, x.incr) - 3; // Not 4! one arg must invalidate
        }
    `);

    ZERO(`
        <fail arg inval subsequent write 19:27 19:32 19:21 7:16>
        nocopy                                    <pass/></fail>
        struct X { x: i32; };

        fn incr(ref x: X) {
            x.x++;
            return x;
        }

        fn +=(a: X, b: X) {
            // Notice, this is not a real +=,
            //  just checking the order of eval here.
            return a.x + b.x;
        }

        fn test(ref x: X, ref y: X) {
            ref xy = y || x;
            return x.incr += xy.incr; // <- xy invalidated by x.incr
        }

        fn main() {
            mut x: X;
            mut y: X;
            return test(x, y) - 3;
        }
    `);

    TODO_move(`
        <alt>
        nocopy
        </alt>
        struct X { items: i32[]; };
        fn popfirst(mut arr: X[]) arr[0]; // mcom_BlockReturn after relax: arr[] adds 'static
        fn main() popfirst([ X() ]).items.len;
    `);

    ZERO(`
        struct AB { a: i32[][]; b: i32[][]; };

        fn problematic_moves(mut ab: AB) {
            ref ra = ab.a;
            return ra.len & 1 ? ra[0] : ab.b[0];
        }

        fn main() {
            mut ab = AB(
                [[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9]],
                [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]);

            mut pick = ab.problematic_moves;
            return pick[9] - ab.a[0][9];
        }
    `);

    ZERO(`
        <fail explicit>
        nocopy <pass/></fail>
        struct NC { x: i32; y: i32 };

        fn wants_val(mut a: NC) {
            a.x++;
            a.y++;
            return a;
        }

        fn incr_by(mut a: NC, b: NC) {
            a.x += b.x;
            a.y += b.y;
            return a;
        }

        fn main() {
            mut v = NC(-1, -1);
            mut w = wants_val(v);
            return (w || v).x + 1;
        }
    `);

    ZERO(`
        nocopy struct SolvedNode {
            items: SolvedNode[];
        };

        fn test(mut a: SolvedNode, mut b: SolvedNode) {
            <alt>
            ref n = a || b;
            <alt/>
            ref n = a.items ? a : b;
            </alt>
            return n;
        }

        fn main() test([], []).items.len;
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct SolvedNode { len: i32; }

        fn createBlock(mut last: SolvedNode) {
            let tail     = last || last;
            let unwrap   = tail || tail;
            last.len--;
            return unwrap;
        }

        fn main() {
            return createBlock([]).len;
        }
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct SolvedNode { items: SolvedNode[] };

        fn popAndOr(ref node: SolvedNode) {
            let N = node.items.len;

            let pop = node.items[N - 1];
            if (N > 2) {
                node.items.pop();
            }
            else {
                let head = node.items[0];
                node = head;
            }

            return pop;
        }

        fn main() {
            mut a = SolvedNode([ SolvedNode, SolvedNode ]);
            let b = a.popAndOr();
            return a.items.len + b.items.len;
        }
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct Items {
            len: i32;
        }

        struct SolvedNode {
            items: Items;
        }

        struct Nodes {
            last: SolvedNode;
        }

        fn pop(ref n: Nodes) {
            n.last.items.len--;
        }

        fn createBlock(mut items: Nodes) {
            let tail = items.last;
            let unwrap = tail.items;
            items.pop();
            return unwrap;
        }

        fn main() {
            return createBlock(Nodes(SolvedNode([]))).len;
        }
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct SolvedNode {
            items: SolvedNode[];
        };

        // Reducing the thing below.
        fn createBlock(mut items: SolvedNode[]) {
            let tail = items[items.len - 1];
            let unwrap = tail.items;
            items.pop();
            return unwrap;
        }

        fn main() {
            return createBlock([ SolvedNode ]).len;
        }
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct SolvedNode {
            kind: string;
            items: SolvedNode[];
        };

        // Same as below but mut.
        fn createBlock(mut items: SolvedNode[]) {
            if (items.len) for (;;) {
                let tail = items[items.len - 1]; // const-indexed but generated mutref tail, must be F_RRET?
                if (tail.kind != "block")
                    break;

                let unwrap = tail.items;
                items.pop();
                return unwrap;
            }

            return [];
        }

        fn main() {
            return createBlock([]).len;
        }
    `);

    ZERO(`
        <fail cannot access invalidated>
        nocopy            <pass/></fail>
        struct SolvedNode {
            kind: string;
            items: SolvedNode[];
        };

        // Same as above but ref.
        fn createBlock(ref items: SolvedNode[]) {
            if (items.len) for (;;) {
                let tail = items[items.len - 1];
                if (tail.kind != "block")
                    break;

                let unwrap = tail.items; // unwrap needs to copy here
                items.pop(); ////////////// <- nuked here, but ignored!
                return unwrap;
            }

            return [];
        }

        fn main() {
            mut items: SolvedNode[];
            return createBlock(items).len;
        }
    `);

    ZERO(`
        fn test(ref a: i32[]) = a.swap(0, 1);

        fn main() {
            mut nums = [1, 2];
            nums.test();
            return nums.len == 2 && nums[0] == 2 && nums[1] == 1
                 ? 0
                 : 1;
        }
    `);

    TODO_unique(`
        fn Swap(ref a: i32[], x: i32, y: i32)
            swap(a[x], a[y]);

        fn main() {
            mut a = [ 1, 2 ];
            a.Swap(0, 1);
            return a[0] - 2 == 0 && a[1] - 1 == 0 ? 0 : 1;
        }
    `);

    ZERO(`
        fn test(ref arg: i32[]) {
            let encloses_unchanged = arg;

            fn closure()
                for (mut i = 0; i < arg.len; i++)
                    arg[i] += encloses_unchanged[i];

            closure();
            if (arg.len & 1)
                closure();
        }

        fn main() {
            mut a = [ 3 ];
            test(a);
            return a[0] - 9;
        }
    `);

    ZERO(`
        inline fn must_not_return_ref_or_view(ref x: i32[][]) {
            let y = x[100];
            x.shrink(y.len);
            return y;
        }

        fn main() {
            mut arr: i32[][];
            arr.grow(101);
            arr[100] = [ 7 ]
            return arr.must_not_return_ref_or_view()[0] - 7;
        }
    `);

    ZERO(`
        struct HasVec { x: i32[] };
        inline fn last(x: i32[]) x[x.len - 1];

        <alt>
        inline
        </alt>
        fn will_return_value(ref x: HasVec) {
            let bck_will_cpy = x;

            let vec0 = bck_will_cpy.x;
            if (bck_will_cpy.x.len & 1)
                return vec0;

            x.x ~= x.x.len;
            let vec1 = bck_will_cpy.x;
            return vec1;
        }

        fn main() {
            mut x = HasVec([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]);
            return will_return_value(x).last/*9*/ - x.x.last/*10*/ + 1;
        }
    `);

    ZERO(`
        fn PASS_borrowCheck_incr_a_ret_b(ref a: i32, ref b: i32) {
            a++;        // we're done writing to a before
            return b;   //  EXTRA DRAMA: we dont cg const refs for primitives right now
        }

        fn main() {
            mut x = 5;
            PASS_borrowCheck_incr_a_ret_b(x, x);
            return x - 6;
        }
    `);

    ZERO(`
        fn PASS_borrowCheck_reduct(ref a: i32, ref b: i32[])
        {
            // If this were (ref!b a, ref b):
            //
            // When a points into b:
            //  - a++ read ok, write ok
            //   - b read ok, write ok + invalidates a
            //    - a not usable from here on
            //
            // The point is we should be able to deduce this automatically,
            //  if nothing a-related is used after b gets used for the first time,
            //   then we're fine if b aliases a ...
            //
            // ... EXCEPT that's if b doesn't acceptTempCopies -
            //  meaning it's either F_IMPLICIT or F_REF -
            //   otherwise there's ambiguity.
            //
            a++;
            b ~= 10;
        }

        fn main() {
            mut arr = [ 9 ];
            PASS_borrowCheck_reduct(arr[0], arr);
            return arr[0] - arr[1];
        }
    `);

    ZERO(`
        struct Node { id: i32; items?: Node[]; };

        fn traverse(node: Node, visit) {
            visit(node);
            for (mut i = 0; i < node.items.len; i++)
                traverse(node.items[i], fn visit);
        }

        fn PASS_borrowCheck(ref root: Node)
        {
            mut n: i32;
            fn count(id: i32)
                traverse(root): |i|
                    if (i.id == id)
                        n++;

            fn check(ref node: Node) {
                if (node.items)
                    for (mut i = 0; i < node.items.len; i++)
                        check(node.items[i]);
                else
                    count(node.id++);
            }

            check(root);
            return n;
        }

        fn main() {
            mut tree = Node(0, [ Node(2), Node(2) ]);
            return PASS_borrowCheck(tree) - 1;
        }
    `);

    ZERO(`
        pub fn grow_if_oob(ref a: $T[], i: i32) {
            if (a.len <= i) a.grow(i + 1);
            return a[i];
        }

        fn grow_if_oob_to_len_from_self(ref arr: i32[], idx: i32)
            arr.grow_if_oob(arr[idx]); // i was F_REF for some reason

        fn main() {
            mut arr = [3];
            arr.grow_if_oob_to_len_from_self(0) = 2;

            mut sum = 0;
            for (mut i = 0; i < arr.len; i++) sum += arr[i];
            return sum - 5;
        }
    `);

    ZERO(`
        fn used_in_a_loop__invalidated__by_new_var(
            ref arr: i32[], ref barr: i32[], ref carr: i32[])
        {
            ref head = arr[arr.len - 1];
            for (mut i = 0; i < arr.len; i++) {
                head += arr.len;
                let head_cpy = head + 0;
                ref barrcarr = barr || carr;
                barrcarr.resize(head_cpy);
            }
        }

        fn main() {
            mut arr = [ 1 ];

            <fail both alias arr>
            ref barr = arr; <pass/>
            mut barr = arr; </fail>

            used_in_a_loop__invalidated__by_new_var(arr, barr, barr);
            return barr.len == 2 ? 0 : 1;
        }
    `);

    ZERO(`
        fn grow_if_oob(ref a: i32[], i: i32) {
            if (a.len <= i) a.grow(i + 1);
            return a[i];
        }

        fn assign(ref what: i32, ref to: i32) to = what;

        fn two_writes_in_an_arg(ref arr: i32[], ref brr: i32[], ref x: i32)
            assign( what: x ? arr.grow_if_oob(10)
                            : brr.grow_if_oob(10), to: x );

        fn main() {
            mut arr = [ 0, 1, 2, 3 ];
            mut brr = [ 0, 2, 4, 6 ];

            <fail args x both alias>
            ref x = brr[0];  <pass/>
            mut x = 0;       </fail>

            return two_writes_in_an_arg(arr, brr, x);
        }
    `);

    ZERO(`
        struct Node { items: Node[] };

        fn main() {
            mut root = Node([
                Node([ Node, Node ])
            ]);

            <fail both arg alias root>
            swap(root.items[0], root);  <pass/> // write to root invalidates root.items[0]
            root = root.items[0];       </fail> // this is fine

            return root.items.len - 2;
        }
    `);

    ZERO(`
        fn grow_if_oob(ref a: i32[], i: i32) {
            if (a.len <= i) a.grow(i + 1);
            return a[i];
        }

        fn assign(ref to: i32, ref what: i32) to = what;

        fn two_writes_in_an_arg(ref x: i32, ref arr: i32[], ref brr: i32[])
            assign( to: x,  what: arr.grow_if_oob(10)
                               || brr.grow_if_oob(10));

        fn test(ref x: i32, ref arr: i32[], ref brr: i32[]) {
            two_writes_in_an_arg(
                <fail args x both alias>
                    x || arr[0],    <pass/>
                    x,              </fail>
                    :arr, :brr);

            return x;
        }

        fn main() {
            mut arr = [ 0 ];
            mut brr = [ 0 ];
            mut x   = 0;

            return test(:x, :arr, :brr);
        }
    `);

    ZERO(`
        fn writes_to_two_args(ref item: i32, ref arr: i32[], ref brr: i32[]) {
            ref arrbrr = arr || brr;
            arrbrr.resize(100 + arrbrr.len);
            return item += arrbrr.len;
        }

        fn main() {
            mut arr: i32[] = [      ];
            mut brr: i32[] = [ -101 ];

            <fail alias brr>
            ref item = brr[0]; <pass/>
            mut item = brr[0]; </fail>

            return writes_to_two_args(:item, :arr, :brr);
        }
    `);

    ZERO(`
        fn reads_from_two_args(ref left: i32, ref right: i32, ref arr: i32[], ref brr: i32[]) {
            ref arrbrr = arr || brr;
            ref item = left || right;
            arrbrr.resize(100 + arrbrr.len);
            return item += arrbrr.len;
        }

        fn main() {
            mut arr: i32[] = [      ];
            mut brr: i32[] = [ -101 ];

            mut left = 0;

            <fail alias brr>
            ref right = brr[0]; <pass/>
            mut right = brr[0]; </fail>

            return reads_from_two_args(:left, :right, :arr, :brr);
        }
    `);

    ZERO(`
        fn grow(ref arr: i32[], by!n: i32) {
            arr.resize(arr.len + n);
            return arr;
        }

        fn incr__ltr_oee(ref what: i32, by: i32)
            what += by;

        fn reads_from_two_args__single_expr(ref left: i32, ref right: i32, ref arr: i32[], ref brr: i32[])
            incr__ltr_oee(left || right, grow(arr || brr, by: 100).len);

        fn main() {
            mut arr: i32[] = [      ];
            mut brr: i32[] = [ -101 ];

            mut left = 0;

            <fail alias brr>
            ref right = brr[0]; <pass/>
            mut right = brr[0]; </fail>

            return reads_from_two_args__single_expr(:left, :right, :arr, :brr);
        }
    `);

    ZERO(`
        fn main() {
            mut arr = [ 1,1,1,1,1 ];
            mut sum = 0;

            // veach(view) should decay to a slice -
            //  which push will invalidate.
            //
            fn veach(view, fn) {
                for (mut i = 0; i < view.len; i++) {
                    fn(view[i]);
                    arr ~= arr; // Relocate arr.
                }
            }

            arr.veach: |i| sum += <fail both alias arr>
                            (i *= 2)            <pass/>
                            (i  * 2)            </fail>;

            return sum - 10;
        }
    `);

    ZERO([`
        struct Context {
            modules:    Module[];
        };

        nocopy struct Module {
            in?:        string;
            fname:      string;
        };

        fn getFile(implicit ref ctx: Context, fname: string) {
            for (mut i = 0; i < ctx.modules.len; i++)
                if (ctx.modules[i].fname == fname)
                    return ctx.modules[i].in;

            ctx.modules ~= Module(:fname, in: fname ~ '\\n' ~ fname ~ '\\n');
            return ctx.modules[ctx.modules.len - 1].in;
        }

        fn getModule(implicit ref ctx: Context, fname: string) {
            for (mut i = 0; i < ctx.modules.len; i++)
                if (ctx.modules[i].fname == fname)
                    return ctx.modules[i];

            return [];
        }
    `,
    `
        import _0;

        fn ensureParsed(fname: string) {
            let module = getModule(fname);
            if (!module.in)
                return getFile(fname).len
                <fail module invalidated by write to ctx>
                    || module.in.len;
                <pass/>
                    || throw(fname);
                </fail>

            return module.in.len;
        }

        fn main() {
            implicit mut ctx: Context;
            return ensureParsed("a") - 4;
        }
    `]);

    ZERO(`
        nocopy struct NCThing {
            items: i32[];
        };

        fn mut_in_loop_before_break(ref thing: NCThing) {
            mut sum = 0;

            ref items = thing.items;
            for (mut i = 0; i < items.len; i++)
            {
                sum += items[i];
                if (sum > 10)
                {
                    thing = NCThing();
                    <fail write 15:27 inval use items next loop iter 10:33>
                    if (sum > 20)                                   <pass/>
                    if (true)                                       </fail>
                        break;
                }

                items[i] *= 2;
            }

            return sum;
        }

        fn main() {
            mut thing = NCThing([ 10 ]);
            return mut_in_loop_before_break(thing)
                 + mut_in_loop_before_break(thing)
                 - 30
                 + thing.items.len;
        }
    `);

    ZERO(`
        struct XY { x: i32; y: i32 };

        fn main() {
            mut xy: XY;
            <fail by pragma write to xy>
            ref x = xy.x;        <pass/>
            fn  x = xy.x;        </fail>

            pragma emit("
                "xy".x++;
            ");

            return x - 1;
        }
    `);

    ZERO(`
        struct XY { x: i32; y: i32 };

        fn main() {
            mut xy: XY;
            <fail 11:22 inval next loop iter 9:21>
            ref x = xy.x;                  <pass/>
            fn  x = xy.x;                  </fail>

            while (!x)
                pragma emit("
                    "xy".x++;
                ");

            return xy.x - 1;
        }
    `);

    ZERO(`
        struct XY { x: i32; y: i32 };

        fn bckErr_fromPragmaEmit(ref xy: XY) {
            pragma emit("
                "xy".x++;
            ");
        }

        fn main() {
            mut xy: XY;
            <fail bckErr_fromPragmaEmit>
            ref x = xy.x;        <pass/>
            fn  x = xy.x;        </fail>

            bckErr_fromPragmaEmit(xy);
            return x - 1;
        }
    `);

    // /Borrow checker


    // Move on last use

    ZERO(`
        nocopy struct Val { x: i32 };
        struct Out { v: Val };
        fn move_Val_into_Out(mut v: Val)    = Out(:v);
        fn main()                           = move_Val_into_Out(Val(0)).v.x;
    `);

    ZERO(`
        fn must_not_move_mystr(n: i32) {
            mut mystr = "";
            for (mut i = 0; i < n; i++)
                mystr ~= "!";

            mut result: string[];
            for (mut i = 0; i < n; i++)
                result ~= mystr;

            return result.join();
        }

        fn main() = must_not_move_mystr(3).len - 9;
    `);

    ZERO(`
        struct Type {
            canon: string;
            quals: int;
        };

        fn takes_ref_and_val(ref r!: Type, mut v!: Type) {
            v.canon ~= r.canon;
            r.canon ~= v.canon;
            v.quals |= r.quals;
            return r;
        }

        fn main() {
            mut t = Type("abc", 123);
            return takes_ref_and_val(r: t, v: t).canon.len - 9;
        }
    `);

    ZERO(`
        struct Type {
            canon: string;
            quals: int;
        };

        fn takes_two_strings(mut a: Type, mut b: Type) {
            b.canon ~= a.canon;
            a.canon ~= b.canon;
            a.quals |= b.quals;
            return a;
        }

        fn move_on_last_use_OOE(mut canon: string, quals: int) {
            canon ~= canon;
            return takes_two_strings(   ;; N_MoveMustSeq
                Type(:canon, :quals),
                Type(:canon, :quals));  // out of order move-into-struct will break this
        }

        fn main() {
            let res = move_on_last_use_OOE(
                "1234567890abcdef1234567890abcdef" // len=32, *2 = 64, *3 = 192
                    1000);

            return res.canon.len + res.quals - 1192;
        }
    `);

    ZERO(`
        struct Type {
            canon: string;
            quals: int;
        };

        fn takes_two_strings_and_an_int(mut a: Type, mut b: Type, c: int) {
            b.canon ~= a.canon;
            a.canon ~= b.canon;
            a.quals |= b.quals;
            a.quals += c;
            return a;
        }

        fn moves_reordered_by_bck_OOE(mut canon: string, mut quals: int) {
            canon ~= canon;
            return takes_two_strings_and_an_int(    ;; N_MoveMustSeq
                Type(:canon, 0),
                Type(:canon, quals++), // quals++ triggered bck MUSTSEQ
                             quals  ); //  which reordered arg b BEFORE arg a,
        }                              //   which broke move-on-last-use.

        fn main() {
            let res = moves_reordered_by_bck_OOE(
                "1234567890abcdef1234567890abcdef" // len=32, *2 = 64, *3 = 192
                    0);

            return res.canon.len + res.quals - 193;
        }
    `);

    ZERO(`
        fn track_last_loop_confusion(mut a: string, mut b: string)
        {
            for (mut i = 0; i < 6; i++) {
                a ~= a; // foil smallstring opti
                b ~= b; //  both are 64 chars long
            }

            ref x = a.len == 64 ? b : a;
            ref y = b.len == 64 ? x : a; // y points to b two refs deep

            mut result = b; // <-- BROKEN MOVE FROM b HERE

            // once
            for (mut i = result.len / 64; i --> 0; ) {
                y ~= y;         // now 128, ensures y not a view
                result ~= y;    // for a total of 192
            }

            return result;
        }

        fn main() {
            mut res = track_last_loop_confusion("a", "b");
            return res.len == 192 ? 0 : 1;
        }
    `);

    ZERO(`
        nocopy struct NCItem { x: i32 };

        fn unshift_odds_push_evens(n: i32) {
            mut arr: NCItem[];
            for (mut i = 0; i < n; i++) {
                let item = NCItem(i);
                if (i & 1)  arr.unshift(item);
                else        arr.push(item);
            }
            return arr;
        }

        fn main() {
            let arr = unshift_odds_push_evens(3);
            return arr[0].x == 1
                && arr[1].x == 0
                && arr[2].x == 2 ? 0 : 1;
        }
    `);

    ZERO(`
        nocopy struct NCThing { x: i32 };

        fn last_used_before_break(mut nc: NCThing, N: i32) {
            mut res: NCThing;
            for (mut i = 0; i < N; i++) {
                nc.x *= 2;
                if (nc.x > 10) {
                    if (nc.x > 20) return nc;
                    res = nc; // <- should move here ...
                    break;
                }
            }

            <fail needs explicit steal or clone 10:25>
            if (nc.x > 15) return nc; // <- ... unless used here.
            <pass/></fail>

            res.x *= 10;
            return res;
        }

        fn main() {
            let res = last_used_before_break(NCThing(3), 10);
            return res.x - 120;
        }
    `);

    ZERO(`
        nocopy struct NCThing { str: string };

        fn last_used_in_defer(mut nc: NCThing, ref other: NCThing) {
            defer other = nc; // last use, move here!
            while (nc.str.len < 64)
                nc.str ~= nc.str;

            <fail explicit steal or clone 10:20>
            return nc;                   <pass/>
            return nc.str.len;           </fail>
        }

        fn main() {
            mut other: NCThing;
            last_used_in_defer(NCThing("Hello!"), other);
            return other.str.len - 96;
        }
    `);

    // /Move on last use


    // Stuff that isn't working out quite right -
    //  Keep those around, there's no principle to these tests,
    //   they just stressed our stuff in weird ways.

    TODO_Map(`
        struct BINOP {
            P: Map(string, i32);
        };

        fn setupOperators(): BINOP
        {
            mut out: BINOP;

            fn binop(op: string)
                out.P[op] = 7;

            binop(",");

            return out;
        }

        shadow let BINOP = setupOperators();
        let P_COMMA = BINOP.P[","] || assert();

        fn main() P_COMMA - 7;
    `);

    ZERO(`
        // -no-lambda
        // This converted to a ref-returning
        // logical chain for some reason.
        let hex = true;
        let trail = "x";
        if (!(trail >= "0" && trail <= "9") &&
            !(hex && (trail >= "a" && trail <= "f"
                   || trail >= "A" && trail <= "F")))
        {
            return 0;
        }

        return 1;
    `);

    ZERO(`
        struct Type     { i: i32; };
        struct Token    { i: i32; };
        struct ScopeIdx { i: i32; };

        struct SolvedNode
        {
            kind:       string;
            flags?:     i32;
            value?:     string;
            items?:     SolvedNode[];
            token:      Token;

            type:       Type;
            target?:    ScopeIdx;
        };

        let _here: Token;

        fn createDefaultInit(type: Type): SolvedNode
        {
            // Broken arg re-arrange.
            return SolvedNode(
                kind: "definit",
                token: _here,
                :type);
        }

        return createDefaultInit(Type()).target.i;
    `);

    ZERO(`
        struct Type         { i: i32; };
        struct Scope        { i: i32; };
        struct Partial      { i: i32; };
        struct Template     { i: i32; };
        struct SolvedNode   { i: i32; };

        fn Scope_add(
            scope: &mut Scope,
            kind: string, id: string, type: Type,

            min: i32 = 0,
            max: i32 = 0,
            arg_n: string[]     = [],
            arg_t: Type[]       = [],
            arg_d: SolvedNode[] = [],
            template: Template  = [],
            partial: Partial    = []): i32
        {
            return scope.i
                 + kind.len + id.len + type.i
                 + min + max + arg_n.len + arg_t.len + arg_d.len
                 + template.i + partial.i;
        }

        mut _scope: Scope;
        let id: string;
        let t_template: Type;
        let min: i32;
        let max: i32;
        let arg_n: string[];
        let template: Template;

        return Scope_add(
            _scope,
            "", id, t_template,
            min, max, arg_n,
            :template);
    `);

    ZERO(`
        let i = 0;
        let items = [ "" ];
        i == items.len - 1 || throw("what?");
        return i;
    `);

    ZERO(`
        return false /* test */
             ? 0xffffff.i32 // what is this
             : 0 // madness
             ;
    `);

    ZERO(`
        fn test(id: i32) id;
        return test(/*id*/0); // <- bad parse
    `);

    ZERO(`
        return 0b101.i32 - 5;
    `);

    ZERO(`
        return 0o101.i32 - 65;
    `);

    ZERO(`
        fn path_normalize(p: string): string {
            mut path = p.split("/");

            for (mut i = path.len; i --> 0; ) {
                let part: &string = path[i];
                if (part == "." || !part && i > 0 && i < path.len - 1)
                    path.splice(i, 1);
            }

            return path.join("/");
        }

        fn main() path_normalize("./hello///hey") == "hello/hey" ? 0 : 1;
    `);

    ZERO(`
        fn path_normalize(p: string): string {
            mut path = p.split("/");

            for (mut i = path.len; i --> 0; ) {
                let part = path[i];
                if (part == "." || !part && i > 0 && i < path.len - 1)
                    path.splice(i, 1);
            }

            for (mut i = 1; i < path.len; i++) {
                if (path[i] == "..")
                    path.splice(--i, 2);
            }

            return path.join("/");
        }

        fn path_join(a: string, b: string)
            path_normalize(a ~ "/" ~ b);

        fn main()
            path_join("hello/hey", "./../you//") == "hello/you/"
                ? 0 : 1;
    `);

    ZERO(`
        pub struct Template { locals: ScopeMemo; }; // <- used ahead of the def, was missing q_trivial
        pub struct ScopeMemo { x: i32; }; // <- trivial, discovered on solve here after Template is done
        pub fn +(a: ScopeMemo, b: ScopeMemo) a.x + b.x; // <- used here after both structs are done

        pub fn main() {
            let a = Template(ScopeMemo(+3));
            let b = Template(ScopeMemo(-3));
            return a.locals + b.locals; // <- fails to match.
        }
    `);

    ZERO(`
        novec fn novec_each(a: $T[], fn)
            for (mut i = 0; i < a.len; i++)
                fn(a[i]);

        fn main() {
            mut a = [ 1 ];
            a.novec_each: |i| i *= 2;
            return a[0] - 2;
        }
    `);

    ZERO(`
        novec fn Each(a: [$T], fn)
            for (mut i = 0; i < a.len; i++)
                fn(a[i]);

        struct Node { kind: string; items: Node[]; flags: i32; };

        let F_PREDICATE = 2;

        fn parse(tokens: byte[]): Node {
            mut _idx = 0;

            fn parseStructDecl(flags! = 0): Node {
                mut items = parseBlockLike('}');

                :F_PREDICATE {
                    items.Each: |item|
                        if (item.kind == "let")
                            if (item.flags & F_PREDICATE)
                                break :F_PREDICATE;

                    items.Each: |item|
                        if (item.kind == "let")
                            item.flags |= F_PREDICATE;
                }

                return Node("struct", items, :flags);
            }

            fn parseBlockLike(endToken: byte): Node[] {
                mut items: Node[] = [];
                for (;;) {
                    let token = tokens[_idx++];
                    if (token == endToken)
                        break;

                    items ~= Node("let", [], flags: token == '+' && F_PREDICATE);
                }

                return items;
            }

            return parseStructDecl();
        }

        fn main() {
            let tokens = "+-}";
            let p = parse(tokens).items;
            return p.len - p[0].flags
                         + p[1].flags * 17;
        }
    `);

    ZERO(`
        pub struct MeshBuilder
        {
            verts?:     byte[];
            indices?:   byte[];
            vert_bytes: i32;
            num_verts?: i32;
        };

        pub fn alloc(
            using mb: &mut MeshBuilder,
            new_verts: i32,
            new_indices: i32)
        {
            verts.resize_junk((verts.len + new_verts) * vert_bytes);

            let index_bytes = 4;
            indices.resize_junk((indices.len + new_indices) * index_bytes);
        }

        pub fn setup_quads(
            using mb: &mut MeshBuilder, // <- the 'using' introduced more bindings,
            num_quads: i32)             // <-  advancing the target index number of this arg,
                : &mut [byte]           // <-   confusing the callsite lifetime of this view.
        {
            let b0 = verts.len;
            let v0 = num_verts;
            let i0 = indices.len;

            mut v1 = v0;

            alloc(num_quads * 4, num_quads * 6);

            let indices_i32: &mut [i32] =
                indices[i0, indices.len]
                    .view(i32);

            for (mut i = 0; i < indices_i32.len; i += 6)
            {
                indices_i32[i    ] = v1;
                indices_i32[i + 1] = v1 + 1;
                indices_i32[i + 2] = v1 + 2;

                indices_i32[i + 3] = v1;
                indices_i32[i + 4] = v1 + 2;
                indices_i32[i + 5] = v1 + 3;

                v1 += 4;
            }

            num_verts = v1;

            return verts[b0, verts.len];
        }

        let QUAD_VBO: f32[] =
        [
            -1, -1, 0,      0, 0, 1,    0, 0,
            +1, -1, 0,      0, 0, 1,    1, 0,
            +1, +1, 0,      0, 0, 1,    1, 1,
            -1, +1, 0,      0, 0, 1,    0, 1,
        ];

        pub fn main()
        {
            mut mb = MeshBuilder(
                vert_bytes: 4 * (3+3+2));

            mb.setup_quads(1).view(f32) .= QUAD_VBO;

            return mb.num_verts - 4;
        }
    `);

    ZERO(`
        fn target(implicit ref _target: i32) _target;

        // this suddenly reported that it doesn't see __solveStruct
        fn GET_mut(ref x: i32) x || target;

        // while i was trying to reproduce an ambig "o" fail here
        fn __solveStruct(mut arg: i32): i32 {
            if (arg) {
                ref o = GET_mut(arg);
                o++;
                checkRecursions(o, o);
            }
            return arg;
        }

        fn checkRecursions(ref o: i32, incr: i32): void { GET_mut(o) += incr; }

        fn main()
        {
            implicit mut _target = 0;

            return __solveStruct(1) - 4;
        }
    `);

    ZERO(`
        fn main()
        {
            mut target = 0;
            fn GET_mut(ref x: i32) x || GET_mut(target += 1);
            return GET_mut(target) - 1;
        }
    `);

    ZERO(`
        fn target(implicit ref _itarg: i32) _itarg;

        fn main()
        {
            implicit mut _itarg = 0;
            fn GET_mut(ref x: i32) x || GET_mut(target += 1);
            return GET_mut(target) - 1;
        }
    `);

    ZERO(`
        fn target(implicit ref _itarg: i32) _itarg;
        fn GET_mut(ref x: i32) x || GET_mut(target += 1);

        fn main()
        {
            implicit mut _itarg = 0;
            return GET_mut(target) - 1;
        }
    `);

    ZERO(`
        fn main()
        {
            mut target = 0;
            fn GET_mut(ref x: i32) x || GET_mut(++target);
            return GET_mut(target) - 1;
        }
    `);

    ZERO(`
        fn main()
        {
            mut target = 0;
            fn __solveStruct(mut arg: i32): i32 {
                ref o = GET_mut(arg); o += target;
                return target;
            }

            fn GET_mut(ref x: i32) x || (target = __solveStruct(target += 1));
            return __solveStruct(0) - 2;
        }
    `);

    ZERO(`
        fn incr(ref a: i32) ++a;
        fn A(ref a: i32) a || (a = B(incr(a)));
        fn B(ref b: i32) b || (b = A(incr(b)));
        fn main() { mut v = 0; return A(v) - 1; }
    `);

    ZERO(`
        fn incr(ref a: i32) ++a;
        fn A(ref a: i32) { ref aa = a || (a = B(incr(a))); return aa; }
        fn B(ref b: i32) { ref bb = b || (b = A(incr(b))); return bb; }
        fn main() { mut v = 0; return A(v) - 1; }
    `);

    ZERO(`
        fn main()
        {
            fn Each(cond, cons) cond && cons();
            fn arg(implicit ref __arg: i32) __arg;
            fn __solveStruct(x = 3) Each(arg, || arg += x);
            implicit mut __arg = 1;
            return __solveStruct - 4;
        }
    `);

    ZERO(`
        fn main() {
            fn Each(cond, cons)                     cond && cons();
            fn arg_incr_x(mut arg: i32)             Each(arg, || arg);
            return arg_incr_x(+7) - 7;
        }
    `);

    ZERO(`
        fn main() {
            fn Each(cond, cons)                     cond && cons();
            fn arg_incr_x(mut arg: i32, x = 0)      Each(arg, || arg += x);
            return arg_incr_x(+7, -11) + 4;
        }
    `);

    ZERO(`
        fn main() {
            fn Each(cond, cons)                     cond && cons();
            fn arg_incr_x(mut arg: i32, x = 0): i32 {
                Each(arg, || arg += x);
                return arg;
            }
            return arg_incr_x(+7, -11) + 4;
        }
    `);

    ZERO(`
        fn main()
        {
            mut target = 0;

            fn Each(cond, cons) cond && cons();

            fn GET_mut(ref x: i32) x || (target = __solveStruct(target));

            fn __solveStruct(mut arg: i32, x = 0): i32 {
                Each(arg, || arg += x);
                if (arg) {
                    ref o = GET_mut(arg);
                    o++;
                    checkRecursions(o, o);
                }
                return arg;
            }

            fn checkRecursions(ref o: i32, incr: i32): void { GET_mut(o) += incr; }

            return __solveStruct(1) - 4;
        }
    `);

    ZERO(`
        fn main()
        {
            mut target = 0;

            // this suddenly reported that it doesn't see __solveStruct
            fn GET_mut(ref x) x || (target = __solveStruct(target));

            // while i was trying to reproduce an ambig "o" fail here
            fn __solveStruct(mut arg: i32): i32 {
                if (arg) {
                    ref o = GET_mut(arg);
                    o++;
                    checkRecursions(o, o);
                }
                return arg;
            }

            fn checkRecursions(ref o: i32, incr: i32): void { GET_mut(o) += incr; }

            return __solveStruct(1) - 4;
        }
    `);

    TODO_Map(`
        struct ValueType { modid: i32; };
        struct Type { using vtype: ValueType; };
        struct Target { modid: i32; index: i32; };
        struct Overload { name: string; id: string; };

        fn GET(target: Target): Overload =
            Overload(
                name: "N" ~ target.index,
                  id: "I" ~ target.index);

        fn main() {
            mut specs: Map(string, Target);

            fn setSpec(mangle: string) {
                ref t = specs[mangle] ||= Target;

                // This template should start expanding on GET(target).name,
                //  which should conflict with overload name.
                fn name(shadow target)
                    GET(target) <fail ambig>
                        .name;  <pass/>
                        .id;    </fail>

                return t.name;
            }

            return setSpec("hey").len - 2;
        }
    `);

    ZERO(`
        pub struct ScopeSkip { start: i32; end: i32; };

        pub fn Each(items: [$T], scope_skip: ScopeSkip[], fn, start = 0) {
            let END_DUMMY = ScopeSkip(start: items.len, end: items.len);

            mut i0 = start;
            for (mut i = 0; i < scope_skip.len + 1; i++) {
                let ss = i < scope_skip.len ? scope_skip[i] : END_DUMMY;
                if (ss.end <= i0)
                    continue;

                let i1 = ss.start;
                for (shadow mut i = i0; i < i1; i++)
                    fn(items[i]);

                i0 = ss.end;
            }
        }

        pub fn test(items?: i32[]) {
            mut sum = 0;
            let ss: ScopeSkip[];
            items.Each(ss, |item| sum += item, start: sum);
            return sum;
        }

        pub fn main() test();
    `);

    TODO_Map(`
        fn setupOperators(P_PREFIX_UNARY) // <- template
        {
            struct BINOP {
                PRECEDENCE:     Map(string, i32);
                RIGHT_TO_LEFT:  Map(i32,   bool);
            };

            mut out: BINOP; // <- no BINOP in scope
            mut precedence = P_PREFIX_UNARY;
            mut rightToLeft = false;

            fn binop(ops: string[]) {
                precedence++;
                out.RIGHT_TO_LEFT[precedence] = rightToLeft;
                for (mut i = 0; i < ops.len; i++)
                    out.PRECEDENCE[ops[i]] = precedence;
            }

            binop([ "|>" ]);

            //
            return out;
        }

        let BINOP = setupOperators(-1);

        fn main() {
            let precedence = BINOP.PRECEDENCE["|>"];
            return precedence;
        }
    `);

    ZERO(`
        fn Each(a: [$T], fn, start!?: i32)
            for (mut i = start; i < a.len; i++)
                fn(a[i]);

        fn main() {
            mut sum = 0;
            let a = [ 1, 2, 3 ];
            a.Each(|i| sum += i, start: sum);   // <- start inferred to ref i32, which couldnt definit
            return sum - 6;                     //     perhaps we can use the optionality to infer constness
        }
    `);

    ZERO(`
        <fail novec>
        novec // Abusing to test novec, unrelated to the test
        <pass/></fail>
        fn ScopeSkip_push(ref scope_skip: i32[]) {
            if (scope_skip) scope_skip[0]++;
            else            scope_skip ~= 1;
        }

        fn main() {
            mut scope_skip = [ 1 ];
            ScopeSkip_push(scope_skip);
            return scope_skip[0] - 2;
        }
    `);

    ZERO(`
        struct Module  { cpp:    string; };
        struct Context { module: Module; };     // Simplification of next test, no need to consider COW here

        fn snippet2cpp(cpp: string): string {
            let ctx = Context( Module(cpp) );
            {
                let module = ctx.module;        // This was const Module& =  ... which can't be moved from.
                if (module.cpp)
                    return module.cpp;          ;; EXPECT return static_cast<fu_STR&&>
            }

            return "";
        }

        fn main() snippet2cpp("1").len - 1;
    `);

    ZERO(`
        struct Module  { cpp:     string;   };
        struct Context { modules: Module[]; };  // Module[] is COW-capable -
                                                //  - either prove there's no COW,
        fn snippet2cpp(cpp: string): string {   //  - or don't attempt to move out the item.
            let ctx = Context([ Module(cpp) ]);
            for (mut i = 0; i < ctx.modules.len; i++)
            {
                let module = ctx.modules[i];    ;; TODO .unique(i)
                if (module.cpp)
                    return module.cpp;          ;; TODO return static_cast<fu_STR&&>
            }

            return "";
        }

        fn main() snippet2cpp("1").len - 1;
    `);

    ZERO(`
        fn test(x: string) {
            // cg fail: fwd annots of the two fns where unconsting hey to "enable move",
            //          basically the decision was made in the wrong scope.
            let hey = "hey";
            fn inner(you: string) you && hey ~ you || outer("what#1");
            fn outer(arg: string) inner(arg && " " ~ arg) || inner("what#2");
            return outer(x);
        }

        fn main() test("you").len - 7;
    `);

    ZERO(`
        struct Target { modid!: i32; packed!: i32; };
        inline fn index(a: Target) a.packed;

        <split/>

        struct CurrentFn { using target: Target; };
        fn hello(c?: CurrentFn) c.index;
        fn main() hello;
    `);

    ZERO(`
        struct ID   { offset: i32;  };
        struct Data { items:  ID[]; };

        using fn Data(implicit all: Data[], nid: ID): Data {
            return all[nid.offset];
        }

        fn test(node: ID) {
            let init = node.items[0];
            return init.items.len;
        }

        fn main() {
            let implicit all =  [ Data([ ID(1)      ])
                                , Data([ ID, ID, ID ]) ];

            return 0.ID.test - 3;
        }
    `);

    TODO_Map(`
        struct Context
        {
            fuzzy: Map(string, string);
            files: string[];
        }

        fn resolveFile(
            implicit ctx: &mut Context,
            from: string, name: string): string
        {
            let path    = from ~ name;
            let cached  = ctx.fuzzy[path];
            if (cached)
                return cached == "\v" ? "" : cached;

            fn tryResolve(): string
            {
                let exists = file::size(path) >= 0;
                if (exists)
                    return path;

                return "";
            };

            let resolve = tryResolve();
            ctx.fuzzy[path] = resolve || "\v";
            return resolve;
        }

        pub fn resolveFile(
            implicit ctx: &mut Context,
            path: string): string
        {
            let fuzzy = path.find('\v');
            if (fuzzy > 0)
            {
                let from = path.slice(0, fuzzy);
                let name = path.slice(fuzzy + 1);
                if (from && name && !name.has('\v'))
                {
                    let res = resolveFile(:from, :name);
                    if (res)
                        return res;

                    // Tests have the files prepopulated,
                    //  we only pay the cost of lookup when about to fail compile.
                    let prepopulated = from ~ name;
                    if (ctx.files.has(prepopulated))
                        return prepopulated;
                }
            }

            return path;
        }

        fn main() {
            implicit mut ctx: Context;
            return resolveFile("a").len - 1;
        }
    `);

    ZERO(`
        struct S { i: i32; };

        fn hello(ref s: S, w: i32) {
            infix fn |=(<fail ambig 6:17><pass/>shadow </fail>ref s: S, v: i32)
                s.i |= v << w;

            s |= 2;
        }

        fn main() {
            mut s = 1.S;
            s.hello(3);
            return s.i - 17;
        }
    `);

    ZERO(`
        fn lex(src: string) {
            let end = src.len;
            mut idx = 0;

            fn err_str(idx1: i32) {
                while (idx < end && src[idx] == ' ') idx++;
                return src.slice(idx, idx1);
            }

            fn err(idx1_x2: i32) err_str(idx1_x2 /2);
            return err(end *2);
        }

        fn main() lex("    hello").len - 5;
    `);

    ZERO(`
        pub fn ZERO(implicit ref sum: i32, mut sources: string[]): void
        {
            // Fuzzing module splits.
            for (mut i = 0; i < sources.len; i++)
            {
                for (;;)
                {
                    ref src     = sources[i];

                    mut start0  = src.find("[split/]");
                    if (start0 < 0)
                        break;

                    let start00 = start0;
                    let start1  = start0 + 8;
                    while (start0 && src[start0 - 1] == ' ') start0--;

                    let moduleA = src.slice(0, start0);
                    let moduleB = src[start0, start00] ~ "import _" ~ i ~ ";" ~ src[start1, src.len];
                    let without = src[0, start0] ~ src[start1, src.len];

                    sources[i]  = without;
                    ZERO(:sources);

                    sources[i]  = moduleA;
                    sources.insert(i + 1, moduleB);
                }

                sum += sources[i].len;
            }
        }

        fn main() {
            implicit mut sum: i32;

            ZERO( "AAAA|BB[split/]CC".split("|") );
            let expect = 4+2+2 + 4+2+2 + 10; // 10 = "import _0;"

            return sum - expect;
        }
    `);

    ZERO(`
        struct SolvedNode {
            bli: i32;
        };

        // --> [2] ... triggered the solve of this fn, ...
        fn SolvedNode(blah: string) {
            return SolvedNode(blah.len.NOT_PREPPED_YET);
        }

        // [1] During prep, this type annotation ...
        fn ARG_ANNOT_TRIGGERS_SOLVE(node: SolvedNode) {
            return node.bli + 2;
        }

        // --> --> [3] ... which couldnt yet see this fn (prep didnt reach here).
        fn NOT_PREPPED_YET(x: i32) {
            return x * 2;
        }

        fn main() {
            return ARG_ANNOT_TRIGGERS_SOLVE(SolvedNode("hello")) - (2*5+2);
        }
    `);

    ZERO(`
        struct SolvedNode       { nodeidx: i32; };
        struct CurrentFn        { using out: SolvedNode; };

        struct Target           { index: i32; };
        struct SolvedNodeData   { target: Target; };
        struct Overload         { nodes: SolvedNodeData[]; };

        fn test(ref overloads: Overload[],
                ref _current_fn: CurrentFn)
        {
            using fn GET(target: Target) {
                let o = overloads[target.index];
                return o;
            }

            using fn SolvedNodeData(nid: SolvedNode) {
                let nodes = overloads[nid.nodeidx].nodes;
                return nodes[nid.nodeidx];
            }

            let current_fn  = _current_fn.target;               // <- this is a ref into overloads
            let debug_2     = current_fn && GET(current_fn);    // <- this is the perceived write to overloads
            return debug_2 && current_fn.index;                 // <- which invalidates this read
        }

        fn main() {
            mut _current_fn = CurrentFn(SolvedNode(0));
            mut overloads   = [ Overload([ SolvedNodeData(Target(0)) ]) ];

            return test(overloads, _current_fn);
        }
    `);

    ZERO(`
        struct SolvedNode       { nodeidx: i32; };
        struct CurrentFn        { using out: SolvedNode; };

        struct Target           { index: i32; };
        struct SolvedNodeData   { target: Target; };
        struct Overload         { nodes: SolvedNodeData[]; };

        fn test(ref overloads: Overload[],
                ref _current_fn: CurrentFn)
        {
            using fn GET(target: Target) {
                if (target.index != 303) // Same as above, different setup.
                    return overloads[target.index];

                return []; // Also this fails to solve: cannot definit mutref
            }

            using fn SolvedNodeData(nid: SolvedNode) {
                return nid.nodeidx != 303 // Same as above, rewording as a logical.
                    && overloads[nid.nodeidx].nodes[nid.nodeidx];
            }

            let current_fn  = _current_fn.target;               // <- this is a ref into overloads
            let debug_2     = current_fn && GET(current_fn);    // <- this is the perceived write to overloads
            return debug_2 && current_fn.index;                 // <- which invalidates this read
        }

        fn main() {
            mut _current_fn = CurrentFn(SolvedNode(0));
            mut overloads   = [ Overload([ SolvedNodeData(Target(0)) ]) ];

            return test(overloads, _current_fn);
        }
    `);

    ZERO(`
        struct Token {
            col: i32;
            line: i32;
            value: string;
        };

        fn parse(tokens: Token[]) {
            mut _idx = 0;
            mut _loc = 0;

            fn fail(mut reason = "") {
                let loc  = tokens[_loc];
                let here = tokens[_idx];
                if (!reason)
                    reason = "Unexpected '" ~ here.value ~ "'.";

                let l0 = loc.line;  let c0 = loc.col;
                let l1 = here.line; let c1 = here.col;

                let addr = l1 == l0
                    ? "@" ~ l1 ~ ":" ~ c1
                    : "@" ~ l0 ~ ":" ~ c0 ~ ".." ~ l1 ~ ":" ~ c1;

                return throw(addr ~ ":\\n\\t" ~ reason);
            }

            fn consume(value: [byte], err = "") {
                let token = tokens[_idx];
                if (token.value == value) {
                    _idx++;
                    return token;
                }

                return fail((err || "Expected") ~ " '" ~ value ~ "', got '" ~ token.value ~ "'.");
            }

            fn parseRoot() {
                let ret = consume("sof");
                _loc = _idx;
                return ret;
            }

            return parseRoot();
        }

        fn main() {
            return parse([ Token(1, 1, "sof") ]).value.len - 3;
        }
    `);

    ZERO(`
        fn CallerNode(mut t?: i32, arr?: i32[])
        {
            for (mut i = 0; i < arr.len; i++) {
                return CallerNode(arr[i]);
                //     ^^^^^^^^^^
                // fn CallerNode: Arg #1, arr not assignable to host_arg:
                //      expect: []+252i32: ref copy resize
                //      actual: []+252i32: ref
            }

            return t;
        }

        fn main() = CallerNode();
    `);

    ZERO(`
        struct Target       { index: i32; };
        struct SolvedNode   { target: Target; args: SolvedNode[]; };

        fn CallerNode(
            mut target: Target,
            mut args: SolvedNode[] = [],
            reorder?: i32[],
            conversions?: Target[][]): SolvedNode
        {
            if (reorder) {
                mut args_out: SolvedNode[]; args_out.resize(reorder.len);
                for (mut i = 0; i < reorder.len; i++) {
                    let idx = reorder[i];
                    if (idx >= 0)
                        args_out[i] = args[idx];
                }

                args = args_out;
            }

            for (mut argIdx = 0; argIdx < conversions.len; argIdx++) {
                let conversion = conversions[argIdx];
                for (mut i = 0; i < conversion.len; i++) {
                    args[argIdx] = CallerNode(conversion[i]);
                    //             ^^^^^^^^^^
                    // fn CallerNode: Arg #2, reorder not assignable to host_arg:
                    //      expect: []+252i32: ref copy resize
                    //      actual: []+252i32: ref copy
                }
            }

            return SolvedNode(:target, :args);
        }

        fn main() {
            return CallerNode(Target(0)).target.index;
        }
    `);

    ZERO(`
        fn qSTACK(x: i32) {
            let rec = x & 1 && "rec ";
            let via = !rec && qSTACK(x / 2);
            return "\\n" ~ rec ~ "at #" ~ x ~ via;
        }

        fn main() qSTACK(2).len - 2 - 4 - 8 - 2;
    `);

    ZERO(`
        fn path_relative(from: string, to: string): string {
            let min = from.len < to.len ? from.len : to.len;

            mut same = 0;
            for (mut i = 0; i < min; i++) {
                let a = from[i];
                let b = to[i];

                if (b != a)
                    break;

                if (b == '/')
                    same = i + 1;
            }

            mut res: string;
            for (mut i = same; i < from.len; i++)
                if (from[i] == '/')
                    res ~= "../";

            res ~= to.slice(same);
            return res;
        }

        fn main() {
            let from    = "/a/b/c";
            let to      = "/a/e/f";
            let rel     = path_relative(:from, :to);

            return rel == "../e/f" ? 0 : 1;
        }
    `);

    ZERO(`
        inline fn test(ref a: i32[]) {
            if ((a[0] + a[2]) & 1) {
                shadow ref a = a[0, 2];
                return a;
            }
            else {
                shadow ref a = a[2, 4];
                return a;
            }
        }

        inline fn sum(ref a: [i32]) {
            mut sum = 0;
            for (mut i = 0; i < a.len; i++) sum += a[i];
            for (mut i = 0; i < a.len; i++) a[i] = sum;
            return a;
        }

        fn main() {
            mut a = [ 1, 2, 3, 4 ];
            return sum(test(a))[0] - 7;
        }
    `);

    ZERO(`
        inline fn test(ref a: i32[], ref b: i32[]) {
            if ((a[0] + b[0]) & 1)
                return a;

            return b;
        }

        inline fn sum(ref a: i32[]) {
            mut sum = 0;
            for (mut i = 0; i < a.len; i++) sum += a[i];
            a.shrink(1);
            a[0] = sum;
            return a;
        }

        fn main() {
            mut a = [ 1, 2 ];
            mut b = [ 3, 4 ];
            return sum(test(a, b))[0] - 7;
        }
    `);

    ZERO(`
        inline fn grow_if_oob(ref a: $T[], i: i32): &mut $T {
            if (a.len <= i)
                a.grow(i + 1);

            return a[i];
        }

        inline fn hey(ref arr: i32[], a: i32) {
            if (a & 1) {
                arr.grow_if_oob(a)++;
                <alt>
                return arr[0, a + 1];
                </alt>
            }

            return arr;
        }

        fn main() {
            mut a = [ 1 ];
            return a[0] - hey(a, 1)[1];
        }
    `);

    ZERO(`
        fn serializeType(type: string, debug: string)
            debug ~ ":" ~ type;

        fn mangleArguments(args: [$T]): string {
            mut mangle = "";
            for (mut i = 0; i < args.len; i++) {
                if (i) mangle ~= ",";
                mangle ~= serializeType(args[i], debug: "M");
            }
            return mangle;
        }

        fn trySpecialize(args: string[], ref args_mangled: string) {
            args_mangled ||= mangleArguments(args);
            return args_mangled.len;
        }

        fn main() {
            mut args_mangled: string;
            return trySpecialize([ "a", "b" ], args_mangled) - 7;
        }
    `);

    ZERO(`
        let EMIT_CPP = 1 << 0;
        let EMIT_OBJ = 1 << 1;
        let EMIT_BIN = 1 << 2;

        struct Cmd { self: string; options: i32 };

        inline fn unlessHasExt(str: string) {
            let idx = str.find('.');
            if (idx > 0)
                return [];

            return str;
        }

        fn parseOptions(argv: string[]) {
            mut idx = 0;
            fn next(): string {
                let i = idx++;
                if (i < argv.len) return argv[i];
                return "";
            }

            let self = next();
            if (argv.len == 1) // Exit 0 on no command, else we fail build-checks.
                return [];

            mut options: i32;
            mut val = next();
            while (val.len > 1 && val[0] == '-') {
                mut opt = val;
                if (opt[1] != '-') {
                    opt = [ opt[1] ];
                    val = '-' ~ val.slice(2);
                    if (val == "-")
                        val = next();
                }
                else
                    val = next();

                fn option(short: string, o: i32) {
                    if (opt == short) {
                        options |= o;
                        opt = "";
                    }
                }

                option("c", EMIT_CPP);
                option("o", EMIT_OBJ);
                option("b", EMIT_BIN);

                if (opt)
                    throw("Unknown option: '" ~ opt ~ "'.");
            }

            return Cmd(unlessHasExt(self), options);
        }

        fn main() = parseOptions([ "./hey", "-c", "-b" ]).options - (EMIT_CPP | EMIT_BIN);
    `);

    ZERO(`
        fn withPrefixed(b: byte, view: [byte], fn) {
            mut tmp: string;
            return fn(view.len > 1 ? view : tmp = b ~ view);
        }

        fn main() withPrefixed('a', "b"): |ab| return ab.len - 2;
    `);

    ZERO(`
        fn tryIntersect(left: [byte], right: [byte], withMatch) {
            let l =  left[0];
            let r = right[0];
            let lq = l > '0' && l < '8';
            let rq = r > '0' && r < '8';

            if (left[lq && 1, left.len] != right[rq && 1, right.len])
                return false;

            let ll = lq && l.i32 - '0'.i32;
            let rr = rq && r.i32 - '0'.i32;
            let qq = ll | rr;

            <alt>
            mut tmp: string;
            return withMatch(qq == ll ? left
                           : qq == rr ? right
                           : tmp = (qq.byte ~ left[lq && 1, left.len]),
            <alt/>
            return withMatch(qq == ll ? left
                           : qq == rr ? right
                           : qq.byte ~ left[lq && 1, left.len],
            </alt>
                left?:  qq == ll,
                right?: qq == rr);
        }

        fn main() {
            tryIntersect("7a012345678900123456789001234567890"
                       , "5a012345678900123456789001234567890"): |m, left!|
            {
                return m == "7a012345678900123456789001234567890" && left ? 0 : 100;
            }

            return 101;
        }
    `);

    ZERO(`
        fn tryIntersect(left: [byte], right: [byte], ifLeft, ifNotLeft) {
            let l =  left[0];
            let r = right[0];
            let lq = l > '0' && l < '8';
            let rq = r > '0' && r < '8';

            if (left[lq && 1, left.len] != right[rq && 1, right.len])
                return false;

            let ll = lq && l.i32 - '0'.i32;
            let rr = rq && r.i32 - '0'.i32;
            let qq = ll | rr;

            if (qq == ll)   ifLeft();
            else            ifNotLeft(qq == rr ? right : qq ~ right[rq && 1, right.len]);

            return true;
        }

        fn TP_get(typeParams!: string, id!: string)
        {
            id || assert();

            mut start = 0;
            for (;;)
            {
                let idx = typeParams.find(id, :start);
                if (idx < 0)
                    return -1;

                start = id.len;
                if (typeParams[start] == ' ')
                    return start + 1;
            }
        }

        fn TP_upsert(ref typeParams!: string, id!: string, canon: string) {
            let start = TP_get(:typeParams, :id);
            if (start < 0) {
                typeParams ~= id;
                typeParams ~= canon;
                typeParams ~= '\t';
                return true;
            }

            let end = typeParams.find('\t', :start);
            return tryIntersect(typeParams[start, end], canon,
                ifLeft: || { /* egyptian */
                    return true;
                },                  // <- Lint complained about the nested curlies here ...
                ifNotLeft: |inter|
                { /* pedantic */
                    typeParams.splice(start, end - start, inter);
                    return true;
                });                 // <-  ... and here.

            return false;
        }

        fn main() {
            mut typeParams = "$T 3hey\t";
            return TP_upsert(:typeParams, id: "$T", "4hey")
                && typeParams == "$T 7hey\t" ? 0 : 101;
        }
    `);

    ZERO(`
        fn fails_with_silly_error(ref set: i32[], i) {
            <fail bad call arg 4:18>
            set  ||= i; <pass/> // this BUGged out instead of
            set   ~= i; </fail> //  outputing a decent err msg
            return set;
        }

        fn main() {
            mut set = [ 0 ];
            fails_with_silly_error(set, 2);

            mut sum = 0;
            for (mut i = 0; i < set.len; i++) sum += set[i];
            return sum - 2;
        }
    `);

    ZERO(`
        fn solve(ref output: i32[], input: i32[])
        {
            fn SLOW_traverse(visit)
                for (mut i = 0; i < input.len; i++)
                    visit(input[i]);

            fn qSTACK(id: i32, implicit _current_fnort: i32) {
                SLOW_traverse: |x|
                    if (id == x)
                        return id || _current_fnort;

                return 0;
            }

            fn doTrySpecialize(target: i32)
            {
                fn updateScope(result: i32)
                    output ~= result || qSTACK(result + 1);

                if (target & 1) {
                    updateScope(target); // 1 - 1
                    return;
                }

                let implicit _current_fnort = target;
                updateScope(target / 2); // 4 - 2, 2 - 1, 0 - 0
            }

            let implicit _current_fnort = 1;

            doTrySpecialize(1);
            for (mut i = 0; i < input.len; i++)
                doTrySpecialize(input[i]);
        }

        fn main() {
            mut output: i32[];
            solve(output, input: [ 0, 3 ]);

            return output[0] == 1
                && output[1] == 0
                && output[2] == 3 ? 0 : 1;
        }
    `);

    ZERO(`
        <fail does nothing><pass/>
        lax                </fail>
        fn noop_let_lax(ref x: i32) {
            let lax y = x;
        }

        fn main() {
            mut x = 0;
            noop_let_lax(x);
            return x;
        }
    `);

    ZERO([`
        fn compile_begin(mul: i32) {
            let id = mul * 10;
            let implicit options = getModule(:id);
            return compile(:id);
        }

        fn compile(implicit options: i32, id: i32) {
            return getModule(id) + options;
        }

        fn getModule(id: i32, implicit ctx: i32) {
            return ctx + id;
        }
    `,
    `
        import _0;

        fn main() {
            let implicit ctx = 2;
            return compile_begin(3) - 64;
        }
    `]);

    // /quite right


    // Let's move on to some cooler quality of life shit.

    ZERO(`
        let a = 7;
        let b = a && 3;
        return b - 3;
    `);

    ZERO(`
        struct S { i: i32; }

        let a = S(0);
        let b = S(3);

        return a.i
            || (b || S(4)).i * 2 - (a || S(6)).i
            && throw("woot");
    `);

    ZERO(`
        struct TrueStory { kind: string; value: string; };

        mut specialized = TrueStory(kind: "fn", value: "val");

        specialized.kind == "fn" && specialized.value || throw("nope");

        let v: &mut string = specialized.kind == "fn"
                          && specialized.value
                          || throw("nope");
        v ~= "ue";

        return specialized.value == "value" ? 0 : 1;
    `);

    ZERO(`
        struct Token {
            value: string;
        };

        fn consume(): Token {
            return Token("hey");
        };

        fn main(): i32 {
            let a = 3;
            let v = a && consume().value;
            return v.len - a;
        };
    `);

    ZERO(`
        struct ScopeIdx { raw: i32; };
        <fail bad call to = 12:27>
        fn thing(x: i32) x;             <pass/>
        fn thing(x: i32) ScopeIdx(x);   </fail>
        mut _return_scope: ScopeIdx;

        fn hey(x: i32) {
            let scope0 = thing(x);
            _return_scope = scope0; //overload
            return _return_scope.raw;
        }

        return hey(0);
    `);

    ZERO(`
        fn maybe_empty(N: i32) {
            mut res: string[];
            for (mut i = 0; i < N; i++) res ~= [ "world!" ]; // same as below but wrapped
            return res;
        }
        fn main() {
            mut arr = [ "Hello" ];
            for (mut i = 0; i < 2; i++) arr ~= maybe_empty(i); // will append empty
            return arr.join(" ") == "Hello world!" ? 0 : 1;
        }
    `);

    ZERO(`
        fn maybe_empty(N: i32) {
            mut res: string[];
            for (mut i = 0; i < N; i++) res ~= "world!"; // cpp template issue here
            return res;
        }
        fn main() {
            mut arr = [ "Hello" ];
            for (mut i = 0; i < 2; i++) arr ~= maybe_empty(i); // will append empty
            return arr.join(" ") == "Hello world!" ? 0 : 1;
        }
    `);

    ZERO(`
        fn main() {
            mut _info = "abc";

            pure fn fail(mut reason: string = "") {
                ref info = _info[0]; // <- notice the ref, has to relax away
                reason ~= info && info.i32;
                return reason;
            }

            return fail.len - 2; // 'a' is 97, "97".len is 2.
        }
    `);

    ZERO([
    `
        let q_mutref = 1;
        pub let RELAX_mutref_only = q_mutref;
        pub fn what(relax_mask: i32) relax_mask -1;
    `,
    `
        import _0;
        fn main() what(RELAX_mutref_only);
    `]);

    TODO_Map(`
        pub fn pairs(a: Map($K, $V), fn) {
            let k = a.keys;
            let v = a.values;
            for (mut i = 0; i < k.len; i++)
                fn(k[i], v[i]);
        }

        fn main() {
            mut map: Map(i32, i32);
            map[1] = 2;
            map[3] = 4;

            mut sum = 0;
            map.pairs(|k, v| sum += k + v * 100);
            return sum - 604;
        }
    `);

    ZERO(`
        fn main() {
            try         { return 0; }
            catch (e)   { return e == "x=2: even!" ? 11 : 22; }
        }
    `);

    ZERO(`
        fn fail(str: string)
            throw(str ~ "!");

        fn test(x: i32)
        {
            // We want to override fail but
            //  we want to call it within the override,
            //   so we can do this i guess?
            //
            shadow let fail = |mut str: string| {
                str = "x=" ~ x ~ ": " ~ str;
                fail(str);
            };

            return x & 1 || fail("even");
        }

        fn main() {
            try {
                return test(2);
            }
            catch (e) {
                <alt>
                return e == "x=2: even!" ? 0 : 10;
                <alt/>
                shadow let e = "hello " ~ e;
                return e == "hello x=2: even!" ? 0 : 10;
                </alt>
            }
        }
    `);


    // Various templating fallacies.
    //
    // TODO figure these out -
    //  These are problematic in a bunch of ways here.
    //   But mostly, the case patterns for this kind of thing are outright moronic.

    ZERO(`
        fn ARR_LAST(a: $T[])
            case ($a -> &mut $T[]): &mut $T a[a.len - 1];
            case ($a -> &    $T[]): &    $T a[a.len - 1];

        fn main()
        {
            let a = [1];
            mut b = [2];

            b.ARR_LAST += a.ARR_LAST;
            return b.ARR_LAST - 3;
        };
    `);

    ZERO(`
        fn ARR_LAST(a: $T[])
            case ($a -> &mut $T[]): &mut $T a[a.len - 1];
            case ($a -> &    $T[]): &    $T a[a.len - 1];

        let a = [1];
        mut b = [2];

        b.ARR_LAST += a.ARR_LAST;
        return b.ARR_LAST - 3;
    `);

    ZERO(`
        struct S { i: i32; }
        fn test(mut x: S) x.i += 1;
        return S(-1).test;
    `);

    ZERO(`
        fn ARR_LAST(a: $T[])
            a[a.len - 1];

        let a = [1];
        mut b = [2];

        b.ARR_LAST += a.ARR_LAST;
        return b.ARR_LAST - [3].ARR_LAST;
    `);

    ZERO(`
        struct mat4 { i: i32; };
        struct RenderFrame { u_mat4_VP: mat4; };

        inline fn mat4_identity() mat4(1);

        fn test(output: &mut RenderFrame) {
            output.u_mat4_VP = mat4_identity;
        }

        fn main() {
            mut ret: RenderFrame;
            test(ret);
            return ret.u_mat4_VP.i - 1;
        }
    `);

    ZERO(`
        pub struct ScopeSkip {
            start: i32;
            end:   i32;
        };

        pub fn search(skip: ScopeSkip = [])
            skip.end - skip.start;

        pub fn main()
            <fail bad call to ScopeSkip 12:22>
            ScopeSkip(min: -1, max: +1)     <pass/>
            ScopeSkip(start: -1, end: +1)   </fail>
                .end - 1;
    `);

    ZERO(`
        struct vec3 { x?: f32; y?: f32; z?: f32; };

        struct mat34 {
            mx: vec3; my: vec3; mz: vec3;
            mo: vec3;
        };

        inline fn mat34_identity()
            mat34(
                vec3(x: 1),
                vec3(y: 1),
                vec3(z: 1), vec3 /*point3*/);

        // What broke is this using reports a conflict,
        //  because 'determinant' got expanded within 'inverse',
        //   and there's another using mat34 there.
        //    Basically we totally don't want it to expand there.
        inline fn determinant(using _: mat34): f32
            - mz.x * my.y * mx.z + my.x * mz.y * mx.z + mz.x * mx.y * my.z
            - mx.x * mz.y * my.z - my.x * mx.y * mz.z + mx.x * my.y * mz.z;

        fn inverse(using mat: mat34): mat34
        {
            let idet = 1 / mat.determinant;

            let i_mx = vec3(
                idet * (- mz.y * my.z + my.y * mz.z),
                idet * (+ mz.y * mx.z - mx.y * mz.z),
                idet * (- my.y * mx.z + mx.y * my.z));

            let i_my = vec3(
                idet * (+ mz.x * my.z - my.x * mz.z),
                idet * (- mz.x * mx.z + mx.x * mz.z),
                idet * (+ my.x * mx.z - mx.x * my.z));

            let i_mz = vec3(
                idet * (- mz.x * my.y + my.x * mz.y),
                idet * (+ mz.x * mx.y - mx.x * mz.y),
                idet * (- my.x * mx.y + mx.x * my.y));

            return mat34(
                i_mx, i_my, i_mz,

                vec3( // point3
                      mo.x * -i_mx.x +
                      mo.y * -i_my.x +
                      mo.z * -i_mz.x,

                      mo.x * -i_mx.y +
                      mo.y * -i_my.y +
                      mo.z * -i_mz.y,

                      mo.x * -i_mx.z +
                      mo.y * -i_my.z +
                      mo.z * -i_mz.z));
        }

        fn main() i32 <|
            mat34_identity.inverse.determinant - 1;
    `);

    ZERO(`
        struct TEA
        {
            v0: u32;
            v1: u32;
        }

        inline fn r4(using _: &mut TEA, sum: &mut u32)
        {
            mut delta: u32 = 0x9e3779b9;

            for (mut i = 0; i < 4; i++) {
                sum += delta;

                v0 += ((v1<<4) + 0xA341316C) ^ (v1 + sum) ^ ((v1>>5) + 0xC8013EA4);
                v1 += ((v0<<4) + 0xAD90777D) ^ (v0 + sum) ^ ((v0>>5) + 0x7E95761E);
            }
        }

        // Stack overflow solving this,
        //  argmax is +inf, and it just
        //   re-enters and re-enters.
        inline fn r4(tea: &mut TEA) {
            mut sum: u32; tea.r4(sum);
        }

        fn main() {
            mut tea: TEA;
            tea.r4();
            return (tea.v0 ^ tea.v0).i32;
        }
    `);

    TODO_conv(`
        struct ScopeSkip {
            min: i32;
            max: i32;
        };

        fn main() {
            let a = 1;
            mut x: ScopeSkip; x = []; x = [ -2, 0 ]; // Inference fail.
            mut t: ScopeSkip; t = x.min && [ x.min, a ];
            return a + t.min + t.max;
        }
    `);

    ZERO(`
        // Same as below, but avoids the $T call, which is also broken somehow.
        //  DONT DELETE ME after you fix the $T, its a great example of stupid codegen -
        //   we emit useless overloads for mutrefs when its clearly useless.

        fn rec_cases(a: $T)
        case ($T.is::primitive) {
            if (a)      return rec_cases(a / 2);
            else        return a;
        }
        default {
            if (a.i) {
                shadow mut a = a;
                a.i /= 2;
                return rec_cases(a);
            }
            else        return rec_cases(a.i);
        }

        struct X { i: i32; };
        fn main() X(1).rec_cases;
    `);

    ZERO(`
        fn rec_cases(a: $T)
        case ($T.is::primitive) {
            if (a)      return rec_cases(a / 2);
            else        return a;
        }
        default {
            if (a.i)    return rec_cases($T(i: a.i / 2));
            else        return rec_cases(a.i);
        }

        struct X { i: i32; };
        fn main() X(1).rec_cases;
    `);

    ZERO(`
        struct X { i: i32; };
        type Y = X;
        fn main() Y(1).i / 2;
    `);

    ZERO(`
        struct Node {
            kind  ?: string;
            items ?: Node[];
            value ?: string;
        };

        fn astReplace(node: Node, mutate): Node {
            fn walk(shadow ref node: Node) {
                for (mut i = 0; i < node.items.len; i++)
                    walk(node.items[i]);

                mutate(node);
            }

            shadow mut node = node;
            walk(node);
            return node;
        }

        fn test(n: Node, a: string, b: string) {
            return astReplace(n, |ref item: Node| {
                if (item.value == a) {
                    if (item.items.len == 1 && item.kind == "call")
                        item.value = b;
                    else if (item.kind == "str")
                        item.value = b;
                }
            });
        }

        fn main() {
            let v0 = Node(kind: "str", value: "woot");
            let v1 = v0.test("woot", "who");
            return v1.value.len - 3;
        }
    `);


    // Let's try something new.

    ZERO(`
        struct SolvedNode {
            value: i32;
            items?: SolvedNode[];
        };

        fn visitNodes(_v: &mut $V, _n: SolvedNode) {

            fn traverse(v: &mut $V, n: SolvedNode) {
                v.visit(n);
                for (mut i = 0; i < n.items.len; i++)
                    traverse(v, n.items[i]);
            }

            traverse(_v, _n);
        };

        struct Visitor {
            sum: i32;
        };

        fn visit(using v: &mut Visitor, node: SolvedNode) {
            sum += node.value;
        };

        fn main(): i32 {
            let tree = SolvedNode(3,
                [ SolvedNode(5), SolvedNode(7) ]);

            <alt>
            // This is an aside, managed to lose the copy qual when working structs
            //  Initially noticed it because visitNodes tried to change its sighash
            mut cpy = tree; cpy = tree; // <- but this fails cleanly when tree is nocopy
            </alt>

            mut myVisitor: Visitor;
            myVisitor.visitNodes(tree);
            return myVisitor.sum - 15;
        };
    `);

    ZERO(`
        return 0 > 1 ? throw("should type check") : 0;
    `);

    ZERO(`
        fn throw_hey(): i32 {
            throw("hey");
            return 1;
        }

        fn main(): i32 {
            try {
                let _x = throw_hey();
                return _x || 7;
            }
            catch (err) {
                return err.len - 3;
            }
        }
    `);

    ZERO(`
        fn throw_hey() {
            throw("hey");
        }

        fn main(): i32 {
            try {
                let _x = throw_hey();
                return _x || 7;
            }
            catch (err) {
                return err.len - 3;
            }
        }
    `);

    ZERO(`
        fn throw_hey(): i32 {
            throw("hey");
            return 1;
        }

        fn main(): i32 {
            try {
                return throw_hey();
            }
            catch (e) {
                return e.len - 3;
            }

            return 11;
        }
    `);

    ZERO(`
        fn main()
            cli_handle([ "hello", "you" ]);

        fn cli_handle(args: string[]): i32
        {
            mut idx = 0;

            fn next() {
                let i = idx++;
                if (i < args.len)
                    return args[i];

                return "";
            }

            // Router.
            return next().len - 5;
        }
    `);


    // Lifetimes, type inference, copy elision, temporaries.

    ZERO(`
        fn test() {
            mut x = 5;
            return x;
        }

        fn main()
            test() - 5;
    `);

    ZERO(`
        struct Test { i: i32; };

        fn test() {
            mut x = Test(5);
            return x;
        }

        fn main()
            test().i - 5;
    `);

    ZERO(`
        struct Test { a: i32; b: i32; };

        fn test() {
            mut x = Test(5, -5);
            return x;
        }

        fn main()
            test().a + test().b;
    `);

    ZERO(`
        struct X { x: i32; };
        fn ref2arg(x: X) = x;

        fn main() {
            let NOTREF = ref2arg(X(101));
            return NOTREF.x - 101;
        }
    `);

    ZERO(`
        <fail explicit clone 8:21>
        nocopy <pass/></fail>
        struct Copied { x: i32; };

        fn main() {
            let a = Copied(1);
            mut b = a;
            b.x++;
            return b.x - a.x * 2;
        }
    `);

    ZERO(`
        struct XY { x: i32; y: i32; };
        fn ref2arg(v: XY) = v;

        fn main() {
            let a = XY(99, 2);
            let ref2a = ref2arg(a);
            return mem::ptr_eq(a, ref2a) ? 0 : 1;
        }
    `);

    ZERO(`
        nocopy struct NoCopy { i: i32; };
        fn retmutref(ref nc: NoCopy) nc;

        fn main() {
            mut nc: NoCopy;
            nc.retmutref.retmutref.i++;
            return nc.i - 1;
        }
    `);

    ZERO(`
        nocopy struct NoCopy { i: i32; };
        fn mutrefself(ref nc: NoCopy) {
            nc.i++;
            return nc;
        }

        fn main() {
            mut nc: NoCopy;
            nc.mutrefself().mutrefself();
            return nc.i - 2;
        }
    `);

    ZERO(`
        nocopy struct NoCopy { i: i32; };

        fn      retarg(a: NoCopy) a;
        fn  retargs_if(a: NoCopy, b: NoCopy) a.i ? b : a;
        fn  retargs_or(a: NoCopy, b: NoCopy) a || b;
        fn retargs_and(a: NoCopy, b: NoCopy) a && b;

        fn main() {
            let a: NoCopy;
            let b: NoCopy;
            return retarg(retargs_if(a, retargs_and(a, retargs_or(a, b)))).i;
        }
    `);

    ZERO(`
        nocopy struct NoCopy { i: i32; };

        fn      retarg(a: NoCopy) a;
        fn  retargs_if(a: NoCopy, b: NoCopy) a.i ? b : a;
        fn  retargs_or(a: NoCopy, b: NoCopy) a || b;
        fn retargs_and(a: NoCopy, b: NoCopy) a && b;

        fn main() {
            let a: NoCopy;                      // <- b now temp

            return retarg(retargs_if(a, retargs_and(a, retargs_or(a, NoCopy)))).i;
        }
    `);

    ZERO(`
        nocopy struct NoCopy { i: i32; };

        fn      retarg(a) a;                    // <- now templates
        fn  retargs_if(a, b) a.i ? b : a;
        fn  retargs_or(a, b) a || b;
        fn retargs_and(a, b) a && b;

        fn main() {
            mut a: NoCopy;                      // <- now muts
            mut b: NoCopy;
            retarg(retargs_if(a, retargs_and(a, retargs_or(a, b)))).i++;
            return a.i + b.i - 1;
        }
    `);

    ZERO(`
        fn as_blocks_after(x: i32) {
            mut zero = 0;
            if (x > 2) // a broken stmt emit lifted the loop out of the conditional
                for (mut i = 0; i < x; i++)
                    zero = i + i*zero;

            return zero;
        }

        fn main() 2.as_blocks_after;
    `);

    ZERO(`
        struct Lifetime { woot: Lifetime[]; };

        fn Lifetime_test(x: Lifetime) {
            x.woot.len & 1 && throw("This is very important.");
            for (mut i = 0; i < x.woot.len; i++) Lifetime_test(x.woot[i]);
            return x;
        }

        fn Lifetime_fromBinding(x: i32) {
            mut woot: Lifetime[];
            for (mut i = 0; i < x; i++)
                woot[i] = Lifetime();

            ;; !N_NonTrivAutoCopy
            //
            //  1. Move 'woot' into Lifetime
            //      instead of naively copying it.
            //                             ....
            return Lifetime_test(Lifetime(:woot));
            //     ....
            //  2. Move the result out even though
            //      Lifetime_test takes and returns refs.
        }

        fn main() 0.Lifetime_fromBinding.woot.len;
    `);

    ZERO(`
        fn test(x: i32) {                       // none of these need vecs
            let c = [10007];                    ;; TODO fu::slate<1, int> c
            let a = [7, 11, 9, 21, x, x, x, x]; ;; TODO fu::slate<2, int> a
            let b = {                           ;; TODO fu::slate<1, int> b
                :BRK {                          // !N_NonTrivAutoCopy
                    if (x & 2) break :BRK c;
                    if (x & 1) break :BRK [ x ]; // a val
                    a // a ref
                }
            };
            return a[0] - b[0] * a[1];
        }

        fn main() 1.test + 4.test + 74;
    `);


    // Returning a mut arg.

    ZERO(`
        struct Test { i: i32[]; };

        fn test(mut x: Test) {
            x.i[0] += x.i[1];
            return x;
        }

        fn main() {
            let s = Test([ 1, 2 ]);
            return test(s).i[0] - s.i[0] * 3;
        }
    `);

    ZERO(`
        struct Test { i: i32[]; };

        fn test(mut x: Test): Test {
            x.i[0] += x.i[1];
            return x;
        }

        fn main() {
            let s = Test([ 1, 2 ]);
            return test(s).i[0] - s.i[0] * 3;
        }
    `);

    ZERO(`
        fn compile_snippets(x0: string) x0.find('a') && throw("throw#1");
        fn ZERO(x1: string) x1.find('b') && throw("throw#2");

        fn FAIL(x2: string): string {                   ;; EXPECT fu::view<char> x2
            try {
                let ctx = compile_snippets(x2) && "hey";
                return ctx;
            }
            catch (e) {
                return ZERO(x2) && e;
            }
        }

        fn main() FAIL("a").len;
    `);

    ZERO(`
        // The thing below but shorter:
        //  the '|| throw' introduces a bullshit lambda during codegen,
        //   which misreturns a dangling reference to its own frame.
        fn test(x: string) [x][0] || throw("nope!");
        fn main() "what".test.len - 4;
    `);

    ZERO(`
        fn only(s: $T[]) s.len == 1 ? s[0] : throw ("len != 1: " ~ s.len);

        struct Node       { kind: string; };
        struct SolvedNode { kind: string; };

        fn solveNodes(n: Node[]) {
            mut r: SolvedNode[];
            for (mut i = 0; i < n.len; i++) r ~= SolvedNode(n[i].kind);
            return r;
        }

        // the '|| throw' introduces a bullshit lambda during codegen,
        //  which misreturns a dangling reference to its own frame.
        fn solveDeclExpr(n: Node) solveNodes([ n ]).only || throw ("!only");

        fn main() solveDeclExpr(Node("a")).kind.len - 1;
    `);

    ZERO(`
        pub fn test(x: i32): i32[] { ;; !N_NonTrivAutoCopy
            mut a = [ 4 ];
            mut b = [ 5 ];
            mut c = [ 6 ];

            for (mut i = 0; i < x; i++) {
                a.unshift(x);
                b.unshift(x);
                c.unshift(x);
            }

            inline fn which() {
                return :test x & 1 ? a : b;
            }

            if !(x & 2)
                return which();

            return c;
        }

        fn main() test(2)[2] + test(1)[1] - 2 * test(0)[0];
    `);


    // Returning never vs void.

    ZERO(`
        fn incr_x_to_1(ref x: i32) {
            x && throw("this reports return t_never");
            fn incr_x() { return x++; }
            incr_x();
        }
        fn main() {
            mut x = 0;
            incr_x_to_1(x);
            return x - 1;
        }
    `);

    ZERO(`
        fn main() {
            mut x = 0;
            fn incr_x_to_1() {
                x && throw("this reports return t_never");
                fn incr_x() { return x++; }
                incr_x();
            }
            incr_x_to_1();
            return x - 1;
        }
    `);

    ZERO(`
        fn apply(fn, v) fn(v);
        fn main() {
            mut x = 0;
            fn scope_using(via: i32) {
                x && throw("this reports return t_never");
                // which messed up retcount for scope_using
                fn visit(item: i32) {
                    if (item) return item;
                    return x++;
                }
                apply(fn visit, via);
            }

            scope_using(x);
            return x - 1;
        }
    `);


    // Usability of numeric literals.

    ZERO(`
        fn main()
            i32(PI * 2.0) - 6;
    `);

    ZERO(`
        fn main()
            i32(PI * 2 - 6);
    `);

    ZERO(`
        fn main()
            PI * 2 - 6 |> i32;
    `);

    ZERO(`
        fn main()
            i32 <| PI * 2 - 6;
    `);

    ZERO(`
        let x: f32 = 1; fn main() 1 - x.i32;
    `);

    ZERO(`
        let x: f32 = 1.0; fn main() 1 - x.i32;
    `);

    ZERO(`
        let x: u8 = 1; fn main() 1 - x.i32;
    `);

    ZERO(`
        let x = 1.f32; fn main() 1 - x.i32;
    `);

    ZERO(`
        fn gt0(x: f32) x > 0;
        fn main() gt0(1.f32) ? 0 : 1;
    `);

    ZERO(`
        struct Hey { x: f32; };
        fn hey() Hey(1);
        fn main() hey.x.i32 - 1;
    `);

    ZERO(`
        struct vec3 { x?: f32; y?: f32; z?: f32; };
        fn test(i: i32) vec3(x: (i - 2).f32, z: 1);
        fn main() {
            let v = test(1);
            return (v.x + v.z).i32;
        }
    `);

    ZERO(`
        struct vec3 { x?: f32; y?: f32; z?: f32; };
        fn test(f: f32) vec3(x: f, z: -1);
        fn main() {
            let v = test(-1);
            return (v.x - v.z).i32;
        }
    `);

    ZERO(`
        fn hey(i: f32) i.f32 + 0.5;
        fn main() hey(1).i32 - 1;
    `);

    ZERO(`
        fn lin2srgb(l: f32): f32
            l <= 0.0031308
                ? l * 12.92
                : 1.055 * pow(l, 1/2.4.f32) - 0.055;

        fn lin255(v: f32) u32 <|
            v.lin2srgb.max(0).min(1) * 255.99;

        fn main() i32 <|
            lin255(1) - 255;
    `);

    ZERO(`
        struct vec3 { x?: f32; y?: f32; z?: f32; };

        inline fn /(a: f32, b: vec3)
            vec3(a / b.x, a / b.y, a / b.z);

        fn main() i32 <|
            (1/vec3(x: 1)).x - 1;
    `);

    ZERO(`
        let QUAD_DATA: f32[] =
        [
            -1, -1, 0,      0, 0, 1,    0, 0, 0,
            +1, +1, 0,      0, 0, 1,    1, 1, 0,
            -1, +1, 0,      0, 0, 1,    0, 1, 0,

            -1, -1, 0,      0, 0, 1,    0, 0, 0,
            +1, -1, 0,      0, 0, 1,    1, 0, 0,
            +1, +1, 0,      0, 0, 1,    1, 1, 0,
        ];

        fn main() QUAD_DATA.len - 6 * 9;
    `);

    ZERO(`
        fn test(a: bool): u8 = a ? 1 : 0;

        fn main() test(false).i32;
    `);

    ZERO(`
        fn test(a: bool): u8 = a && 1;

        fn main() test(false).i32;
    `);

    ZERO(`
        pub let A_u8: u8 = 0x0;

        fn ATTRIB(type: u8, count: i32, srgb = false): u8
            = type & 0x3 | count.u8 << 2

            // TODO can't deep-retype the last cast unfortunately:
            //  we need another hint to drive typing here,
            //   perhaps monogenous signatures, or else.
            | (srgb && 0x80.u8);

        fn main() ATTRIB(A_u8, 4).i32 - 16;
    `);

    ZERO(`
        pub struct Geometry    { g: i32; };
        pub struct Texture     { t: i32; };
        pub struct RenderFrame { r: i32; };

        pub struct LogicFrame_in
        {
            lastLogic:  LogicFrame;
        };

        pub struct LogicFrame
        {
            DATA_fbx:   Geometry;
            TEX_A:      Texture;
            TEX_AO:     Texture;
            TEX_M:      Texture;
            TEX_N:      Texture;
            TEX_R:      Texture;
            HDR:        Texture;
        };

        pub struct RenderFrame_in
        {
            w:          i16;
            h:          i16;
            frame:      i32;

            mouseX:     f32;
            mouseY:     f32;
            mouseBtns:  i32;

            using logic:    LogicFrame;
            lastRender:     RenderFrame;
        };

        pub fn APP_renderFrame(using args: RenderFrame_in): RenderFrame
        {
            return RenderFrame(args.HDR.t);
        }

        fn main() 0;
    `);

    ZERO(`
        fn leadingDigit(name: string) name[0].u8 - '0'.u8 < 10;
        fn main() "hello".leadingDigit.i32;
    `);

    ZERO(`
        fn main() 1_000_000 - 1000000
               || 0xffff_ffff.i32 - 0xffffffff.i32
               || 123_456.789.i32 - 123456.789.i32;
    `);

    ZERO(`                                  // litfix through && /////
        fn test(a: u32, shadows: bool)      (a << 1) | (shadows && 1);
        fn main()                           test(1, true).i32 - 3;
    `);

    ZERO([`
        struct vec3 { x?: f32; y?: f32; z?: f32; };
        inline fn *(a: vec3, b: vec3) vec3(a.x * b.x, a.y * b.y, a.z * b.z);
        inline fn *(a: vec3, b: f32) vec3(a.x * b, a.y * b, a.z * b);
        inline fn lensq(a: vec3) a.x * a.x + a.y * a.y + a.z * a.z;
        inline fn len(a: vec3) a.lensq.sqrt;

        inline fn norm(a: vec3) {
            mut n = 1 / a.len;
            n = n.finite ? n : 0;
            return a * n;
        }
    `,`
        inline fn test(ref v) {
            v = v.norm();
            return v.len;
        }

        fn main() {
            mut v = _0::vec3(2, 0, 0);
            return v.test() == 1 ? 0 : 1;
        }
    `]);


    // Typedefs.

    ZERO(`
        type Test = i32[];
        fn yo(t: Test) t[0] + t[1];
        fn main() yo([-1, +1]);
    `);

    ZERO(`
        fn if_first(a: $T[]) a && a[0];
        fn hello(a: i32[]) a.if_first;
        fn main() hello([ 3 ]) - 3;
    `);

    ZERO(`
        fn if_first(a: $T[]) a && a[0];
        type X = i32[];
        fn hello(a: X) a.if_first;
        fn main() hello([ 3 ]) - 3;
    `);

    ZERO(`
        fn if_first(a: $T[]) a && a[0];

        fn list(): i32[][] {
            return [[ 3 ]];
        }

        fn hello() list.if_first.if_first;
        fn main() hello - 3;
    `);

    ZERO(`
        fn if_first(a: $T[]) a && a[0];
        type X = i32[];

        fn list(): X[] {
            return [[ 3 ]];
        }

        fn hello() list.if_first.if_first;
        fn main() hello - 3;
    `);


    // Trivial equality.

    ZERO(`
        let arr = [1, 2];
        fn eq(a: i32[], b: i32[]) a == b;
        fn main() eq(arr, arr) ? 0 : 1;
    `);

    ZERO(`
        let arr = [1, 2];
        fn eq(a: $T[], b: $T[]) a == b;
        fn main() eq(arr, arr) ? 0 : 1;
    `);


    // Slices.

    ZERO(`
        fn test(hey: [i32])
            hey[0] + hey[1];

        fn main()
            test([-1, +1]);

        ;; EXPECT fu::slate<2, int> { -1, +1 }
    `);

    ZERO(`
        fn test(hey: &mut [i32])
            hey[0] += hey[1];

        fn main() {
            mut hey = [-1, +1];
            return hey.test();
        }
    `);

    ZERO(`
        fn test(i: i32) [ i, i + 1 ];
        fn main() test(0)[1] - 1;
    `);

    ZERO(`
        fn test(hey: byte[])
            hey.view(u32)[0];

        fn main() {
            mut hey: byte[] = [ byte(1), byte(1), byte(1), byte(1) ];
            return (hey.test - 0x1010101).i32;
        }
    `);

    ZERO(`
        fn test(hey: [i32])
            hey[0] + hey[1];

        fn main() {
            let hey = [7, -1, +1];
            return test(hey[1, 3]);
        }
    `);

    ZERO(`
        fn test(hey: &mut [i32])
            hey[0] += hey[1];

        fn main() {
            mut hey = [7, -1, +1];
            return hey[1, 3].test();
        }
    `);

    ZERO(`
        fn test(hey: &mut [i32])
            hey.= [2, -3];

        fn main() {
            mut hey = [1, 0, 0];
            test(hey[1, 3]);
            return hey[0] + hey[1] + hey[2];
        }
    `);

    ZERO(`
        struct Hey {
            i: i32;
        };

        fn test(out: &mut [Hey]) {
            out.view(u8) .= [ 1.u8, 1.u8, 1.u8, 1.u8 ];
        }

        fn main() {
            mut a = [ Hey ];
            a.test();
            return a[0].i - 16843009;
        }
    `);

    ZERO(`
        struct Hey {
            i: i32;
        };

        fn test(x: &mut [i32], y: [ Hey ])
            x .= y.view(i32);

        fn main() {
            mut a = [ 0 ];
            test(a, [ Hey(13) ]);
            return a[0] - 13;
        }
    `);

    ZERO(`
        struct Hey {
            i: i32;
        };

        fn main() {
            mut a = [ 0 ];
            a .= [ Hey(13) ].view(i32);
            return a[0] - 13;
        }
    `);

    ZERO(`
        fn test(a: [byte], b?: [byte]) a == b;
        fn main() test("") ? 0 : 1;

        ;; EXPECT (fu::view<char>{}, fu::view<char>{})
    `);

    ZERO(`
        // When we spec find(), the second arg is a view, not an array, so the $T specs to a less than array:
        //  next thing that happens is that the first argument, which is $T[] specs to an array of views except they're not even refs for some reason.
        //   so then we try to use the spec but quals matching doesn't descend through the type cannon, so they mismatch with:
        //
        // First arg of find(), the $T[] to search:
        //
        // ACTUAL CANON: []+1028[]+28byte
        //                        ^^^^^^^ of bytes
        //                 ^^^^^^^ of arrays (resize + copy)
        //               ^^ view of
        //
        // EXPECT CANON: [][]+28byte
        //                   ^^^^^^^ of bytes
        //                 ^^ not a view (not a ref), nor an array - no resize/copy
        //               ^^ view of
        //
        let NOTES = [ "AAA", "BBB", "CCC" ];
        fn what(annot: string) NOTES.find(annot[1, annot.len]);
        fn main() what("!BBB") - 1;
    `);

    ZERO(`
        fn Join(a: $T[][], lax sep = [])    // The sep is of type any-init.
        {                                   //
            if (a.len < 2)                  //
                return a.len && a[0];       // NOT SURE WHAT'S 100% IDEAL, BUT:
                                            //
            let N = sep -> [$T;] ? sep.len  // should either match here,
                  : sep ->  $T   ? 1        //                                    but currently matches here, which is just wrong.
                                 : 0;       //                           or here,

            mut size = a[0].len;
            for (mut i = 1; i < a.len; i++)
                size += N + a[i].len;

            mut res: $T[];
            res.grow_junk(size);

            let head = a[0];
            size = head.len;
            res[0, head.len] .= head;
            for (mut i = 1; i < a.len; i++)
            {
                let range = a[i];
                if (sep -> [$T;])
                    res[size, size + N] .= sep;
                else if (sep -> $T)
                    res[size] = sep;

                size += N;
                res[size, size + range.len] .= range;
                size += range.len;
            }

            return res;
        }

        fn main() {
            let res = Join([ "hello", "world" ], []); // the [] fails the case above
            return res == "helloworld" ? 0 : 1;
        }
    `);

    ZERO(`
        // one of these things reported there's no $S in scope.
        fn Join(a: $T, b: $T, lax sep: $S = [])
            case ($S -> $T || $S -> [$T;] || $S -> [])
        {
            return sep -> $T || sep -> [$T;]
                 ? a ~ sep ~ b
                 : a ~ b;
        }

        fn main() {
            let res = Join("hello", "world");
            return res == "helloworld" ? 0 : 1;
        }
    `);

    ZERO(`
        // This is the initial type union concept
        fn Join(a: $T, b: $T, lax sep?: $T or [$T;] or [])
        {
            return sep -> $T || sep -> [$T;]
                 ? a ~ sep ~ b
                 : a ~ b;
        }

        fn main() {
            let res = Join("hello", "world");
            return res == "helloworld" ? 0 : 1;
        }
    `);


    // Don't repeat yourself ctors.

    ZERO(`
        struct Hey { i: i32; }

        fn main() {
            let a = 1;
            let r: Hey = a && [ a ];
            return r.i - 1;
        }
    `);

    ZERO(`
        struct Hey { i: i32; }

        fn main() {
            let a: Hey[] = [ [ -1 ], [ +1 ] ];
            return a[0].i + a[1].i;
        }
    `);

    ZERO(`
        struct Hey { i: i32; }

        fn test(): Hey {
            return [ 0 ];
        }

        fn main() test.i;
    `);


    // Non-defaulted struct members.

    ZERO(`
        struct Test {
        <fail bad call to Test expects 2 arg 11:20>
            a: i32;  <pass/>
            a?: i32; </fail>
            b: i32;
        };

        return Test(b: 1).a;
    `);

    ZERO(`
        struct Test {
            b: i32;
        <fail bad call to Test expects 2 arg 11:20>
            a: i32;  <pass/>
            a?: i32; </fail>
        };

        return Test(1).a;
    `);


    // Recursive structs.

    ZERO(`
        struct Node {
            items?: Node[];
            stuff?: Node[];
        };

        fn rec_copy(ref a: Node) {
            // If implemented naively,
            //  by the time you copy stuff it's no longer there.
            a = a.items[0];
        }

        fn main() {
            mut a = Node(items: [ Node(stuff: [ Node ]) ]);
            rec_copy(a);
            return a.stuff.len - 1;
        }
    `);


    // Explicit arguments & struct members.

    ZERO(`
        fn test(a: i32, b!: i32 = 1) a + b;
        return test(-1);
    `);

    ZERO(`
        fn test(a: i32, b!: i32 = 1) a + b;
        <fail bad call to test arg b explicit name 7:20>
        return test(-2, +2);    <pass/>
        return test(-2, b: +2); </fail>
    `);

    ZERO(`
        struct Test { a: i32; b!: i32; };
        fn test(t: Test) t.a + t.b;
        <fail bad call to Test arg b explicit name 8:20>
        return Test(-2, +2).test;    <pass/>
        return Test(-2, b: +2).test; </fail>
    `);

    ZERO(`
        struct Test { a?: i32; b!?: i32; };
        fn test(t: Test) t.a + t.b;
        <fail bad call to Test arg b explicit name 8:20>
        return Test(-2, +2).test;    <pass/>
        return Test(b: +2).test - 2; </fail>
    `);

    ZERO(`
        let _precedence = 0;
        fn parseExpression(p1 = _precedence, mode! = 0) p1 + mode;
        fn main() parseExpression();
    `);

    ZERO_SAME([
    `
        fn A(x!: i32 = 0) x;
        fn B(x: i32 = 0) A(:x);
        fn main() A + B;
    `,
    `
        fn A(x!?: i32) x;
        fn B(x?: i32) A(:x);
        fn main() A + B;
    `,
    `
        fn A(x! = 0) x;
        fn B(x = 0) A(:x);
        fn main() A + B;
    `
    ]);

    ZERO(`
        fn what(a = -1, b!: i32) a + b; // Trailing explicit args.
        fn main() what(b: +1);
    `);

    ZERO(`
        fn greet(with!greeting: string)     greeting.len;
        fn main()                           greet(with: "Hello!") - 6;
    `);

    ZERO(`
        fn Each(arr: $T[], visit)
            for (mut i = 0; i < arr.len; i++)
                visit(arr[i], i?: i);

        fn main() {
            mut muls = 0;
            mut arr = [ 1, 2, 3 ];

            arr.Each: |v, i!index|
                muls += v * index; // complained no index in scope

            return muls - 8;
        }
    `);

    ZERO(`
        struct Lifetime { using regions: i32[] };
        fn isInvalidatedBy(write: i32[]) write.len * write[0];

        // This blew up with a TODO: bck_node(non-empty argid).
        fn main() isInvalidatedBy(write: Lifetime([ 3, 5 ])) - 6;
    `);


    // Optional arguments.

    ZERO(`
        fn a0o0() 0;
        fn a1o0(a : i32) a;
        fn a2o1(a : i32, b?: i32) a + b;
        fn a2o2(a?: i32, b?: i32) a + b;
        fn main() a0o0(a?: 1, b?: 2) *      1   //      .
                + a1o0(a?: 1, b?: 2) *     10   //     10
                + a2o1(a?: 1, b?: 2) *    100   //    300
                + a2o2(a?: 1, b?: 2) *   1000   //   3000
                + a2o1(a : 1, <fail bad call>
                              c       <pass/>
                              b       </fail>
                               ?: 2) *  10000   //  30000
                + a2o1(a : 1)        * 100000   // 100000
                                // ----------------------
                                     - 133310;
    `);

    ZERO(`
        pub fn reveach(items: [$T], fn)
            for (mut i = items.len; i --> 0; )
                fn(items[i], i?: i);

        pub fn main() {
            mut sum = 0;
            [1, 2, 3].reveach(|x   | sum += x          );
            [1, 2, 3].reveach(|x, i| sum += x * i * 100);
            return sum - 806;
        }
    `);

    ZERO(`
        pub lax fn noop() 0;
        pub fn woot(ref i: i32, fn) i += fn(i?: i += 1); // Will not add 1.

        fn main() {
            mut sum = 0;
            woot(sum, fn noop);
            return sum;
        }
    `);


    // Intlit sizechecks.
    //
    // TODO investigate the error messages,
    //  they seem to be coming from different places,
    //   the whole thing is a bit fishy.

    ZERO(`
        fn main() {
            let ret: i8 = <fail annot match>
                128 <pass/>
                127 </fail>;

            return (ret - 100).i32 - 27;
        }
    `);

    ZERO(`
        fn main() {
            let ret: i16 = <fail annot match>
                32768 <pass/>
                32767 </fail>;

            return (ret - 32700).i32 - 67;
        }
    `);

    ZERO(`
        fn main() {
            let ret: i32 = <fail annot match>
                2147483648 <pass/>
                2147483647 </fail>;

            return (ret - 2147483600).i32 - 47;
        }
    `);

    ZERO(`
        fn main() { // weird error, see the other two below
            let ret: i64 = <fail bad int literal>
                9223372036854775808 <pass/>
                9223372036854775807 </fail>;

            return (ret - 9223372036854775800).i32 - 7;
        }
    `);

    ZERO(`
        fn main() {
            let ret: i8 = <fail annot match>
                -129 <pass/>
                -128 </fail>;

            return (ret + 100).i32 + 28;
        }
    `);

    ZERO(`
        fn main() {
            let ret: i16 = <fail annot match>
                -32769 <pass/>
                -32768 </fail>;

            return (ret + 32700).i32 + 68;
        }
    `);

    ZERO(`
        fn main() {
            let ret: i32 = <fail annot match>
                -2147483649 <pass/>
                -2147483648 </fail>;

            return (ret + 2147483600).i32 + 48;
        }
    `);

    ZERO(`
        fn main() { // wording different from the ones above and below
            let ret: i64 = <fail oversized signed int literal>
                -9223372036854775809 <pass/>
                -9223372036854775808 </fail>;

            return (ret + 9223372036854775800).i32 + 8;
        }
    `);

    ZERO(`
        fn main() {
            let ret: u8 = <fail annot match>
                256 <pass/>
                255 </fail>;

            return (ret - 0xff).i32;
        }
    `);

    ZERO(`
        fn main() {
            let ret: u16 = <fail annot match>
                65536 <pass/>
                65535 </fail>;

            return (ret - 0xffff).i32;
        }
    `);

    ZERO(`
        fn main() {
            let ret: u32 = <fail annot match>
                4294967296 <pass/>
                4294967295 </fail>;

            return (ret - 0xffffffff).i32;
        }
    `);

    ZERO(`
        fn main() { // this is the best of the weird ones
            let ret: u64 = <fail integer overflows u64>
                18446744073709551616 <pass/>
                18446744073709551615 </fail>;

            return (ret - 0xffffffffffffffff).i32;
        }
    `);

    ZERO(`
        pub fn set_once(ref entry, bit: i32): bool
        {
            let mask = 1 << bit.u64;    // cg'd into '1u << uint64_t(bit)'
            if (entry & mask)           //  which doesnt work for some reason
                return false;

            entry |= mask;
            return true;
        }

        fn main() {
            mut entry: u64;
            let a = set_once(entry, 32);
            let b = set_once(entry, 32);
            return a && !b ? 0 : 101;
        }
    `);

    ZERO(`
        fn main() {
            let hey: u128 = 0x8000000000000000.u128;
            let res = hey + hey;
            return res > hey ? 0 : 1;
        }
    `);


    // Imports & pubs.

    ZERO([
    `
        pub lax fn noop() {} // AUTOPUB
        <fail hello is not defined><pass/>
        pub
        </fail>
        fn hello() 3;
    `,
    `
        import _0;
        fn main() 6 - hello * 2;
    `
    ]);

    ZERO([
    `
        pub struct Hey { i: i32; };
    `,
    `
        fn main() 1._0::Hey.i - 1;
    `
    ]);

    ZERO([
    `
        pub struct Hey { i: i32; };
    `,
    `
        import _0;
        pub inline fn test(h: Hey) h.i + 2;
    `,
    `
        import _1;
        fn main() 1._0::Hey.test - 3;
    `
    ]);

    ZERO([
    `
        pub struct Hey { i: i32; };
    `,
    `
        pub inline fn test(h: _0::Hey) h.i + 2;
    `,
    `
        import _1;
        fn main() 1._0::Hey.test - 3;
    `
    ]);

    ZERO([
    `
        pub struct Hey { i: i32; };
    `,
    `
        pub inline fn test(h: _0::Hey) h.i + 2;
    `,
    `
        fn main() 1._0::Hey._1::test - 3;
    `
    ]);

    ZERO([
    `
        pub struct You { i: i32; };
    `,
    `
        pub struct Hey { using you: _0::You; };
        pub fn init3(): Hey = [ _0::You(3) ];
    `,
    `
        pub inline fn test(using h = _1::init3) i + 7;
    `,
    `
        fn main() _2::test - 10;
    `
    ]);

    ZERO([
    `
        pub struct vec3 {
            x?: f32;
            y?: f32;
            z?: f32;
        };
    `,
    `
        import _0;

        pub struct mat34 {
            mx: vec3;
            my: vec3;
            mz: vec3;
            mo: vec3;
        };

        pub inline fn mat34_identity()
            mat34(
                vec3(x: 1),
                vec3(y: 1),
                vec3(z: 1), vec3 /*point3*/);
    `,
    `
        pub struct mat4 {
            m0: f32; m1: f32; m2: f32; m3: f32;
            m4: f32; m5: f32; m6: f32; m7: f32;
            m8: f32; m9: f32; mA: f32; mB: f32;
            mC: f32; mD: f32; mE: f32; mF: f32;
        };

        pub inline fn mat4(using m: _1::mat34)
            mat4(
                mx.x, mx.y, mx.z, 0,
                my.x, my.y, my.z, 0,
                mz.x, mz.y, mz.z, 0,
                mo.x, mo.y, mo.z, 1);

        pub fn determinant(using _: mat4)
            + mC * m9 * m6 * m3 - m8 * mD * m6 * m3 - mC * m5 * mA * m3
            + m4 * mD * mA * m3 + m8 * m5 * mE * m3 - m4 * m9 * mE * m3
            - mC * m9 * m2 * m7 + m8 * mD * m2 * m7 + mC * m1 * mA * m7
            - m0 * mD * mA * m7 - m8 * m1 * mE * m7 + m0 * m9 * mE * m7
            + mC * m5 * m2 * mB - m4 * mD * m2 * mB - mC * m1 * m6 * mB
            + m0 * mD * m6 * mB + m4 * m1 * mE * mB - m0 * m5 * mE * mB
            - m8 * m5 * m2 * mF + m4 * m9 * m2 * mF + m8 * m1 * m6 * mF
            - m0 * m9 * m6 * mF - m4 * m1 * mA * mF + m0 * m5 * mA * mF;
    `,
    `
        pub fn main()
        {
            let m34 = _1::mat34_identity;
            let m44 = _2::mat4(m34);

            return m44.determinant.i32 - 1;
        }
    `
    ]);

    ZERO([`
        struct _0 { x?: f32; y?: f32 };
        fn maxc(using vec: _0) x > y ? x : y;
    `,
    `
        <alt>
        import _0;
        fn main() _0.maxc.i32;
        <alt/>
        fn main() ::_0.maxc.i32;
        </alt>
    `]);

    ZERO([
    `
        pub fn _0(i: i32) i + 1;
    `,
    `
        fn main() (-1).::_0;
    `
    ]);

    ZERO([
    `
        pub fn add(ref to: $T[], item: $T) {
            for (mut i = 0; i < to.len; i++) {
                if (to[i] >= item) {
                    if (to[i] != item)
                        to.insert(i, item);

                    return;
                }
            }

            to.push(item);
        }
    `,
    `
        fn main() {
            mut x = [1, 2, 3];
            x._0::add(3); if (x.len != 3) return 33;
            x._0::add(4); return x.len - x[3];
        }
    `
    ]);

    ZERO([
    `
        pub let pad0 = 0; pub let pad1 = 1; pub let pad2 = 2; pub let pad3 = 3; pub let pad4 = 4; pub let pad5 = 5; pub let pad6 = 6; pub let pad7 = 7; pub let pad8 = 8; pub let pad9 = 9;
        pub let PAD0 = 0; pub let PAD1 = 1; pub let PAD2 = 2; pub let PAD3 = 3; pub let PAD4 = 4; pub let PAD5 = 5; pub let PAD6 = 6; pub let PAD7 = 7; pub let PAD8 = 8; pub let PAD9 = 9;

        pub let A = "hello";
        pub let B = "world";
    `,
    `
        import _0;
        fn test(i: i32) {
            let v = i & 1 ? A : B;
            return v.len;
        }

        fn main() 0.test - 1.test;
    `
    ]);

    ZERO([
    `
        pub fn clone(a: $T)
        case ($T.is::copy) a;
        case ($T -> $T) {
            mut res: $T;
            for (fieldname i: $T) res.i = a.i.clone();
            return res;
        }
    `,
    `
        pub nocopy struct Scope { x: i32; };

        pub struct ModuleOutputs {
            deps: i32[];
            scope: Scope;
        };

        pub fn test(a: ModuleOutputs) {
            let b = a._0::clone();
            return a.deps.len - b.deps.len;
        }

        pub fn main() test(ModuleOutputs);
    `
    ]);

    ZERO([`
        // a private fn
        fn createShader(src: string) = src;

        // inits a public let
        pub let GEOMETRY_PASS_TEST = createShader("source code");
    `,
    `
        pub fn main() _0::GEOMETRY_PASS_TEST.len - 11;
    `]);

    ZERO([`
        struct List {
            vals: string[];
        };

        fn add(using ref _: List, val: string)
            vals ~= val;

        fn [](using _: List, val: string) {
            mut count = 0;
            for (mut i = 0; i < vals.len; i++)
                if (vals[i] == val)
                    count++;

            return count;
        }
    `,
    `
        fn main() {
            mut list: _0::List;
            for (mut i = 0; i < 3; i++)
                list.add(i & 1 ? "a" : "b");

            return list["b"] - 2;
        }
    `]);

    ZERO([`
        struct Int { i: i32; };
        fn -(a: Int) Int(-a.i);
        fn +(a: Int, b: Int) Int(a.i + b.i);
        fn +=(ref a: Int, b: Int) { a.i += b.i; return a; };
        postfix fn ++(ref a: Int) { a.i++; };
    `,
    `
        fn main() {
            mut x: _0::Int = [ 1 ];
            x += -(x + x);
            x++;
            return x.i;
        }
    `]);

    ZERO([`
        fn private(x)           x * 3;              // Scope_import is broken,
        pub fn public(y)        private(y) * 2;     //  doesnt always import privates.
        <split/>
        fn main()               1.public - 6;
    `]);

    ZERO([`
        fn private(x: i32)      x * 3;              // cg fail:
        pub fn public(y)        private(y) * 2;     //  fn private hidden in first translation unit.
    `,`
        fn main()               1._0::public - 6;
    `]);

    ZERO([`
        let OPTOKENS = "{}[]()!?~@#$%^&*/-+<=>,.;:|";   // nowadays problem is OPTOKENS cgs to static in first translation unit

        pub fn lex(src) // <- template
        {
            let end = src.len;
            mut idx = 0;

            while (idx < end) {
                let c = src[idx++];
                if (OPTOKENS.has(c)) // <- originally, no OPTOKENS in scope ...
                    return idx - 1;
            }

            return src.len;
        }
    `,
    `
        fn main() _0::lex("3 - 3") - 2; // <- from here
    `]);

    ZERO([`
        pub fn pubbed(a: i32) a * 2;
        <fail not_pubbed not defined><pass/>
        pub                          </fail>
        fn not_pubbed(b: i32) b * 3;
    `,`
        fn main() 1._0::pubbed._0::not_pubbed - 6;
    `]);

    ZERO([`
        let SELF_TEST           = true;
        let NODEIDX_signbits    = SELF_TEST && 4;
        let NODEIDX_signmask    = (1 << NODEIDX_signbits) - 1;
    `,`
        fn main() _0::NODEIDX_signmask - 15;
    `]);

    ZERO([`
        struct Helpers { index: i32; }
        fn +(a: Helpers, b: Helpers) a.index - b.index;
    `,`
        import _0;
        fn main() {
            <fail ambig><pass/> // autoshadowing surprised me here
            shadow      </fail> //  feels like this override should be explicit
            infix fn +(a: Helpers, b: Helpers) a.index + b.index;
            return Helpers(+1) + Helpers(-1);
        }
    `]);

    ZERO([`
        struct Options { v: i32; };
    `,
    `
        fn compile(o: _0::Options) = o.v;
    `,
    `
        // Won't find Options if solving in reverse modid order.
        fn compile_snippets(o: _0::Options) = o.v;
    `,
    `
        import _1;
        import _2;

        fn main() {
            let o = _0::Options(0);
            return compile(o) + compile_snippets(o);
        }
    `]);


    // Explicit shadowing.

    ZERO(`
        let a = 1;
        shadow let a = a + 1;
        return a - 2;
    `);

    ZERO(`
        inline fn outer() inner(); // <- this reset root-scope
        inline fn inner() {
            // <- so main::i was visible here
            for (mut i = 0; i < 10; i++) return i;
            return 1;
        }
        fn main() {
            for (mut i = 0; i < 10; i++) return outer();
            return 1;
        }
    `);

    ZERO(`
        pub struct Target { modid: i32; packed: u32; };

        pub fn index(t: Target) i32(t.packed & 0x7fffffff);

        pub fn local_eq(t: Target, index: i32, implicit modid: i32)
            modid - t.modid || index - t.index;

        fn main() {
            let implicit modid = 1;
            return local_eq(Target(1, 0x80000002), 7) - 5;
        }
    `);


    // Return inference.

    ZERO(`
        struct HasInt { i: i32; };

        fn test(s: HasInt): &i32 {
            let i = s.i;
            return i;
        }

        fn main() HasInt(-1).test + 1;
    `);

    ZERO(`
        fn test(x: i32): &i32 = x;
        fn main() test(3) - 3;
    `);

    ZERO(`
        fn test(x: i32): &i32 {
            fn inner() x;
            return inner;
        }

        fn main() test(3) - 3;
    `);

    ZERO(`
        struct I { v: i32; };

        fn test(x: I): &i32 {
            fn inner() x.v;
            return inner;
        }

        fn main() test(I(3)) - 3;
    `);

    ZERO(`
        struct I { v: i32[]; };

        fn test(x: I): &i32 {
            fn inner() x.v[0];
            return inner;
        }

        fn main() test(I([3])) - 3;
    `);

    ZERO(`
        struct I { v: i32[]; };

        fn test(x: I): &i32 {
            fn inner() {
                let v = x.v;
                return v[0];
            }

            return inner;
        }

        fn main() test(I([3])) - 3;
    `);

    ZERO(`
        fn noReturn() throw ("ex");

        fn doesReturn(a: i32) {
            if (a > 0) return noReturn();
            return a;
        }

        fn main() doesReturn(-3) + 3;
    `);

    ZERO(`
        struct Context { modules: Module[]; };
        struct Module  { fname: i32; };

        fn test(implicit ctx: Context) {
            fn findModule(fname: i32): &Module {
                let modules = ctx.modules;
                for (mut i = 0; i < modules.len; i++) {
                    let module = modules[i];
                    if (module.fname == fname)
                        return module;
                }

                throw("Cannot locate: " ~ fname);
            }

            return findModule(0);
        }

        fn main() {
            let implicit ctx = Context([ Module ]);
            return test.fname;
        }
    `);

    ZERO(`
        fn noReturn() throw ("ex");

        fn returnVoid(a: i32): void {
            if (a > 0) return noReturn();
        }

        fn main() {
            returnVoid(0);
            return 0;
        }
    `);

    ZERO(`
        fn parseQualifierChain(mut i: i32): i32 {
            for (;;) {
                if !(i & 15) return i;
                i--;
            }
        }

        fn main() parseQualifierChain(15);
    `);

    ZERO(`
        fn main()
        {
            mut sum = 0;
            fn compile(x: i32)
            {
                // 1. this throw contributed a 'never' ret_count.
                x || throw ("x=0");
                if (x & 1) compile(x + 1); // 2. then this recursion did something.
                sum += x; // <- also this must be a closure.
                // 3. finally no ret_actual but non-zero ret_count.
            }

            compile(2);
            return sum - 2;
        }
    `);

    ZERO(`
        fn main()
        {
            mut sum = 0;
            fn getModule(fname: string) fname.len;
            fn compile(fname: string, via: string = "")
            {
                let module = getModule(fname) || throw ("import circle: '" ~ via ~ fname ~ "'.");
                if (module & 1) {
                    let fuzimports = fname.split("a");
                    for (mut i = 0; i < fuzimports.len; i++)
                        compile(
                            fname: fuzimports[i],
                              via: fname ~ " <- " ~ via);
                }

                sum += module;
            }

            compile("ab");
            return sum - 2;
        }
    `);

    ZERO(`
        fn A(implicit _A: i32[]) _A;
        fn B(implicit _B:  u8[]) _B;

        fn AB(x: i32) A[x] - B[x].i32;
        fn BA(x: i32) B[x].i32 - A[x];

        fn cycleA_inner(x: i32)
            x & 1   ? either(x + 1) + AB(x)
                    : BA(x);

        fn cycleA_outer(x: i32)
            x & 1   ? cycleA_inner(x + 1) + AB(x)
                    : BA(x);

        fn cycleB_inner(x: i32)
            x & 2   ? either(x + 1) + BA(x)
                    : AB(x);

        fn cycleB_outer(x: i32)
            x & 2   ? cycleB_inner(x + 1) + BA(x)
                    : AB(x);

        fn either(x: i32)
            x & 4   ? cycleA_outer(x)
                    : cycleB_outer(x);

        fn main() {
            let implicit _A = [ 0,    1,    2    ];
            let implicit _B = [ 0.u8, 1.u8, 2.u8 ];

            return either(0);
        }
    `);


    // Dead code elim.

    ZERO(`
        fn if0_ret101(x: i32) {
            if      (x > 2) return x * 2;
            else if (x > 1) return x + 1; // <- left branch seeded right with never
            return x + 101;
        }

        fn main() 0.if0_ret101 - 101;
    `);

    ZERO(`
        fn hello(x: i32) {
            if (x & 1)
                return x * 2;

            <fail missing return>
            x;            <pass/>
            return x;     </fail>
        }

        fn main() 0.hello;
    `);

    ZERO(`
        fn throws()         { throw("WHAT!");   }
        fn myfn(a = throws) { return a;         } // never in default argument position!
        fn main() {
            try             { return myfn();                }
            catch (e)       { return e == "WHAT!" ? 0 : 1;  }
        }
    `);


    // Let's start having fun.

    ZERO(`
        struct X { i: i32; };

        fn         ++(using x: &mut X) ++i;
        postfix fn ++(using x: &mut X) i++;

        fn main() {
            mut x: X;
            let a = x++;
            let b = ++x;
            return a || b - 2;
        }
    `);

    ZERO(`
        fn test(s: $T) {
            mut sum = 0;
            for (fieldname i: $T) sum += s.i;
            return sum;
        }

        struct XY { x: i32; y: i32; };

        fn main() {
            let thing = XY(1, 2);
            let sum = test(thing);
            return sum - 3;
        }
    `);

    ZERO(`
        struct ScopeSkip     { imports:     i32[]; implicits:     i32[]; }
        struct ScopeSkipMemo { imports_len: i32;   implicits_len: i32;   }

        fn snap(ss: ScopeSkip) {
            mut r: ScopeSkipMemo;
            for (fieldname i: ss)
                r.i_len = ss.i.len;

            return r;
        }

        fn check(v) {
            mut sum = 0; mut mul = 1;
            for (fieldname i: v) {
                sum += v.i * mul; mul *= 10;
            }

            return sum;
        }

        fn main() check(snap(ScopeSkip([ 1 ], [ 2, 2 ]))) - 21;
    `);


    // Type assert.

    ZERO(`
        fn test() [] => i32;
        fn main() test;
    `);

    ZERO(`
        fn test(a) {
            if (a -> [any;])
                return a.len;

            return a * 10;
        }

        fn main() {
            let A = [ 0, 1 ].test;
            let B = 4.test;
            return A + B == 42 ? 0 : 1;
        }
    `);

    ZERO(`
        fn staticIfSymmetry(
            <fail $T is not defined>
            ref a: $U[], b)  <pass/>
            ref a: $T[], b)  </fail>
        {
            let N = b ->  $T   ? 1 : 2;
            let M = b -> [$T;] ? 2 : 1;
            a ~= b;
            return N == M ? 0 : 1;
        }

        fn main() {
            mut arr = [ 0 ];
            return staticIfSymmetry(arr, 0)
                 + staticIfSymmetry(arr, [ 0, 0 ])
                 + arr.len * 10 - 40;
        }
    `);


    // Defer.

    ZERO(`
        fn main() {
            mut a = 1;
            mut b = 0;
            {
                defer a++;
                b = a;
            }
            return (b+1) - a;
        }
    `);

    ZERO(`
        fn main() {
            mut a = 1;
            mut b = 0;
            mut c = 0;
            {
                defer a++;
                defer c = a;
                b = a;
            }
            return (b*27) - (a*11 + c*5);
        }
    `);

    ZERO(`
        fn test_defer_if_errok(throw_err: bool) {
            mut x      = 1;
            mut if_err = 0;
            mut if_ok  = 0;
            try {
                defer x++;
                defer:err if_err += x;
                defer:ok  if_ok  += x;

                if (throw_err)
                    throw("len=5");

                x += 8; // 9 defer++ = 10
            }
            catch (e) {
                x += e.len; // 6 defer++ = 7
            }

            return x * 3 + if_err * 5 + if_ok * 7;
        }

        fn main()   (test_defer_if_errok(true)  - 7 *3 - 1*5 - 0*7)
            + 100 * (test_defer_if_errok(false) - 10*3 - 0*5 - 9*7);
    `);

    ZERO(`
        fn sum_amulb(a: i32[], b: i32[], ref sum: i32)
            for (mut i = 0; i < a.len; i++)
                sum += a[i] * b[i];

        fn incrarr_by1(ref a: i32[])
            for (mut i = 0; i < a.len; i++)
                a[i] += 1;

        fn test(ref a: i32[], ref sum: i32) {
            let b = a;
            defer sum_amulb(:a, :b, :sum);

            <alt>
            for (mut i = 0; i < a.len; i++) a[i] += 1;
            return a[0] - 2;
            <alt/>
            defer for (mut i = 0; i < a.len; i++) a[i] += 1;
            return a[0] - 1;
            <alt/>
            incrarr_by1(:a);
            return a[0] - 2;
            <alt/>
            defer incrarr_by1(:a);
            return a[0] - 1;
            </alt>
        }

        fn main() {
            mut a = [ 1 ];
            mut sum = 0;
            let ret = 100 * test(:a, :sum);
            return sum - 2 + ret;
        }
    `);

    ZERO(`
        fn main() {
            mut res = 1;            // single statement blocks unwrap
            { defer res--; }        //  fix by unwraping tailing defers
            return res;
        }
    `);

    ZERO(`
        inline fn unwraps_defer(ref x: i32) unwrap {
            defer x++;
        }

        fn main() {
            mut y = 0;
            { unwraps_defer(y); }
            mut x = 0;
            unwraps_defer(x);
            return y == 1 && x == 0 ? 0 : 1;
        }
    `);


    // Conversions / ctors.

    ZERO(`
        type Test = i8;
        fn main() 256.Test.i32;
    `);

    ZERO(`
        fn test(a: $A, b: $B) b +   <fail bad call>
            a;                      <pass/>
            $B(a);                  </fail>

        fn main() i8(-1).test(+1);
    `);


    // First stab at higher-order functions.

    ZERO(`
        let x = { mut z = 0; z++; z };
        return x - 1;
    `);

    ZERO(`
        fn mul2(a) a*2;
        fn test(b, fn) fn(1 + fn(b));
        fn main() 14 - test(3, fn mul2);
    `);

    ZERO(`
        let overloaded = 1;
        fn overloaded(a) a*2;
        fn test(b, fn) fn(fn + fn(b));
        fn main() 14 - test(3, fn overloaded);
    `);

    ZERO(`
        fn overloaded(a) a*2;
        fn test(b, fn) fn(fn + fn(b));
        fn main() {
            let overloaded = 1;
            return 14 - test(3, fn overloaded);
        }
    `);

    ZERO(`
        fn MAP(items: $T[], fn) {
            mut result: fn(items[0])[];
            for (mut i = 0; i < items.len; i++)
                result.push(fn(items[i]));

            return result;
        }

        fn sqr(x) x*x;

        fn main() [2].MAP(fn sqr)[0] - 4;

        ;; EXPECT (fu::slate<1, int> { 2 })
        //  During the propagateType rework
        //   the 'mut result: fn(items[0])[]' type annot
        //    was found listed as a callsite for items,
        //     but wasn't reachable for relax.
    `);

    ZERO(`
        fn reduce(items: $T[], fn, init?: $T) {
            mut result = init;
            for (mut i = 0; i < items.len; i++)
                result = fn(result, items[i]);

            return result;
        }

        fn main() [1, 2].reduce(|a, b| a + b) - 3;
    `);

    ZERO(`
        fn Each(items: $T[], fn) {
            for (mut i = 0; i < items.len; i++) // <- one i
                fn(items[i]);
        }

        fn main() {
            mut i = 0;                  // <- another i, i got them to shadow each other
            [1, 2].Each: |x| i += x;    //      in the everything-a-free-function
            return i - 3;               //      impl of closures
        }
    `);

    ZERO(`
        mut sum = 2;

        fn FnDecl_update(parent_idx: i32) {
            fn Each(fn) fn();
            Each(|| makeDirty(:parent_idx));
        }

        fn makeDirty(parent_idx: i32): void {
            sum += parent_idx;
        }

        FnDecl_update(1);

        return sum - 3;
    `);

    ZERO(`
        // something complains about no final return
        fn main() {
            let addret = |a: i32, b: i32| {
                return a + b;
            };

            let hey = |x: i32| {
                if !(x & 1)
                    return x;

                // this complains about indentation
                // TODO should work without the continue
                <alt>
                continue "".len     <alt/>
                "".len.addret(x)    </alt>
            };

            // and this complains about no match for *(void, void)
            return hey(0) * hey(1);
        }

        // misfired during the removal of maybeCopyOrMove(isReturn)
        ;; !N_MoveMustSeq
    `);

    ZERO(`
        // something complains about no final return
        fn main() {
            let hey = |x: i32| {
                if !(x & 1)
                    return x;

                "".len + x
            };

            // and this complains about no match for *(void, void)
            return hey(1) * hey(0);
        }
    `);


    // Conversion functions.

    ZERO(`
        struct A { a: i32; };
        struct B { b: i32; };
        using fn bananas(a: A) B(a.a * 2);

        <split/>
        fn main() 1.A.b - 2;
    `);

    ZERO(`
        struct A { a: i32; };
        struct B { b: i32; };
        using fn bananas(a) B(a.a * 2); // <- template

        <split/>
        fn main() 1.A.b - 2;
    `);

    ZERO(`
        fn sqr(a: i32) a * a;
        fn woot(a.sqr) a + 1;
        fn main() 2.woot - 5;
    `);

    ZERO(`
        struct A0 { a0: i32; };
        struct A1 { a1: i32; };
        struct B  { b:  i32; };

        fn a0(a1: A1) a1.a1 * 100;
        fn bananas(a) B(a.a0 * 2); // <- template
        fn woot(a.bananas: B) a.b; // <- check

        fn main() 1.A0.woot + 1.A1.woot - 202;
    `);

    ZERO(`
        struct A0 { a0: i32; };
        struct A1 { a1: i32; };
        struct B0 { b0: i32; };
        struct B1 { b1: i32; };
        struct C  { c:  i32; };

        fn bananas(using _: A0) B0(a0 * 2);
        fn bananas(using _: A1) B1(a1 * 3);
        using fn c0(using _: B0) C(c: b0 * 5);
        using fn c1(using _: B1) C(c: b1 * 7);
        fn woot(using a.bananas: C) c; // extra conversion

        fn main() 1.A0.woot + 1.A1.woot - 31;
    `);

    ZERO(`
        struct A0 { a0: i32; };
        struct A1 { a1: i32; };
        struct B0 { b:  i32; };
        struct B1 { b:  i32; };

        fn bananas(a0: A0) B0(a0.a0 * 2);
        fn bananas(a1: A1) B1(a1.a1 * 3);
        fn woot(a.bananas) a.b; // <- template

        fn main() 1.A0.woot + 1.A1.woot - 5;
    `);

    ZERO(`
        fn times_implicit(x: i32, implicit y: i32) x * y;
        fn times7(x: i32) x * 7;

        fn woot(a.times_implicit, b: u32) a * b.i32;
        fn woot(a: i32, b.times7: i32) a * b;

        fn test0() 3.woot(2.i32);

        fn test1() {
            let implicit y = 7;
            return 3.woot(2.u32);
        }

        fn main() test0 + test1 * 1000 - 42042;
    `);

    ZERO(`
        struct X { str: string; };
        fn ~(a: X, b: X) X(a.str ~ b.str);          // currently: invalid operator~ cg
        inline fn ~(a: X, b.to_debug_str) a ~ b;    // currently: pointless blocks

        fn to_debug_str(a: i32) X("i" ~ a);

        fn main() {
            let hey = X("Hey! ") ~ 5;
            return hey.str == "Hey! i5" ? 0 : 1;
        }
    `);

    ZERO(`
        struct vec32  { x: f32; };
        struct conv32 { v: f32; };

        using inline fn convert(v: i32): conv32 = [ v.f32 ]; // no litfix
        inline fn /(a: conv32, b: vec32) vec32(a.v / b.x);

        fn main() i32 <| (1/vec32(1)).x - 1;
    `);

    ZERO(`
        struct vec32  { x: f32; };
        struct conv32 { v: f32; };

        using inline fn convert(v: f32): conv32 = [ v ]; // litfix in a conv: i32 -> f32
        inline fn /(a: conv32, b: vec32) vec32(a.v / b.x);

        fn main() i32 <| (1/vec32(1)).x - 1;
    `);

    ZERO(`
        struct vec_u  { x: u32; };
        struct vec32  { x: f32; };
        struct vec64  { x: f64; };

        struct conv_u { v: u32; };
        struct conv32 { v: f32; };
        struct conv64 { v: f64; };

        using inline fn convert(v: u32): conv_u = [ v ]; // matchfail before
        using inline fn convert(v: f32): conv32 = [ v ];
        using inline fn convert(v: f64): conv64 = [ v ]; // matchfail after

        inline fn /(a: conv_u, b: vec_u) vec_u(a.v / b.x);
        inline fn /(a: conv32, b: vec32) vec32(a.v / b.x);
        inline fn /(a: conv64, b: vec64) vec64(a.v / b.x);

        fn main() i32 <| (1/vec32(1)).x - 1;
    `);

    ZERO(`
        pub struct Module       { modid: i32; };
        pub struct Target       { modid: i32; index: i32; };
        pub struct Type         { using vtype: ValueType; };
        pub struct ValueType    { modid: i32; canon: string; };
        pub struct Overload     { kind: string; locals?: Overload[]; };

        fn main() {
            using fn GET(target: Target, implicit overloads: Overload[]) {
                target.index > 0 || assert();
                if (target.modid < 0)
                    return overloads[-target.modid - 1].locals[target.index - 1];
                else
                    return overloads[target.index - 1];
            }

            fn try_GET(target: Target)
                target && GET(target);

            implicit mut overloads: Overload[];
            overloads ~= Overload("What");
            return try_GET(Target(0, 1)).kind.len - 4;
        }
    `);

    ZERO(`
        struct RWEvent { rw_target!: i32 };
        struct ReadID  { id: i32 };

        fn main()
        {
            <fail ambig rw_target>
            using   <pass/></fail>
            fn RWEvent(read: ReadID)    RWEvent(rw_target: read.id);

            fn rw_target(read: ReadID)  read.id;

            return ReadID(0).rw_target;
        }
    `);

    TODO_conv(`
        fn a_len(a: [$T]) a.len; // a conversion could navigate this here
        struct Test { using a: i32[]; };
        fn main() Test.a_len;
    `);

    TODO_conv(`
        struct CodegenOutput { using src: string; };

        fn test(ref str: string, out: CodegenOutput) {
            str ~= out && "b";
            return str ~ out;
        }

        fn main() {
            mut str = "a";
            return str.test(CodegenOutput("what")).len - 6; // "abwhat".len;
        }
    `);

    ZERO(`
        struct linearRGB    { r: i32; };
        struct sRGB         { r: i32; };

        <fail ambig conversion>
        using    <pass/></fail>
        fn lin2srgb(c: linearRGB): sRGB = [ c.r / 3 ];

        using
        fn srgb2lin(c: sRGB): linearRGB = [ c.r * 3 ];

        fn RGB(linear: bool, r: i32) {
            return linear
                 ? linearRGB(r)
                 :      sRGB(r);
        }

        fn main() {
            mut c = RGB(linear: false, 7);
            return c.r - 21;
        }
    `);

    ZERO(`
        struct linearRGB    { r: i32; };
        struct sRGB         { r: i32; };

        <fail cannot convert><pass/>
        using                </fail>
        fn srgb2lin(c: sRGB): linearRGB = [ c.r * 7 ];

        fn main() = (sRGB(r: 3) => linearRGB).r - 21;
    `);

    ZERO(`
        struct Overload     { name: string; };
        struct Target       { o_index: i32; };

        struct Helpers      { hd_index: i32; };
        struct HelpersData  { target: Target; };

        fn solve(ref overloads: Overload[], ref helpers: HelpersData[])
        {
            using fn GET(h: Helpers)
                helpers[h.hd_index];

            fn qWHAT(o: Overload)
                o.name;

            using fn GET(t: Target) {
                ref o = overloads[t.o_index];

                // The qWHAT here tried to (pointlessly) solve qWHAT below,
                //  but GET hadn't solved yet so it wasn't available.
                return o.qWHAT ? o : GET(Target(t.o_index + 1));
            }

            fn qWHAT(hd: HelpersData)
                hd.target.qWHAT;

            return Helpers(0).qWHAT;
        }

        fn main() {
            mut overloads: Overload[];
            mut helpers: HelpersData[];

            for (mut i = 0; i < 2; i++) {
                overloads ~= Overload(i && "o=" ~ i);
                helpers ~= HelpersData(Target(i));
            }

            return solve(overloads, helpers) == "o=1" ? 0 : 1;
        }
    `);

    ZERO(`
        struct Target       { index: int };
        struct Overload     { name: string; };

        fn solve(_overloads: Overload[], _targets: Target[]) {
            fn fail(mut reason: string): never {
                for (mut i = _targets.len; i --> 0; ) {
                    let t = _targets[i];
                    if (t)
                        reason ~= GET(t).qWHAT;
                }

                return throw(reason);
            }

            fn qWHAT(o: Overload)
                o.name;

            using fn GET(target: Target) {
                _overloads.len >= target.index || fail(
                    GET(Target(_overloads.len - 1)).qWHAT);

                return _overloads[target.index];
            }

            fn qWHAT(n: Target[]) {
            <alt>
                mut res = "";
                for (mut i = 0; i < n.len; i++)
                    res ~= n[i].qWHAT;

                return res;
            <alt/>
                return n.map(|t| t.qWHAT).join();
            </alt>
            }

            return _targets.qWHAT;
        }

        fn main() {
            mut res = solve(
                [ Overload("Hello"), Overload(", "), Overload("! "), Overload("World!") ],
                [ Target(0), Target(1), Target(3) ]);

            return res == "Hello, World!" ? 0 : 1;
        }
    `);

    // /Conversion functions.


    // Autocall, varargs & rest params.

    ZERO(`
        fn varargs(a[]) a[0] + a[1];
        fn main() varargs(1, 2) - 3;
    `);

    ZERO(`
        fn to_debug_str(a: i32) a     * 2;
        fn to_debug_str(b: u32) b.i32 * 3;

        <alt>
        inline
        </alt>
        fn inspect(items.to_debug_str[]) // <- varargs!
        {
            mut a = 0;
            for (mut i = 0; i < items.len; i++)
                a += items[i];

            return a;
        }

        fn main() inspect(5.i32, 7.u32) - 31;
    `);

    ZERO(`
        fn va(args[]: i32[]) {
            mut sum = 0;
            for (mut i = 0; i < args.len; i++) sum += args[i];
            return sum;
        }

        fn main() va(1, 2) - 3;
    `);

    ZERO(`
        fn Stringy(i: i32) "i:" ~ i;

        inline fn Printy(x: string): string = x;
        inline fn Printy(x.Stringy): string = x;

        fn Println(parts.Printy[]<alt>: [string]</alt>) {
            mut total = 0;
            for (mut i = 0; i < parts.len; i++) total += parts[i].len;
            return total;
        }

        fn main() Println("str", 10) - 7; // 'stri:10'.len
    `);

    TODO_inline(` // inline fn empty retval on autocall
        inline fn concatable(a: bool)               a ? "yes" : "no";
        inline fn concat(a.concatable, b: string)   a.concatable ~ b;
        fn main()                                   concat(true, "!").len - 4;
    `);

    TODO_inline(` // inline fn empty retval on autocall
        inline fn inl_print(a: byte)                a;
        fn inl_println(a.inl_print[]: [string])     a.len;
        fn main()                                   inl_println('a', 'b') - 2;
    `);

    ZERO(`
        struct My { i: i32 };

        fn test(oh: My)
        {
            // autocall(): never
            let str = |my: My|: never {             ;; N_DeadConv
                return my.i; // exits test() here
            };

            <alt>
            let hello = "Hello, " ~ oh;     <alt/> // both mess up, this one emits a pointless overload,
            let hello = oh ~ "!";           </alt> //  this one messes up earlier in the solver

            return hello.len;
        }

        fn main() {
            return test(My(3)) - 3;
        }
    `);

    ZERO(`
        fn printlike(topic: string, stuff.print[]: [string], implicit ref out: string) {
            out ~= topic ~ ": " ~ stuff.join() ~ '\\n';
        }

        fn main() {
            let topic = "A";
            implicit mut out: string;
            printlike(:topic, "Hello, ", "World", "!");
            return out == "A: Hello, World!\\n" ? 0 : 1
        }
    `);

    ZERO(`
        fn main() {
            mut out: string;
            fn lazywarn(prefix: string, inline stuff.print[]: [string]) {
                out ||= prefix ~ stuff.join();
            }

            mut once = 0;
            fn once(str: string) {
                once++;
                return str;
            }

            lazywarn(once("Hello"), ", ", "World", "!", prefix: "X: ");
            lazywarn(prefix: "Y: ", once("Hello"), "!");

            return out == "X: Hello, World!" && once == 1 ? 0 : 1
        }
    `);

    // /Autocall, varargs & rest params.


    // Addrofns of struct fields.

    ZERO(`
        fn fn_v(fn, v) fn(v);
        struct XY { x: i32; y: i32; };  // fields weren't visible to addroffns
        fn main() {
            let v = XY(11, 13);
            return fn_v(.x, v) + fn_v(.y, v) - 24;
        }
    `);

    ZERO(`
        fn fn_v(x, v) x(v);             // same but name conflict - x arg and .x field
        struct XY { x: i32; y: i32; };
        fn main() {
            let v = XY(11, 13);
            return fn_v(.x, v) + fn_v(.y, v) - 24;
        }
    `);

    ZERO(`
        fn fn_w(x, y) x(y);             // same thing but
        fn fn_v(y, x) fn_w(fn y, x);    // extra nasty
        struct XY { x: i32; y: i32; };
        fn main() {
            let v = XY(11, 13);
            return fn_v(.x, v) + fn_v(.y, v) - 24;
        }
    `);


    // Let's try to break scope-skips.

    ZERO(`
        fn identity(x) x;
        fn main() {
            fn outer(depth1) {
                let sum = depth1; return identity(|| sum);
            }
            let sum = 0; return outer(sum);
        }
    `);

    ZERO(`
        fn identity(x) x;
        fn test(depth0) {
            fn outer(depth1) {
                let sum = depth1; inline fn lambda1() sum; return identity(fn lambda1);
            }
            let sum = depth0; inline fn lambda0() sum; return outer(fn lambda0);
        }
        fn main() test(0);
    `);

    ZERO(`
        fn test(depth0) {
            fn identity(x) x;
            fn outer(depth1) {
                fn inner(depth2) {
                    let sum = depth2; inline fn lambda2() sum; return identity(fn lambda2);
                }
                let sum = depth1; inline fn lambda1() sum; return inner(fn lambda1);
            }
            let sum = depth0; inline fn lambda0() sum; return outer(fn lambda0);
        }
        fn main() test(0);
    `);

    ZERO(`
        fn test(depth0)
        {
            fn first(depth1) {
                fn first_inner(depth2) {
                    let sum = depth0 + depth1 + depth2;
                    return sum;
                }

                let sum = depth0 + depth1;
                return first_inner(|| sum);
            }

            fn second(depth1) {
                fn second_inner(depth2) {
                    let sum = depth0 + depth1 + depth2;
                    return sum + first(|| sum);
                }

                let sum = depth0 + depth1;
                return second_inner(|| sum);
            }

            let sum = depth0 + depth0;
            return second(|| sum);
        }

        fn main() test(0);
    `);

    ZERO(`
        fn use_a(implicit a: i32) a * a;
        fn use_b(implicit b: i32) b * b;
        fn use_c(implicit c: i32) c * c;

        fn parseStuff(x: i32) {
            fn doStuff(y: i32) doSomething(y * y);
            return doStuff(x * x);
        }

        fn doSomething(x: i32) {
            fn doSomething_inner(y: i32) y * use_a * descend(y * y);
            return doSomething_inner(x * x);
        }

        fn descend(x: i32) { // <- x here
            fn descend_inner(y: i32)
                y & 1 ? parseStuff(y / 2) * parseStuff(x) // x not defined here?
                      : doSomethingElse(y * y) * use_c;

            return descend_inner(x * x);
        }

        fn doSomethingElse(x: i32) {
            fn doSomethingElse_inner(y: i32) y * use_b;
            return doSomethingElse_inner(x * x);
        }

        fn main() {
            let implicit a = 0;
            let implicit b = 0;
            let implicit c = 0;
            return parseStuff(0);
        }
    `);


    // Template structs / generics.

    ZERO(`
        fn sA(_: $T) struct { hey: $T; };

        fn fA(a: $T): sA($T) = [ a + 2 ];
        fn main() 1.fA.hey - 3;
    `);

    ZERO(`
        fn sB(_: $T) struct { hey: $T; };

        fn fB(a: $T): sB($T) = [ a + 2 ];
        fn main() 1.fB.hey - 1.u32.fB.hey <fail bad call><pass/> .i32 </fail> ;
    `);

    ZERO(`
        fn sB(_: $T) struct { hey: $T; };

        // Prep for the thing below.
        fn test(x) x.hey - 1;

        // 'a' must be callable.
        type a = sB(i32);
        fn main() a(1).test;
    `);

    ZERO(`
        fn setupOperators(i: i32) {
            struct BINOP { i: i32; };
            return BINOP(:i);
        }

        fn main() setupOperators(0).i;
    `);

    ZERO(`
        fn sB(_: $T) struct { hey: $T; };

        fn setupOperators(i: i32) {
            struct BINOP { i: sB(i32); };
            mut s: sB(i32) = [ i ];
            return BINOP(s);
        }

        fn main() setupOperators(0).i.hey;
    `);

    ZERO([`
        fn Hey = struct { i: i32 }; // fn Hey generated nonsense code
        fn get(s: Hey) s.i;
    `,`
        fn main() {
            mut s: _0::Hey();
            return s.get();
        }
    `]);

    ZERO([`
        fn Hey(_: $T) = struct { i: $T };
        fn get(s) s.i;
    `,`
        fn main() {
            mut s: _0::Hey(i32);
            return s.get(); // get(): wasn't visible, the struct didnt remember its template origin module.
        }
    `]);

    TODO_specpat(`
        fn sB(_: $T) struct { hey: $T; };

        // Pattern & partial spec, how?
        fn test(x: sB($T)): $T = x.hey - 1;

        type a = sB(i32);
        fn main() a(1).test;
    `);

    TODO_specpat(`
        fn setupOperators(i: i32) {
            struct sB { hey: i32; }; // same as below
            struct BINOP { i: sB; }; //  but no templates
            return BINOP([ i ]);
        }

        fn main() setupOperators(0).i.hey;
    `);

    TODO_specpat(`
        fn setupOperators(i: i32) {
            fn sB(_: $T) struct { hey: $T; }; // same as above
            struct BINOP { i: sB(i32); };     //  but template
            return BINOP([ i ]);
        }

        fn main() setupOperators(0).i.hey;
    `);


    // Macros & loops.

    ZERO(`
        fn test(x: i32) {
            :OUTER {
                :INNER {
                    if (x > 1) break :OUTER;
                    if (x > 0) break :INNER;
                    return 2;
                }
                return 1;
            }
            return 0;
        }

        fn main() 2.test * 11 + (1.test - 1) * 13 + (0.test - 2) * 17;
    `);

    ZERO(`
        fn test(x: i32) {
            return {
                :BLOCK {
                    if (x & 1) break :BLOCK 1;
                    if (x & 2) return 2;
                    3
                }
            };
        }

        fn main() 4.test - 5.test - 6.test; // 3-1-2
    `);

    ZERO(`
        fn brkif(mut x: i32)
        {
            :WOOT
            if (x & 1) {
                if (x & 2) x++;
                if (x & 4) break :WOOT;
                x *= x;
            }

            return x;
        }

        fn main()
            brkif(1) + brkif(3) * 10 + brkif(5) * 100 + brkif(9) * 1000
                == 81541 ? 0 : 1;
    `);

    ZERO(`
        fn test(a: i32) {
            mut w = 3;
            :OUTER w += {
                :INNER {
                    if (a & 1)  break :INNER;
                    else        break :OUTER;
                };
                5
            };
            return w;
        }
        fn main() 0.test + 1.test - 11;
    `);

    ZERO(`
        fn ifbrk(a: i32) {
            mut x = 0;
            if (a & 3) {
                x += a;

                :IF_LABEL
                if (a & 1) {
                    mut incr    = a & 4 ? a * 2
                                : a & 2 ? { break :IF_LABEL; }
                                        : a;
                    x += incr;
                }
            }

            return x;
        }

        fn main() 1.ifbrk + 3.ifbrk * 10 + 5.ifbrk * 100 - 1532;
    `);

    ZERO(`
        fn v(x: i32) {
            return {
                :BLOCK                          5000 + { // *2:
                    if (x == 9) continue :BLOCK 2000;    //   - here
                    if (x == 8) return           300;
                    if (x == 7) break :BLOCK      40;

                    5                                    //   - and here!
                }
            }  // -----------------------------------
        }
        fn main() 9.v + 8.v + 7.v + 6.v      - 12345;
    `);

    ZERO(`
        pub fn test(x: i32[], y: i32[]) {
            let z = {
                :BLOCK {
                    mut w: i32[] = x;
                    if (y[0]) w ~= y;
                    if (w[0] != 17)
                        break :BLOCK w;
                    x
                }
            };

            return z[0] + z[z.len - 1];
        }

        fn main() test([ 1 ], [ 2 ]) - 3;
    `);

    ZERO(`
        fn test(mut x: i32) {
            {
                x++;
                :CANT_FLATTEN { // naive block flattening
                                //  can damage this label
                    if (x & 1) break :CANT_FLATTEN;
                    return x;
                }
            }
            return x * 2;
        }

        fn main() test(1) + test(2) - 8;
    `);

    ZERO(`
        fn Each(arr, fn)
            for (mut i = 0; i < arr.len; i++)
                fn(arr[i]);

        fn some(arr, fn) {
            arr.Each: |x| if (fn(x)) return x;

            return 0;
        }

        fn main() [ 1, 2, 3 ].some(|v| v & 1 == 0) - 2;

        ;; EXPECT (fu::slate<3, int> { 1, 2, 3 })
    `);

    ZERO(`
        fn outer() {
            mut sum = 0;

            inline fn inner(v: i32) {
                for (mut i = 0; i < 10; i++) {
                    sum += v;
                    if (sum > 40)
                        return :outer sum;
                }

                return v * 2;
            }

            mut x = 1;
            for (;;) x = inner(x);
        }

        fn main() outer - 42; // extra points for style
    `);

    ZERO(`
        inline fn Each(arr, fn)
            for (mut i = 0; i < arr.len; i++)
                fn(arr[i]);

        fn main() {
            mut sum = 0;
            :OUTER [1, 2, 3, 4].Each(|x| {
                sum += x;
                for (mut i = 1; i--; ) // once
                    if (sum == 6) break :OUTER;
            });
            return sum - 6;
        }

        ;; !N_NonTrivAutoCopy
    `);

    ZERO(`
        inline fn hello(ref sum) {  //     when inlined into woot
            if (sum > 2) return;    //      the hello block now looks like an expr
            sum += 2;               // <-    with a diverging tail return here
        }

        fn woot(ref sum) hello(sum);

        fn main() {
            mut sum = -2;
            sum.woot();
            return sum;
        }
    `);

    ZERO(`
        fn loop1d(i0, i1, fn)
            for (mut i = i0; i < i1; i++)
                fn(i);

        fn main() {
            mut x = 0;
            loop1d(0, 10, |i| { if (x += i) break; });
            return x - 1;
        }
    `);

    ZERO(`
        fn loop1d(i0, i1, fn)
            for (mut i = i0; i < i1; i++)
                fn(i);

        fn main() {
            mut x = 0;
            loop1d(0, 10, |i| { if (x += i) return x - 1; });
            return 101;
        }
    `);

    ZERO(`
        fn loop2d(x0, x1, y0, y1, fn) {
            for (mut y = y0; y < y1; y++)
            for (mut x = x0; x < x1; x++) fn(x, y);
        }

        fn main() {
            mut sum = 0;
            loop2d( x0:  0, x1: 10,
                    y0: 10, y1: 12, |x, y|
            {
                if (y < 11) {
                    sum++;          // for (x: 0, 10) so 10 times
                    continue;       // <- inner loop
                }

                if (x == 1) break;  // <- outer loop
                sum += (x + 1) * y; // once: (0+1)*(y=11)
            });

            return sum - 21;
        }
    `);

    ZERO(`
        fn loop1d(i0, i1, fn)
            for (mut i = i0; i < i1; i++)
                fn(i);

        fn loop2d(x0, x1, y0, y1, fn)
            loop1d(y0, y1, |y|
                loop1d(x0, x1, |x|
                    fn (x, y)));

        fn main() {
            mut sum = 0;
            loop2d( x0:  0, x1: 10,
                    y0: 10, y1: 12, |x, y|
            {
                if (y < 11) {
                    sum++;          // for (x: 0, 10) so 10 times
                    continue;       // <- inner loop
                }

                if (x == 1) break;  // <- outer loop
                sum += (x + 1) * y; // once: (0+1)*(y=11)
            });

            return sum - 21;
        }
    `);

    ZERO(`
        fn next(implicit ref sum: i32, lifetime: [i32], locals_start: i32) {
            sum += lifetime.len;
            return lifetime[locals_start, lifetime.len];
        }

        fn Lifetime_each(lifetime: [i32], visit) {
            for (mut i = 0; i < lifetime.len; i++)
                visit(lifetime[i, lifetime.len]);
        }

        fn Lifetime_F_TODO_FIX_RRET(lifetime: [i32], locals_start: i32) {
            Lifetime_each(:lifetime, visit: |l| {
                if (l)
                    Lifetime_F_TODO_FIX_RRET(l.next(locals_start), locals_start);
            });
        }

        fn main() {
            let lifetime = [ 1, 2 ];
            implicit mut sum = 0;
            Lifetime_F_TODO_FIX_RRET(lifetime, locals_start: 1);
            return sum - 4;
        }
    `);


    // Relaxer.

    ZERO(`
        fn hello(a) a * a;          ;; EXPECT (const int a)
        fn main() {
            mut a = 3;
            let b = hello(a);
            return b - 9;
        }
    `);

    ZERO(`
        struct AB { a: i32; b: i32; };
        fn sqr   (ref x: i32) x * x;
        fn outer (ref ab: AB) sqr(ab.a) + sqr(ab.b);        ;; EXPECT const s_AB&
        fn main() {
            mut ab = AB(3, 5);
            return ab.outer - 34;
        }
    `);

    ZERO(`
        fn ascii_lower(a: string): string
        {
            let offset = 'a'.i32 - 'A'.i32;

            mut res = a;
            for (mut i = 0; i < res.len; i++)
            {
                let c = res[i];
                if (c >= 'A' && c <= 'Z')
                    res[i] = byte(c.i32 + offset);
            }

            return res;
        }

        <split/>

        fn main() "WORLD!".ascii_lower[2].i32 - 'r'.i32;
    `);

    ZERO(`
        fn main() {
            mut a = [[ 7 ]];
            return a[0][0] - 7;        ;; EXPECT a[0][0]
        }
    `);

    ZERO(`
        struct Overload     { args: Argument[]; };
        struct SolvedNode   { x: i32; };
        struct Argument     { default: SolvedNode; };

        pub fn test(overload: Overload, ref args: SolvedNode[])
        {
            let host_args = overload.args;          ;; EXPECT fu::view<s_Argument> host_args

            args.resize(host_args.len);             // .len didnt relax its arg
            for (mut i = 0; i < args.len; i++)
            {
                if (!args[i])
                {
                    let host_arg = host_args[i];
                    args[i] = host_arg.default;
                }
            }
        }

        fn main() {
            mut o: Overload;
            for (mut i = 0; i < 3; i++)
                o.args ~= Argument(default: SolvedNode(x: i));

            mut args: SolvedNode[];
            test(o, args);
            return args.len - args[args.len - 1].x - 1;
        }
    `);

    TODO_borrowck(`
        struct S { hey: i32[]; };

        fn m_and_c_cant_alias_001(ref m!: S, c!: S) {
            m.hey.clear();
            return c.hey; // noalias
        }

        fn test(ref mc: S) {
            return m_and_c_cant_alias_001(m:mc, c:mc);  // Can't return a ref into c!
        }                                               //  But can be made to work by creating an intermediate copyvar
                                                        //   and move-returning from there.
        fn main() {
            mut mc  = S([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]);
            let hey = test(mc);
            return hey.len - 10;
        }
    `);

    ZERO(`
        // !!!! The m_and_c_cant_alias_001 test obsoletes this,
        // !!!!  this is just detects what we definitely don't want to see -
        // !!!!   returning a reference into a temporary copy.
        //
        struct S { hey: i32[]; };

        fn m_and_c_cant_alias_002(ref m: S, c: S) {
            m.hey.clear();
            return c.hey; // noalias
        }

        fn main() {
            mut mc  = S([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]);
            <fail alias>
            let hey = m_and_c_cant_alias_002(mc, mc);
            <pass/>
            mut bc  = mc;
            let hey = m_and_c_cant_alias_002(mc, bc);
            </fail>
            return hey.len - 10;
        }
    `);

    ZERO(`
        fn grow_if_oob(a: &mut $T[], i: i32): &mut $T {
            if (a.len <= i)
                a.grow(i + 1);

            return a[i];
        }

        struct BitSet { _data: u8[]; }

        fn add_once(using _: &mut BitSet, idx: i32): bool {
            let no_neg = idx < 0 ? -1 : 0;
            let bucket = idx / 8 | no_neg;
            let bit    = idx % 8;
            let mask   = 1 << bit.u8;

            ref entry = _data.grow_if_oob(bucket);
            if !(entry & mask) {
                entry |= mask;
                return true;
            }

            // Already there.
            return false;
        }

        type BitSet2D = BitSet[];

        fn add_once(ref bs: BitSet2D, i: i32, j: i32): bool {
            return bs
                .grow_if_oob(i)
                .add_once(j);
        }

        fn main() {
            mut bs: BitSet2D;
            bs.add_once(9, 9);
            return bs.len + 1000 * bs[9]._data.len - 2010;
        }
    `);

    ZERO(`
        fn test(mut _precedence = 0)
        {
            fn parseExpression(p1?: i32): i32 {
                if !(_precedence = p1)
                    return parseExpressionHead();

                return _precedence;
            }

            fn parseExpressionHead()
                parseExpression(_precedence * 101 + 1);

            return parseExpression();
        }

        fn main() = test() - 1;
    `);

    ZERO(`
        struct Overload {
            is_var?: bool;
            lifetime?: i32[];
        }

        fn GET(implicit overloads: Overload[], idx: i32) {
            return overloads[idx];
        }

        // Uncommenting the inline passes this,
        //  this is shit, we can't leave this like this.
        //
        // inline
        fn Lifetime_each(mut lifetime: i32[], visit) {
            for (mut i = 0; i < lifetime.len; i++) {
                let r = lifetime[i];
                let o = GET(r);
                visit(:o, i?: i, lifetime?: lifetime);
            }
        }

        fn Lifetime_ascend(mut lifetime: i32[], visit) {
            Lifetime_each(:lifetime, visit: |o, shadow lifetime| {
                visit(o);
                lifetime ~= o.lifetime; // set::add
            });
        }

        fn Lifetime_allowsMutrefReturn(lifetime: i32[]): bool {
            Lifetime_ascend(:lifetime, visit: |o| {
                if (o.is_var)
                    return false; // ERR: propagateType(jump): h.ret_actual not available.
            });

            return true;
        }

        fn main() {
            let implicit overloads = [
                Overload,
                Overload(lifetime: [ 0 ]),
                Overload(lifetime: [ 1 ], is_var: true),
                Overload(lifetime: [ 1 ]),
                Overload(lifetime: [ 2 ]), /* the isvar */
                Overload(lifetime: [ 3 ]), /* the non-isvar */
            ];

            let expect_false = Lifetime_allowsMutrefReturn([ 4 ]);
            let expect_true  = Lifetime_allowsMutrefReturn([ 5 ]);

            if (expect_false) return 20;
            if (!expect_true) return 10;
            return 0;
        }
    `);

    TODO(`
        struct Overload { items: string[]; };

        // This is a bit borderline -
        //  the problem here is that a: $T[] doesn't relax to a: [$T] (not during prep) -
        //   so we don't match at all. Still, that's what's written -
        //    perhaps regular fns are what doesn't behave correctly,
        //     since their relax can create ambiguity?
        //
        fn last(a: $T[])                    a[a.len - 1];
        fn arg_lets(overload: Overload)     overload.items[0, overload.items.len - 2];
        fn test(overload: Overload)         overload.arg_lets.last.len;
        fn main()                           Overload([ "hello", "cruel", "world!" ]).test - 5;
    `);

    ZERO(`
        struct Helpers      { index: i32; };
        struct HelpersData  { mask!: i16; };

        let HM_Function     = 1.i16 << 3;
        let HM_Struct       = 1.i16 << 5;

        using inline fn GET(h: Helpers, implicit ref _helpers_data: HelpersData[]): HelpersData
            _helpers_data[h.index];
                                                            //////////////////
        fn isFnOrType(h: Helpers): bool                     ;; EXPECT fu::view
            !!(h.mask & (HM_Function | HM_Struct));         //////////////////

        fn main() {
            implicit mut _helpers_data = [ HelpersData(mask: 0) ];
            return Helpers(0).isFnOrType.i32;
        }
    `);

    ZERO(`
        struct Helpers      { index: i32; };
        struct HelpersData  { mask!: i16; };

        let HM_Function     = 1.i16 << 3;
        let HM_Struct       = 1.i16 << 5;

        fn main() {
            implicit mut _helpers_data = [ HelpersData(mask: 0) ];

            using inline fn GET(h: Helpers): HelpersData
                _helpers_data[h.index];
                                                            //////////////////
            fn isFnOrType(h: Helpers): bool                 ;; EXPECT fu::view
                !!(h.mask & (HM_Function | HM_Struct));     //////////////////

            return Helpers(0).isFnOrType.i32;
        }
    `);

    ZERO([`
        pub fn ref(dest, item: $T, extras) {
            for (mut i = 0; i < dest.len; i++) {
                if (dest[i] >= item) {
                    if (dest[i] != item) {
                        dest.insert(i, item);
                        extras.insert(i, []);
                    }
                    return extras[i];
                }
            }

            dest.push(item);
            extras.push([]);
            return extras[extras.len - 1];
        }
    `,
    `
        fn Map(lax k: $K, lax v: $V) struct {
            keys: $K[];
            vals: $V[];
        };

        fn ref(using ref _, key)
            _0::ref(
                || keys, key,
                || vals);
    `,
    `
        fn main() {
            mut _map: _1::Map(string, string);

            fn upsert(k: string, v: string) _map._1::ref(k) = v;
            upsert("hello", "world");

            // Relaxer failed here while I was trying to get rid of F_REFs from specTypes.
            fn check(k: string) _map._1::ref(k) == "world" ? 0 : 1;
            return check("hello");
        }
    `]);

    TODO_relaxer(`
        fn useless_ref_lambda(ref sources: string[]) {
            fn src = sources[sources.len / 2]; // didn't relax the ref, failed bck
            return src[1, src.len] ~ src[0, 1];
        }
        fn main() {
            mut sources = [ "ab" ];
            return useless_ref_lambda(sources) == "ba" ? 0 : 1;
        }
    `);

    TODO_relaxer(`
        struct Node { items: Node[]; };

        pure fn rec_useless_ref(ref n: Node) {
            mut ret = n.items.len;
            for (mut i = 0; i < n.items.len; i++)
                ret += rec_useless_ref(n.items[i]);

            return ret;
        }

        fn main() {
            mut tree = Node([ Node(), Node() ]);
            return rec_useless_ref(tree) - 2;
        }
    `);

    ZERO(`
        fn last(s: $T[])
            s.len ? s[s.len - 1] : throw("len == 0");

        struct Node { kind: string; items: Node[] }

        pure fn check(ref node: Node)
            node.kind != "block" ||
            node.items.last.kind == "return";

        fn main() {
            mut node: Node;
            return node.check ? 0 : 1;
        }
    `);

    TODO_relaxer(`
        fn relaxes_arr_to_slice_and_fails(ref arr) {
            arr.pop();
            return arr;
        }

        fn main() {
            mut arr = [ 1 ];
            relaxes_arr_to_slice_and_fails(arr);
            return arr.len;
        }
    `);

    // /Relaxer.


    // Mangling.

    ZERO([`
        fn Each(y<alt>: i32</alt>)
            y & 1   ? y
                    : y / 2 + Each(y / 2);
    `,
    `
        fn Each(y<alt>: i32</alt>)
            y & 1   ? y / 2
                    : y / 2 + Each(y / 2);
    `,
    `
        fn main() {
            let a = _0::Each(100);
            let b = _1::Each(8);

            return a+b - 107;
        }
    `]);

    ZERO([`
        fn find(keys: $T[], item: $T) {
            for (mut i = 0; i < keys.len; i++) {
                if (keys[i] >= item) {
                    if (keys[i] != item)
                        return -1;

                    return i;
                }
            }

            return -1;
        }
    `,
    `
        fn Set(_: $K) struct { keys: $K[]; };

        fn has(using _, key)
            _0::find(keys, key) >= 0;
    `,
    `
        fn use_Set(a: string) {
            mut set: _1::Set(string);
            set.keys ~= a;
            return set._1::has(a);
        }

        fn dont_use_Set(a: string, b: string) {
            mut keys: string[];
            keys ~= b;
            keys ~= a;
            return keys.find(a);
        }

        fn main() {
            if (!use_Set("a"))
                return -1;

            return dont_use_Set("a", "b") - 1;
        }
    `]);

    ZERO(`
        fn test(tokens: i32[]) {
            mut lidx = 0;
            mut sum  = 0;

            fn token(idx: i32, col!: i32)       = sum += idx * col;
            fn token(idx: i32)                  = token(:idx, col: lidx - idx);

            for (mut i = 0; i < tokens.len; i++)
                token(tokens[i]);

            return sum;
        }

        fn main() [ 1 ].test + 1;
    `);

    ZERO([`
        fn sum_each(a, b, Each)     a.Each + b.Each;

        fn hello(x) {
            if (x & 1) {
                fn Each(y) y    ? y * Each(y - 1)
                                : 100;

                return sum_each(x, x, fn Each);
            }
            else {
                fn Each(y) y    ? y * Each(y - 1)
                                : 10000;

                return sum_each(x, x, fn Each);
            }
        }
    `,
    `
        fn Each(y) y & 1    ? y
                            : y / 2 + Each(y / 2);

        fn main() _0::hello(1) - 2 * Each(100)
                + _0::hello(2) - 2 * Each(20000);
    `]);

    TODO([`
        fn sum_each(a, b)       // Same as above,
            a.Each + b.Each;    //  but we don't explicitly pass the fn Each in.

        fn hello(x) {
            if (x & 1) {
                fn Each(a) a    ? a * Each(a - 1)   // These get ignored?
                                : 100;              //  sum_each goes and selects the one from _1.

                return sum_each(x, x);
            }
            else {
                fn Each(b) b    ? b * Each(b - 1)
                                : 10000;

                return sum_each(x, x);
            }
        }
    `,
    `
        fn Each(c) c & 1    ? c
                            : c / 2 + Each(c / 2);

        fn main() _0::hello(1) - 2 * Each(100)
                + _0::hello(2) - 2 * Each(20000);
    `]);

    ZERO(`
        fn a        = "aaa";
        fn shorter  = "bb";
        fn greater  = "aac";

        return a <> shorter == +1
            && a <> greater == -1 ? 0 : 101;
    `);

    ZERO([`
        fn &(a, b) {
            mut res = a;
            for (fieldname i: $a) res.i &= b.i;
            return res;
        }

        struct XY  { x: i32; y: i32 };
        struct UVW { u: i32; v: i32; w: i32 };
    `,`
        import _0;

        fn main() {
            mut xy  =  XY(1, 2)    &  XY(2, 3);
            mut uvw = UVW(1, 2, 3) & UVW(2, 3, 4);
            return xy.y - uvw.v;
        }
    `]);


    // C++ hacks.

    ZERO(`
        pragma emit("
            void ccIncrX2(int& a, int b) {
                a += b * 2;
            }
        ");

        fn main() {
            mut a = 0;
            pragma emit("ccIncrX2(", a, ", 5);");
            return a - 10;
        }
    `);


    // Function types sketch.

    TODO_fntype(`
        fn apply(num: i32, func: fn (i32): i32) = func(num);
        fn main()                               = apply([1], |i| i - 1);
    `);

    ZERO(`
        fn desc(a: i32, b: i32) b < a;

        fn main() {
            mut vals = [ 1, 2 ];
            vals.sort(fn desc);
            return vals[0] - 2;
        }
    `);

    ZERO(`
        fn main() {
            mut vals = [ 1, 2 ];
            vals.sort(|a: i32, b: i32| b < a);
            return vals[0] - 2;
        }
    `);

    ZERO(`
        fn main() {
            mut vals = [ 1, 2 ];
            vals.sort(|a, b| b < a);
            return vals[0] - 2;
        }
    `);

    ZERO(`
        fn test(ref vals: i32[], xor: i32)
            vals.sort(
                |a: i32, b: i32|
                    a^xor < b^xor);

        fn main() {
            mut vals = [ 1, 2 ];
            vals.test(xor: 3); // xor:3 descs 1 and 2.
            return vals[0] - 2;
        }
    `);


    // Fork/join parallelism.

    ZERO(`
        fn main() {
            mut arr = [ 1, 2, 3, 4 ];

            arr.par::each: |it| it *= 2;

            mut sum = 0;
            for (mut i = 0; i < arr.len; i++)
                sum += arr[i];

            return sum - 2 - 4 - 6 - 8;
        }
    `);

    ZERO(`
        fn seq__each(a: [$T], fn)
            for (mut i = 0; i < a.len; i++)
                fn(a[i]);

        fn main() {
            mut arr = [ 1, 2, 3, 4 ];
            mut sum = 0;

            <fail purectx writes to implicit sum>
            arr.par::each: |it| <pass/>
            arr.seq__each: |it| </fail>
                sum += it *= 2;

            return sum - 2 - 4 - 6 - 8;
        }
    `);

    ZERO(`
        fn seq__each(a: [$T], fn)
            for (mut i = 0; i < a.len; i++)
                fn(a[i]);

        fn main() {
            mut arr = [ 1, 2, 3, 4 ];

            <fail noflow non local control flow>
            arr.par::each: |it| <pass/>
            arr.seq__each: |it| </fail>
                if ((it *= 2) > 4)
                    break;

            mut sum = 0;
            for (mut i = 0; i < arr.len; i++)
                sum += arr[i];

            return sum - 2 - 4 - 6 - 4/*unchanged after break*/;
        }
    `);

    ZERO(`
        fn test(ref arr: i32[])
            arr.par::each: |v, i| v += i;

        fn main() {
            let N = 1087 * 1091;

            mut orig: i32[];
            orig.resize(N);

            mut arr = orig;
            arr.test();

            if (arr.len != N || arr.len != orig.len)
                return 1;

            for (mut i = 0; i < N; i++)
                if (orig[i] != 0)
                    return 2;

            for (mut i = 0; i < N; i++)
                if (arr[i] != i)
                    return 3;

            return 0;
        }
    `);


    // Custom primitives, enums & flags.

    ZERO(`
        fn main() {
            let i: i8 = 0;
            <fail return type annot>
            return i;        <pass/>
            return i.i32;    </fail>
        }
    `);

    ZERO(`
        primitive s32: i32;

        fn main() {
            let i: s32 = 0;
            <fail return type annot>
            return i;        <pass/>
            return i.i32;    </fail>
        }
    `);

    ZERO(`
        enum Enum { None = 0 };

        fn main() {
            let e = None;
            <fail return type annot>
            return e;        <pass/>
            return e.i32;    </fail>
        }
    `);

    ZERO(`
        enum Test { A = 5; B; C };
        fn main()
            <fail - bad call>
            C - 7;      <pass/>
            C.i32 - 7;  </fail>
    `);

    ZERO(`
        <alt>
        primitive <alt/>
        enum      </alt> Test: i32 { A1; A2; M5 = 5; A6 };

        fn main()
            A1.i32 + A2.i32 * 10 + M5.i32 * 100 + A6.i32 * 1000
                == 6521 ? 0 : 1;
    `);

    ZERO(`
        <fail bad call to ->
        enum         <pass/>
        primitive    </fail> Test: i32 { A; B };
        fn main() (B - A).i32 - 1;
    `);

    ZERO(`
        enum EnumA: i32;
        enum EnumB: EnumA { Zero = 0 };
        fn main() Zero.i32;
    `);

    ZERO(`
        primitive PrimA: i32;
        primitive PrimB: PrimA { Zero = 0; One };
        fn main() (One - 1).i32;
    `);

    ZERO(`
        primitive PrimA: i32;
        primitive PrimB: PrimA { Zero = 0; One };

    <alt>
        fn and_decr(ref prim: PrimB)
            prim &&= prim - 1;
    <alt/>
        fn and_decr(ref prim: PrimB)
        {
            mut res = prim - 1;
            prim &&= res;
            return prim;
        }
    </alt>

        fn main() {
            mut r = One;
            return r.and_decr.i32;
        }
    `);

    ZERO(`
        enum Hey { foo; };
        fn test(hey: Hey) hey.i32;
        fn main() test("foo") - 1;
    `);

    ZERO(`
        enum Greet { hello; world };
        fn main()
            hello ~ " " ~ world == "hello world"
                ? 0 : 1;
    `);

    ZERO(`
        enum Greet { hello; world };
        fn woot(hi: Greet) hi == "hello";
        fn main() hello.woot ? 0 : 1;
    `);

    ZERO([`
        enum Greet { hello; world };
        fn h() hello;
        fn w() world;
    `,`
        fn main()
            _0::h() ~ " " ~ _0::w() == "hello world"
                ? 0 : 1;
    `]);

    ZERO([`
        enum _0 { A; B };
    `,`
        fn test(::_0) _0.i32;
        fn main() "A".test - _0::A.i32;
    `]);

    ZERO([`
        enum _0 { A; B };
    `,`
        fn test(x: ::_0 = "B") x.i32;
        fn main() test - _0::B.i32;
    `]);

    ZERO(`
        enum Enum { A = 0; B };
        fn inner(x: Enum) x.i32;
        fn outer(x: i32) inner(x & 1 ? "B" : "A");
        fn main() outer(0);
    `);

    SKETCH(`
        enum Test { A; B = A; C; };
        fn main() C.i32 - 1;
    `);

    ZERO(`
        flags Flags { A; B; C; D };

        fn main() {
            mut flags = A | C;
            return flags.i32 == 5 ? 0 : 1;
        }
    `);

    ZERO(`
        flags Flags: i32 { A; B };

        fn main() {
            mut hello = 5;
            mut world = hello.Flags;
            return world.i32 - 1;
        }
    `);

    ZERO(`
        flags Hey: u8 { A; B };
        fn main() {
            mut flags = A | B;
            flags &= ~B;
            return flags.i32 - 1;
        }
    `);

    TODO_ambig(`
        enum thing { i32; int; bool }

        // So the problem is the retval annotation for fn ==(template): bool
        //  fails to resolve as it conflicts with enumv from thing here.
        //
        // I'm not terribly sure what we want to do about it,
        //  it's the ambiguity thing again - template sees the enum on expansion,
        //   so it does kinda make sense for thing not to compile,
        //    otherwise imagine the original bool goes away,
        //     it'd fallback to the enumv here, which is exactly not what we want.
        //
        // Perhaps the scoping rules for templates don't make so much sense,
        //  if we didn't make everything from local scope visible
        //   they'll also compile faster.
        //
        fn isInt (k: thing) k == "i32" || k == "int";
        fn isBool(k: thing) k == "bool";
        fn main() isInt("i32") && isBool("bool") ? 0 : 1;
    `);


    // Unions, what the hell.

    ZERO(`
        union union_ui {
            i: i32;
            u: u32;
        }

        fn main() {
            mut ui = union_ui(i: -1);
            return (ui.u - 0xffffffff).i32;
        }
    `);


    // Effects & discard.

    ZERO(`
        fn does_throw(mut x: i32) {
            if (x & 1)          return x;
            mut str = "";
            while (x--)         str ~= x;
            throw(str);
        }

        nothrow fn does_catch(mut y: i32) {
            try                 return does_throw(y);
            catch (e)           return e.len;
        }

        <fail does_throw throws>
        nothrow <pass/></fail>
        fn doesnt_catch(mut z: i32) {
            if (z & 2)          return does_throw(z);
            else                return does_catch(z);
        }

        fn main() = doesnt_catch(1) - 1;
    `);

    ZERO(`
        fn has_fx() {
            mut res = 0;
            pragma output("
                static int counter;
                "res"    = counter++;
            ");
            return res;
        }

        fn not_dead_mutually_rec_a(x: i32) {
            if (x > 0) {
                not_dead_mutually_rec_b(x - 1);
                has_fx();
            }
        }

        fn not_dead_mutually_rec_b(x: i32) {
            if (x > 0) {
                not_dead_mutually_rec_a(x - 1);
                has_fx();
            }
        }

        fn main() {
            <alt>
            not_dead_mutually_rec_a(2); <alt/>
            not_dead_mutually_rec_b(2); </alt>
            return has_fx() - 2;
        }
    `);

    ZERO(`
        fn no_fx() {
            mut res = 0;
            pragma clock("
                static int counter;
                "res"  = counter++;
            ");
            return res;
        }

        fn test(lax x: i32) {
            x & 1 && no_fx();
            x & 2 || no_fx();
            if (!no_fx) no_fx(); else no_fx();
            for (mut i = 1; i--> 0; no_fx()) no_fx();

            // the idea is that everything above should go,
            //  and just this one call to no_fx will remain.
            return no_fx();
        }

        fn main() = test(1);
    `);

    ZERO(`
        fn lex(src: string) {
            mut idx = 0;
            let end = src.len;
            while (idx < end) {
                let c = src[idx++]; // bug in discard(if) unused this var
                if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z' || c == '_' || c >= '0' && c <= '9') {
                    //
                }
                else {
                    idx--;
                    break;
                }
            }
            return idx;
        }

        fn main() = "hello!".lex - 5;
    `);


    // ZERO(`
    //     enum Thing {
    //         None;
    //         enum Animal { Cat; Dog; }
    //         enum Food { Apple; Orange; }
    //     };
    //
    //     fn main() Apple.i32 - Dog.i32 - 1;
    // `);

    // ZERO(`
    //     tuple enum TextureType: u32 {
    //
    //         enum Kind {
    //             None;
    //
    //             T_unorm; T_snorm;  T_uint; T_int;
    //             T_float; T_ufloat; T_srgb; T_depth;
    //         };
    //
    //         enum Size {
    //             None;
    //
    //             T_8x4; T_16x4; T_32x4;
    //             T_8x3; T_16x3; T_32x3;
    //             T_8x2; T_16x2; T_32x2;
    //             T_8x1; T_16x1; T_32x1;
    //
    //             T_10x3_2; T_11x2_10; T_24x1_8;
    //         };
    //
    //         flags enum Usage {
    //             T_nosample;
    //             T_nomips;
    //             T_fmin_nearest;
    //             T_fmag_nearest;
    //             T_clamp_u;
    //             T_clamp_v;
    //         };
    //     };
    //
    //     pub let T_d24_s8            = T_24x1_8 | T_depth;
    //     pub let T_DepthRenderBuffer = T_d24_s8 | T_nosample;
    //
    //     fn main()
    //         TODO;
    // `);
}
