#import 'lexer';
#import 'parser';
#import 'solver';

let prelude_src = `


// Some lolcode.

fn __native_pure(): never never;
fn __native_pure(id: string): never never;
fn __native_pure(id: string, opt: string): never never;

fn STEAL (a: &mut $T): $T __native_pure;
fn CLONE (a: &    $T): $T __native_pure;

fn print(a: $A): void __native_pure;
fn print(a: $A, b: $B): void __native_pure;
fn print(a: $A, b: $B, c: $C): void __native_pure;
fn print(a: $A, b: $B, c: $C, d: $D): void __native_pure;
fn print(a: $A, b: $B, c: $C, d: $D, e: $E): void __native_pure;
fn print(a: $A, b: $B, c: $C, d: $D, e: $E, f: $F): void __native_pure;


// Arithmetics.

fn +(a: $T)                 case ($T -> @arithmetic):   $T __native_pure;
fn +(a: $T, b: $T)          case ($T -> @arithmetic):   $T __native_pure;

fn -(a: $T)                 case ($T -> @arithmetic):   $T __native_pure;
fn -(a: $T, b: $T)          case ($T -> @arithmetic):   $T __native_pure;
fn *(a: $T, b: $T)          case ($T -> @arithmetic):   $T __native_pure;

fn /(a: $T, b: $T)
    // case ($T -> @floating_point):                       $T __native_pure;
    // case ($T -> @integral && $b -> @non_zero):          $T __native_pure;
    case ($T -> @arithmetic): $T __native_pure;

fn %(a: $T, b: $T)
    // case ($T -> @floating_point):                       $T __native_pure;
    // case ($T -> @integral && $b -> @non_zero):          $T __native_pure;
    case ($T -> @arithmetic): $T __native_pure;

fn ++(a: &mut $T)           case ($T -> @arithmetic):   $T __native_pure;
fn --(a: &mut $T)           case ($T -> @arithmetic):   $T __native_pure;
fn +=(a: &mut $T, b: $T)    case ($T -> @arithmetic):   &mut $T __native_pure;
fn -=(a: &mut $T, b: $T)    case ($T -> @arithmetic):   &mut $T __native_pure;

fn ==(a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;
fn !=(a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;
fn > (a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;
fn < (a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;
fn >=(a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;
fn <=(a: $T, b: $T)         case ($T -> @arithmetic):   bool __native_pure;


// Bitwise.

fn ~(a: $T)                 case ($T -> @integral):     $T __native_pure;
fn &(a: $T, b: $T)          case ($T -> @integral):     $T __native_pure;
fn |(a: $T, b: $T)          case ($T -> @integral):     $T __native_pure;
fn ^(a: $T, b: $T)          case ($T -> @integral):     $T __native_pure;
fn <<(a: $T, b: $T)         case ($T -> @integral):     $T __native_pure;
fn >>(a: $T, b: $T)         case ($T -> @integral):     $T __native_pure;

fn &=(a: &mut $T, b: $T)    case ($T -> @integral):     &mut $T __native_pure;
fn |=(a: &mut $T, b: $T)    case ($T -> @integral):     &mut $T __native_pure;
fn ^=(a: &mut $T, b: $T)    case ($T -> @integral):     &mut $T __native_pure;


// Logic.

fn true (): bool __native_pure;
fn false(): bool __native_pure;


// Assignment.

fn   =(a: &mut $T, b: $T): &mut $T __native_pure;
fn ||=(a: &mut $T, b: $T): &mut $T __native_pure;

fn SWAP(a: &mut $T, b: &mut $T): void __native_pure;


// Arrays.

fn len (a: $T[]): i32 __native_pure;
fn find(a: $T[], b: $T): i32 __native_pure;
fn has (a: $T[], b: $T): bool __native_pure;

fn [](a: $T[], i: i32)
    case ($a -> &mut $T[]): &mut $T __native_pure;
    case ($a -> &    $T[]): &    $T __native_pure;

fn    push(a: &mut $T[], b: $T): void __native_pure;
fn unshift(a: &mut $T[], b: $T): void __native_pure;
fn  insert(a: &mut $T[], i: i32, b: $T): void __native_pure;

fn  slice(a: $T[], i0: i32, i1: i32): $T[] __native_pure;
fn  slice(a: $T[], i0: i32): $T[] __native_pure;

fn splice(a: &mut $T[], i: i32, N: i32): void __native_pure;
fn    pop(a: &mut $T[]): void __native_pure;

fn  clear(a: &mut $T[]): void __native_pure;
fn resize(a: &mut $T[], len: i32): void __native_pure;
fn shrink(a: &mut $T[], len: i32): void __native_pure;

fn move(a: &mut $T[], from: i32, to: i32): void __native_pure;
fn sort(a: &mut $T[]): void __native_pure;


// Concats.
//
//  flatten: str/arr a+b+c chains into a n-ary binop -
//  adjoin : str/arr chain adjacent += for the same left-arg.
//
//      Currently just testing notations,
//        but can we make this more generic?
//          Will it be useful? Array ops are really
//            the only thing we care about optimizing.

fn +(a: $T[], b: $T[]): $T[] __native_pure( 'arr+', 'flatjoin' );
fn +(a: $T[], b: $T  ): $T[] __native_pure( 'arr+', 'flatjoin' );
fn +(a: $T  , b: $T[]): $T[] __native_pure( 'arr+', 'flatjoin' );

fn +=(a: &mut string, b: string): &mut string __native_pure( 'arr+', 'flatjoin' );
fn + (a:      string, b: string):      string __native_pure( 'arr+', 'flatjoin' );


// Strings.

fn len(a: string): i32 __native_pure;
fn  [](a: string, i: i32): string __native_pure;

fn ==(a: string, b: string): bool __native_pure;
fn !=(a: string, b: string): bool __native_pure;
fn  >(a: string, b: string): bool __native_pure;
fn  <(a: string, b: string): bool __native_pure;
fn >=(a: string, b: string): bool __native_pure;
fn <=(a: string, b: string): bool __native_pure;

fn   find(a: string, b: string): i32 __native_pure;
fn    has(a: string, b: string): bool __native_pure;
fn starts(a: string, with: string): bool __native_pure;

fn slice (a: string, i0: i32, i1: i32): string __native_pure;
fn slice (a: string, i0: i32): string __native_pure;

fn substr(a: string, i0: i32, i1: i32): string __native_pure;
fn char  (a: string, i0: i32): i32 __native_pure;


// TODO: .replace() is a faster impl of .split().join().
//  How do we express this so that .split.joins are automatically promoted?
//   This would be generally useful, e.g.
//    .map.maps and .map.filters could use this to skip allocs.

fn   split(str: string, sep: string): string[] __native_pure;
fn    join(a: string[], sep: string): string __native_pure;
fn replace(in: string, all: string, with: string): string __native_pure;


// Maps.

fn [](a: Map($K, $V), b: &$K)
    case ($a -> &mut Map($K, $V)): &mut $V __native_pure;
    case ($a -> &    Map($K, $V)): &    $V __native_pure;

fn keys  (a: Map($K, $V)): $K[] __native_pure;
fn values(a: Map($K, $V)): $V[] __native_pure;
fn has   (a: Map($K, $V), b: $K): bool __native_pure;
fn count (a: Map($K, $V)): i32 __native_pure;


// Assertions, bugs & fails.

fn throw(reason: string): never __native_pure;
fn assert(): never __native_pure;


// Butt plugs.

// TODO we should go for an any $B -> call stringify(b) macro.
fn +(a: string, b: i32): string __native_pure;
fn +(a: string, b: f64): string __native_pure;
fn +(a: i32, b: string): string __native_pure;
fn +(a: f64, b: string): string __native_pure;

// TODO fix impure io.
fn now_hr(): f64 __native_pure;
fn now_utc(): f64 __native_pure;

fn env_get(key: string): string __native_pure;

fn file_size(path: string): i32 __native_pure;
fn file_read(path: string): string __native_pure;
fn file_write(path: string, body: string): bool __native_pure;

fn shell_exec(cmd: string): i32 __native_pure;
fn shell_exec(cmd: string, stdout: &mut string): i32 __native_pure;

fn hash_tea(str: string): string __native_pure;

fn i32(v: f64): i32 __native_pure;

fn exit(code: i32): never __native_pure;

`;

fn solvePrelude(): TEMP_Context
{
    // In order to keep the prelude around,
    //  I'm thinking we'll just prep a ready-to-copy template,
    //   with prelude solved at modid 0.
    let implicit mut ctx: TEMP_Context;
    let implicit mut module = getModule('');

    let lexed   = lex(prelude_src, '__prelude');
    let root    = parse(0, '__prelude', :lexed.tokens).root;
    let solved  = solve(root);

    module.out.solve = solved;
    setModule(module);

    return ctx;
}

pub let CTX_PRELUDE: TEMP_Context = solvePrelude();
