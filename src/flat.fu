// TODO on next 'works', break this file up into
//  flat/Set.fu, flat/Map.fu and flat/CountedSet.fu


// flat/Set.fu

pub struct Set(type T)
{
    keys_asc!: T[];
};


// TODO FIX using instead,
//  currently won't resolve for templates.
//
// NOTE - these are actually const -
//  we don't want to expose keys_asc for external mutation,
//   because that'd break sort order.
//
// So ideally, we'd be using keys_asc,
//  but it'd be "file-protected" or whatever we decide to call
//   read-from-anywhere, but write-only-from-this-file.
//
pub inline fn   [](using _: Set($T), i: int) keys_asc[i];
pub inline fn  len(using _: Set($T)) keys_asc.len;
pub inline fn each(using _: Set($T), each) keys_asc.each(fn each);

pub inline fn clear(using ref _: Set($T)) keys_asc.clear();


//

fn bfind(keys_asc!: $T[..], key: $T, hit, miss)
{
    mut lo = 0;
    mut hi = keys_asc.len;

    // TODO if $T is primitive -
    //  use a linear search when hi - lo < 16 or something.
    //   not worth doing for more complicated comparators,
    //    here it's nice we only call the <> in one spot.
    //
    while (lo < hi)
    {
        // overflow-proof alla std::midpoint:
        //  let i = lo + ((hi - lo) >> 1);
        //
        let i   = (hi + lo) >> 1;

        let cmp = keys_asc[i] <> key;
        if (cmp == 0)
            return hit(i);

        if (cmp < 0)
            lo = i + 1;
        else
            hi = i;
    }

    return miss(lo);
}

pub fn has(using _: Set($T), key: $T)
{
    bfind(:keys_asc, :key,

    hit: |_| {
        return true;
    },

    miss: |_| {
        return false;
    });
}

pub fn add(using mut ref _: Set($T), key: $T)
{
    bfind(:keys_asc, :key,

    hit: |_| {
        return false;
    },

    miss: |i| {
        keys_asc.insert(i, key);
        return true;
    });
}

pub fn update(using mut ref _: Set($K),   key:  $K,
                        ref values: $V[], value: $V)
{
    bfind(:keys_asc, :key,

    hit: |i| {
        values[i] = value;
        return false;
    },

    miss: |i| {
        keys_asc.insert(i, key);
        values.insert(i, value);
        return true;
    });
}

pub fn ref(using ref _: Set($K), key: $K,
                 ref values: $V[],
                 init!?)
{
    let idx = bfind(:keys_asc, :key,

    hit: |i| {
        break i;
    },

    miss: |i| {
        values.insert(i, init());   // <- init FIRST, throw/return safety
        keys_asc.insert(i, key);    //  how can this be made safe generally?
        break i;
    });

    return values[idx];
}

pub fn if(using ref _: Set($K), key: $K,
                ref values: $V[..],
                    visit)
{
    bfind(:keys_asc, :key,

    hit: |i| {
        visit(values[i], remove?: || {
            keys_asc.splice(i, 1);
            values.splice(i, 1);
        });

        return true;
    },

    miss: |_| {
        return false;
    });
}

pub fn get(using ref _: Set($K), key: $K,
                 ref values: $V[..])
{
    bfind(:keys_asc, :key,

    hit: |i| {
        return values[i];
    },

    miss: |_| {
        return [];
    });
}

pub fn remove(using mut ref _: Set($K), key: $K)
{
    bfind(:keys_asc, :key,

    hit: |i| {
        keys_asc.splice(i, 1);
        return true;
    },

    miss: |_| {
        return false;
    });
}


// TODO instead of this,
//  make sure each item is moved exactly once.

pub fn add(mut ref a.keys_asc: $T[], b.keys_asc: $T[..])
{
    mut x = 0;
    mut y = 0;
    while (x < a.len && y < b.len) {
        let X = a[x];
        let Y = b[y];

        let cmp = X <> Y;
        if (cmp >= 0) {
            if (cmp != 0) {
                a.insert(x, Y); // TODO FIX
                y++;
            }
            else {
                y++;
            }
        }

        x++;
    }

    if (y < b.len)
        a ~= b[y ..];
}

pub fn keep(mut ref a.keys_asc: $T[], b.keys_asc: $T[..])
{
    mut x = 0;
    mut y = 0;
    while (x < a.len && y < b.len) {
        let X = a[x];
        let Y = b[y];

        let cmp = X <> Y;
        if (cmp == 0) {
            x++;
            y++;
        }
        else if (cmp > 0) {
            y++;
        }
        else {
            a.splice(x, 1); // TODO FIX
        }
    }

    if (x < a.len)
        a.shrink(x);

    return a;
}

pub fn remove(mut ref a.keys_asc: $T[], b.keys_asc: $T[..])
{
    mut x = 0;
    mut y = 0;
    while (x < a.len && y < b.len) {
        let X = a[x];
        let Y = b[y];

        let cmp = X <> Y;
        if (cmp == 0) {
            a.splice(x, 1); // TODO FIX
            y++;
        }
        else if (cmp > 0) {
            y++;
        }
        else {
            x++;
        }
    }

    return a;
}


// The new thing potentially.

fn merge(l.keys_asc: $T[..], r.keys_asc: $T[..], left, right, both)
{
    mut li = 0;
    mut ri = 0;

    for (;;)
    {
        inline fn L = l[li];
        inline fn R = r[ri];

        let l_done = li == l.len;
        let r_done = ri == r.len;

        let cmp = l_done ? r_done ? { return; } : +1
                         : r_done ? -1
                         : L <> R;

        // TODO come up with a way to combine these nicely,
        //  unfortunately copy pasted below
        //
        if (cmp == 0) {
            both(L, left?: li, right?: ri);
            li++;
            ri++;
        }
        else if (cmp < 0) {
            left(L, left?: li, right?: ri);
            li++;
        }
        else {
            right(R, left?: li, right?: ri);
            ri++;
        }
    }
}

fn merge(l.keys_asc: $T[..], r.keys_asc: $T[..], left_or_both, right)
{
    mut li = 0;
    mut ri = 0;

    for (;;)
    {
        inline fn L = l[li];
        inline fn R = r[ri];

        let l_done = li == l.len;
        let r_done = ri == r.len;

        let cmp = l_done ? r_done ? { return; } : +1
                         : r_done ? -1
                         : L <> R;

        // TODO come up with a way to combine these nicely,
        //  unfortunately copy pasted above,
        //   here both case collapsed into left -
        //    and this is only so that we inline the fns in a single spot.
        //
        if (cmp <= 0) {
            left_or_both(L, left?: li, right?: ri);
            li++;
            ri += int(cmp == 0);
        }
        else {
            right(R, left?: li, right?: ri);
            ri++;
        }
    }
}


//

pub fn has_inter(l: Set($T), r: Set($T))
{
    merge(l, r,
        left: |_| {}, right: |_| {},
        both: |_| { return true; });

    return false;
}

pub fn inter(l: Set($T), r: Set($T))
{
    // First, we'll try to return a copy of left -
    //  can't do that if its the longer of the two,
    //   so we flip args.
    //
    if (r.keys_asc.len < l.keys_asc.len)
        return inter(r, l);

    mut result: $T[];
    mut useResult = false;

    merge(l, r,

    left: |_, left|
    {
        // Can't use left as-is, it has extra stuff.
        //  The slice kinda still make it possible
        //   to share storage unless we start appending.
        //
        if (!useResult) {
            useResult = true;
            result = l.slice(0, left);
        }
    },

    right: |_| {},

    both: |item|
    {
        if (useResult)
            result ~= item;
    });

    return useResult ? Set(keys_asc: result) : l;
}

pub fn union(l: Set($T), r: Set($T)): Set($T)
{
    // Same as above, but flipped,
    //  we want left to be the longer of the two.
    //
    if (r.keys_asc.len > l.keys_asc.len)
        return union(r, l);

    mut result: $T[];
    mut useResult = false;

    merge(l, r,

    left_or_both: |item|
    {
        if (useResult)
            result ~= item;
    },

    right: |item, left|
    {
        if (!useResult) {
            useResult = true;
            result ~= l.keys_asc[.. left];
        }

        result ~= item;
    });

    return useResult ? [ keys_asc: result ] : l;
}

pub fn diff(from: Set($T), remove: Set($T)): Set($T)
{
    mut result: $T[];
    mut useResult = false;

    merge(remove, from,

    left_or_both: |_, right|
    {
        if (!useResult) {
            useResult = true;
            result = from.slice(0, right);
        }
    },

    right: |item|
    {
        if (useResult)
            result ~= item;
    });

    return useResult ? [ keys_asc: result ] : from;
}


//

pub fn misses_some(l: Set($T), from!: Set($T))
{
    merge(l, from,
        left: |_| {}, right: |_| { return true; },
        both: |_| {});

    return false;
}


// flat/Map.fu

/*
struct Map(K, V)
{
    keys: K[];
    vals: V[];

    fn size()
        keys.len;

    fn find(key)
        set::find(keys, key);

    fn has(key)
        find(key) >= 0;

    fn update(key, value)
        set::update(keys, key, vals, value);

    fn get(key) {
        let idx = find(key);
        if (idx >= 0)
            return vals[idx];

        return [];
    }
};
*/

pub struct Map(type K, type V) {
    keys: Set(K)
    vals: V[]
}

pub fn has(using ref _: Map($K, $V), key: $K): bool {
    keys.has(key)
}

pub fn get(using ref _: Map($K, $V), key: $K): $V {
    keys.get(key, vals)
}

pub fn each(using ref _: Map($K, $V), fn) {
    for (mut i = 0; i < vals.len; i++) {
        let key = keys.keys_asc[i]//// <- Going through a let here prevents bind-by-mutref.
        fn(vals[i], ?:key)          //
    }                               // Not great, maybe we need a `ref ` kw-prefix
}                                   //  at callsites like in c#,
                                    //   it'd work as `&mut ` in rust if possible,
                                    //    still mut-generic.
                                    //
                                    // Wonder what that means for . notation though.
                                    //  What's happening in rust is, they make an exception.
                                    //   Method-invocation via . notation exception
                                    //    triggers what they call an "auto-deref",
                                    //     which basically is it's special thing.
                                    //
                                    // POSSIBLE SOLUTION (FN-TYPES):
                                    //
                                    // Typing the fn(const key: $K, ref val: $V)
                                    //  would also do the trick, probably way cleaner.

pub fn set(using mut ref _: Map($K, $V), key: $K, value: $V): bool {
    keys.update(
        key,
        vals, value)
}

pub fn ref(using mut ref _: Map($K, $V), key: $K, init!?): $V {
    keys.ref(
        key,
        vals, :fn init)
}

pub fn if(using mut ref _: Map($K, $V), key: $K, visit) {
    keys.if(
        key,
        vals, fn visit)
}

pub fn remove(using mut ref _: Map($K, $V), key: $K) {
    keys.if(key, vals): |_, remove!| {
        remove()
        return true
    }

    false
}

pub fn clear(using mut ref _: Map($K, $V)): void {
    keys.clear()
    vals.clear()
}


// flat/CountedSet.fu

type CountType = i32

pub struct CountedSet(type T) {
    counts!: Map(T, CountType)
}

pub inline fn [] !T(using _: CountedSet(T), i: int) {
    counts.keys[i]
}

pub inline fn len !T(using _: CountedSet(T)) {
    counts.keys.len
}

pub fn total(using _: CountedSet(_)) {
    mut total: CountType
    counts.each: |count| total += count
    total
}

pub fn count !T(using _: CountedSet(T), key: T) {
    counts.get(key)
}

pub fn each !T(using _: CountedSet(T), visit) {
    counts.each: |key!, count|
        visit(key, ?:count)
}

pub fn clear(using mut ref _: CountedSet(_)) {
    counts.clear()
}

pub fn remove !T(using mut ref _: CountedSet(T), key: T) {
    counts.remove(key)
}

pub fn incr !T(using mut ref _: CountedSet(T), key: T) {
    if (counts.ref(key)++)
        return false

    true
}

pub fn try_decr !T(using mut ref _: CountedSet(T), key: T) {
    counts.if(key): |count, remove| {
        if !(--count) {
            remove()
            return true
        }
    }

    false
}
