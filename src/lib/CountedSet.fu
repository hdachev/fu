
type CountType = i32

pub struct CountedSet(type T) {
    counts!: map::Map(T, CountType)
}

pub inline fn [] !T(using _: CountedSet(T), i: int) {
    counts.keys[i]
}

pub inline fn len !T(using _: CountedSet(T)) {
    counts.keys.len
}

pub fn total(using _: CountedSet(_)) {
    mut total: CountType
    counts.each: |count| total += count
    total
}

pub fn count !T(using _: CountedSet(T), key: T) {
    counts.get(key)
}

pub fn each !T(using _: CountedSet(T), visit) {
    counts.each: |key!, count|
        visit(key, ?:count)
}

pub fn clear(using mut ref _: CountedSet(_)) {
    counts.clear()
}

pub fn remove !T(using mut ref _: CountedSet(T), key: T) {
    counts.remove(key)
}

pub fn incr !T(using mut ref _: CountedSet(T), key: T) {
    if (counts.ref(key)++)
        return false

    true
}

pub fn try_decr !T(using mut ref _: CountedSet(T), key: T) {
    counts.if(key): |count, remove| {
        if !(--count) {
            remove()
            return true
        }
    }

    false
}
