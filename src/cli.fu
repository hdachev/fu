import helpers;
import compiler;
import tests;
import ansi;

enum Special {
    Nothing = 1
    Help
    Version
}

fn cli_handle(argv: string[], cwd = fs::cwd())
{
    mut idx = 0;

    fn next(): string {
        let i = idx++;
        if (i < argv.len)
            return argv[i];

        return "";
    }

    // Consume argv[0].
    let self = next();

    mut special: Special;
    if (argv.len == 1)
        special = "Nothing";
    else if (argv.ends(with: "--help"))
        special = "Help";
    else if (argv.ends(with: "--version"))
        special = "Version";

    if (special)
        return cli_handle_special(self, special);


    // Full test suite.

    if (argv.len == 2)
    {
        let cmd = argv[1];
        if (cmd == "self")
        {
            println("\n\tRunning tests ...\n");
            runTests();

            println("\n\tRebuilding self ...\n");
            buildCompiler();

            println("\n\tRebuilt self.\n");
            return;
        }
    }


    //

    fn abs(path: string)
        path    && path[0] != '-'
                && path::join(cwd, path);

    // A silly option parser.
    let EMIT_CPP    = 1 << 0;
    let EMIT_OBJ    = 1 << 1;
    let EMIT_BIN    = 1 << 2;

    mut dir_src:    string;
    mut dir_cpp:    string;
    mut dir_obj:    string;
    mut bin:        string;

    mut options:    i32;
    mut scheme:     string;

    mut run:        build::RunMode;
    mut bflags:     build::BuildFlags;

    mut flags_cc:   string[];
    mut flags_ld:   string[];

    //
    mut val = next();
    while (val.len > 1 && val[0] == '-') {
        mut opt = val;
        if (opt[1] != '-') {
            opt = [ opt[1] ];
            val = '-' ~ val.slice(2);
            if (val == "-")
                val = next();
        }
        else {
            val = next();
        }

        fn option(short: string, long: string, o: i32, ref dir: string) {
            if (opt == short || opt == long) {
                options |= o;
                if (opt == long) {
                    dir && throw(opt ~ ": already set to `" ~ dir ~ "`.");
                    dir = abs(val) || throw(
                        "Option " ~ long ~ " expects a path,"
                            ~ "\n\tgot `" ~ val ~ "`,"
                            ~ "\n\ttry `" ~ long ~ " rel/or/abs/dir/`.");

                    val = next();
                }

                opt = "";
            }
        }

        option("-", "--src",        0, dir_src);
        option("c", "--cpp", EMIT_CPP, dir_cpp);
        option("o", "--obj", EMIT_OBJ, dir_obj);
        option("b", "--bin", EMIT_BIN,     bin);

        // Scheme.
        if (opt == "--debug" || opt == "--reldeb" || opt == "--release" || opt == "--retail") {
            scheme && throw(opt ~ ": Scheme already set to `" ~ opt ~ "`.");
            scheme = opt.slice(2);
            continue;
        }

        //
        if (opt == "--run" || opt == "r") {
            run = "Normally";
            continue;
        }

        if (opt == "--hotswap") {
            bflags |= "hotswap";
            continue;
        }

        if (opt == "--shared") {
            bflags |= "shared";
            continue;
        }

        if (opt == "--nocache") {
            bflags |= "nocache";
            continue;
        }

        //
        else if (opt)
            throw("Unknown option: `" ~ opt ~ "`.");
    }

    // Defaulting.
    if (options & EMIT_CPP) {
        if (!dir_src) dir_src = dir_cpp || cwd;
        if (!dir_cpp) dir_cpp = dir_src;
    }

    // Do the work.
    let fname = abs(val) || throw(
        "Missing filename argument, a valid example is:"
            ~ "\n\t`fu file.fu`.");

    let dir_wrk = fudir::DEFAULT_WORKSPACE;

    if (options & EMIT_BIN)
        bin ||= fname.ends(with: ".fu")
                ? fname.slice(0, fname.len - ".fu".len)
                : fname ~ ".exe";

    // Pass through gcc flags.
    {
        let opt = next();
        if (opt == "--cflags") for (;;)
        {
            shadow let val = next();
            if (!val || val.starts(with: "--"))
                break;

            flags_cc ~= val;
        }

        idx--;
    }

    {
        let opt = next();
        if (opt == "--libs") for (;;)
        {
            shadow let val = next();
            if (!val || val.starts(with: "--"))
                break;

            flags_ld ~= val;
        }

        idx--;
    }

    {
        let opt = next();
        if (opt) throw("Leftover option: `" ~ opt ~ "`.");
    }

    // Go.
    compile_and_build(
        :fname, :bin,
        :run, :bflags,
        :dir_wrk, :dir_src, :dir_cpp, :dir_obj,
        :scheme,
        :flags_cc, :flags_ld);

    if (!dir_cpp && !dir_obj && !bin && !run)
        println(
            "        Neither --bin nor --run options provided, doing nothing.\n",
            "        "self" --help for more options.\n");
}

fn main(argv: string[])
{
    try {
        cli_handle(argv);
    }
    catch (e) {
        println("\n" ~ "  ERROR ".qBAD ~ e);
        return 1;
    }

    return 0;
}

pub extern fn buildCompiler()
    cli_handle(
        cwd: fudir::FU_ROOT,
        [ "fu", "--bin", "bin/fu", "-c", "src/cli.fu" ]);


//

fn cli_handle_special(self: string, special: Special)
{
    println(`
fu-0    The Fu Programming Language`);

    if (special == "Nothing")
    {
        println(`
        To get started:
            echo 'fn main() { println("Hello world!"); 0 }' >> hello.fu

        Build it:
            `self` -b hello.fu

        Run it:
            ./hello
                Hello world!
`);
    }
    else if (special == "Help")
    {
        println(`
USAGE   `self` [options] name.fu
        Without options, type-check and exit without further effect.

        `self` -b name.fu
        Build name.fu, output a binary in the same directory.

        `self` --bin ./bin/name name.fu
        Build name.fu, output a binary at ./bin/name

OPTIONS -b, --bin FILE
        Emit a binary.

        -c, --cpp DIR
        Emit intermedite c++ source code.

        -o, --obj DIR
        Emit object files.

        --debug
        --release
        --reldeb
        --retail
        Selects build scheme, default is "--release".
`);
    }
    else if (special == "Version")
    {
        println(`
        gcc --version:
            `build::gcc_version.replace(all: '\n', with: "\n            ")`
`);
    }
}
