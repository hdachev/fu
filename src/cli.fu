import helpers;
import compiler;
import tests;

fn cli_handle(argv: string[], cwd = fs::cwd()): i32
{
    mut idx = 0;

    fn next(): string {
        let i = idx++;
        if (i < argv.len)
            return argv[i];

        return "";
    }

    // Router.
    let self = next();

    // Exit 0 on no command, else we fail build-checks.
    if (argv.len == 1)
    {
        println("\n\tHello! ", self);
        println(  "\tNothing to do, running a quick self test.\n");

        self_test();
        println("\tEverything checks out.");
        println("\tTry `fu file.fu`.\n");

        return 0;
    }

    // Full test suite.
    if (argv.len == 2 && argv[1] == "self")
    {
        println("\n\tRunning test suite and rebuilding self ...\n");

        self_test();
        runTestsAndBuildCompiler();
        return 0;
    }

    fn abs(path: string)
        path    && path[0] != '-'
                && path::join(cwd, path);

    // A silly option parser.
    let EMIT_CPP = 1 << 0;
    let EMIT_OBJ = 1 << 1;
    let EMIT_BIN = 1 << 2;

    mut dir_src: string;
    mut dir_cpp: string;
    mut dir_obj: string;
    mut bin:     string;

    mut options: i32;
    mut scheme:  string;
    mut run:     bool;

    mut flags_cc:   string[];
    mut flags_ld:   string[];

    //
    mut val = next();
    while (val.len > 1 && val[0] == '-') {
        mut opt = val;
        if (opt[1] != '-') {
            opt = [ opt[1] ];
            val = '-' ~ val.slice(2);
            if (val == "-")
                val = next();
        }
        else {
            val = next();
        }

        fn option(short: string, long: string, o: i32, dir: &mut string) {
            if (opt == short || opt == long) {
                options |= o;
                if (opt == long) {
                    dir && throw(opt ~ ": already set to `" ~ dir ~ "`.");
                    dir = abs(val) || throw(
                        "Option " ~ long ~ " expects a path,"
                            ~ "\n\tgot `" ~ val ~ "`,"
                            ~ "\n\ttry `" ~ long ~ " rel/or/abs/dir/`.");

                    val = next();
                }

                opt = "";
            }
        }

        option("-", "--src",        0, dir_src);
        option("c", "--cpp", EMIT_CPP, dir_cpp);
        option("o", "--obj", EMIT_OBJ, dir_obj);
        option("b", "--bin", EMIT_BIN,     bin);

        // Scheme.
        if (opt == "--debug" || opt == "--reldeb" || opt == "--release" || opt == "--retail") {
            scheme && throw(opt ~ ": Scheme already set to `" ~ opt ~ "`.");
            scheme = opt.slice(2);
            continue;
        }

        // Run or don't.
        if (opt == "--run" || opt == "r") {
            run = true;
            continue;
        }

        else if (opt)
            throw("Unknown option: `" ~ opt ~ "`.");
    }

    // Defaulting.
    if (options & EMIT_CPP) {
        if (!dir_src) dir_src = dir_cpp || cwd;
        if (!dir_cpp) dir_cpp = dir_src;
    }

    // Do the work.
    let fname = abs(val) || throw(
        "Missing filename argument, a valid example is:"
            ~ "\n\t`fu file.fu`.");

    let dir_wrk = DEFAULT_WORKSPACE;

    if (options & EMIT_BIN)
        bin ||= fname.ends(with: ".fu")
                ? fname.slice(0, fname.len - ".fu".len)
                : fname ~ ".exe";

    // Pass through gcc flags.
    {
        let opt = next();
        if (opt == "--cflags") for (;;)
        {
            shadow let val = next();
            if (!val || val.starts(with: "--"))
                break;

            flags_cc ~= val;
        }

        idx--;
    }

    {
        let opt = next();
        if (opt == "--libs") for (;;)
        {
            shadow let val = next();
            if (!val || val.starts(with: "--"))
                break;

            flags_ld ~= val;
        }

        idx--;
    }

    {
        let opt = next();
        if (opt) throw("Leftover option: `" ~ opt ~ "`.");
    }

    // Go.
    build(:fname, :run, :bin,
        :dir_wrk, :dir_src, :dir_cpp, :dir_obj,
        :scheme,
        :flags_cc, :flags_ld);

    return 0;
}

fn main(argv: string[])
    cli_handle(argv);


//

fn runTestsAndBuildCompiler()
{
    runTests();

    cli_handle(
        cwd: PRJDIR,
        [ "fu", "--bin", "bin/fu", "-c", "src/cli.fu" ]);
}
