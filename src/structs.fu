import helpers;
import module;

pub struct StructCanon { modid: i32; index: i32 };

pub fn parseStructCanon(canon: string): StructCanon
{
    canon[0] == '/' || throw(
        "parseStructCanon: no `/` in " ~ canon ~ "`.");

    mut offset = 1;
    let mi = parseMi(offset, canon);
    offset == canon.len || throw(
        "parseStructCanon: trailing garbage in `" ~ canon ~ "`.");

    return StructCanon(:mi.modid, :mi.index);
}

pub fn createStructCanon(modid: i32, index: i32, lax name: string): string
{
    mut res = "/";
    res.appendMi(:modid, :index);

    let check = parseStructCanon(res);
    if !(check.modid == modid && check.index == index)
    {
        println("NOPE!!!!!");
        parseStructCanon(res);
        throw("Nope!");
    }

    // Name is redundant here, only useful for debug.
    return res;
}

pub fn isStruct(type: Type): bool
{
    return type.canon.starts(with: '/');
}


//

pub fn modidOfOrigin(type: Type)
{
    if (type.canon[0] == '/')
    {
        let scp = parseStructCanon(type.canon);
        return scp.modid;
    }

    return 0;
}
