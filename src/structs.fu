import helpers;
import module;

pub fn createStructCanon(modid: i32, index: i32, lax name: string): string
{
    // Name is redundant here, only useful for debug.
    return "/" ~ modid ~ ":" ~ index; // ~ name;
}

pub fn isStruct(type: Type): bool
{
    return type.canon.starts(with: '/');
}

pub struct StructCanon { modid: i32; index: i32 };

pub fn parseStructCanon(canon: string): StructCanon
{
    canon[0] == '/' || throw("parseStructCanon: no `/` in " ~ canon ~ "`.");
    mut offset = 1;
    let modid = parse10u32(:offset, canon).i32;

    canon[offset++] == ':' || throw("parseStructCanon: no `:` in " ~ canon ~ "`.");
    let index = parse10u32(:offset, canon).i32;
    offset == canon.len || throw("parseStructCanon: trailing garbage in `" ~ canon ~ "`.");

    return StructCanon(:modid, :index);
}


//

pub fn modidOfOrigin(type: Type)
{
    if (type.canon[0] == '/')
    {
        let scp = parseStructCanon(type.canon);
        return scp.modid;
    }

    return 0;
}
