import helpers;
import module;
import structs;
import quals;
import usage;
import fail;


//

pub fn lookupUserType_mut(implicit ref module: Module, canon: string)
{
    let scp = parseStructCanon(canon);
    scp.modid == module.modid || BUG("lookupUserType_mut: Not from this module (" ~ module.modid ~ ": " ~ canon ~ ")");
    return module.out.types[scp.index];
}


//

fn resolveFile(
    implicit ref ctx: Context,
    from: string, name: string): string
{
    let path    = from ~ name;
    let cached  = ctx.fuzzy.map::get(path);
    if (cached)
        return cached == "\v" ? "" : cached;

    fn tryResolve(): string
    {
        let check = |shadow path: string|
        {
            let exists = file::size(path) >= 0;
            if (exists)
                return path;
        };

        check(path);
        check(from ~    "lib/" ~ name);
        check(from ~ "fu/lib/" ~ name);

        // Finally, try lib/x/x.fu
        if (name.ends(with: ".fu"))
        {
            let ext = name.len - 3;

            mut dir = 0;
            for (mut i = ext; i --> 0; ) {
                if (name[i] == '/') {
                    dir = i + 1;
                    break;
                }
            }

            shadow let name = name[0   .. dir]
                            ~ name[dir .. ext] ~ '/'
                            ~ name[dir .. name.len];

            check(from ~ name);
            check(from ~    "lib/" ~ name);
            check(from ~ "fu/lib/" ~ name);
        }

        /////////////////////////////////
        let fallback = from.path::dirname;
        if (!fallback || fallback.len >= from.len)
            return "";

        return resolveFile(
            from: fallback, :name);
    };

    let resolve = tryResolve();
    ctx.fuzzy.map::set(path, resolve || "\v");
    return resolve;
}

fn testSuite_resolvePrepopulatedFile(
    implicit ref ctx: Context,
    from: string, name: string): string
{
    let prepopulated = from ~ name;
    return ctx.files.map::has(prepopulated)
        && prepopulated;
}

pub fn resolveFile(
    implicit ref ctx: Context,
    path: string): string
{
    let fuz_idx = path.find('\v');
    if (fuz_idx > 0)
    {
        let from    = path.slice(0, fuz_idx);
        mut name    = path.slice(fuz_idx + 1);

        let alt_idx = name.find('\t');
        mut alt     = "";

        if (alt_idx > 0) {
            alt = name[.. alt_idx] ~ "/" ~ name[alt_idx + 1 ..];
            name.shrink(alt_idx);
        }

        // TODO FIX this got real hairy
        if (!name.ends(with: ".fu")) name ~= ".fu";
        if (alt && !alt.ends(with: ".fu")) alt ~= ".fu";

        if (from && name && !name.has('\v'))
        {
            let file = resolveFile(:from, :name)
                    || alt && resolveFile(:from, name: alt)

                    // Tests have the files prepopulated,
                    //  we only pay the cost of lookup when about to
                    //   otherwise fail compile.
                    //
                    ||        testSuite_resolvePrepopulatedFile(:from, :name)
                    || alt && testSuite_resolvePrepopulatedFile(:from, name: alt);

            if (file)
                return file;
        }
    }

    return path;
}


//

pub fn getFile(
    implicit ref ctx: Context,
    mut path: string): string
{
    let cached = ctx.files.map::get(path);
    if (cached)
        return cached == "\v" ? "" : cached;

    let read = file::read(path);
    ctx.files.map::set(path, read || "\v");
    return read;
}

pub fn getModule(
    implicit ref ctx: Context,
    fname: string)
{
    for (mut i = 0; i < ctx.modules.len; i++)
        if (ctx.modules[i].fname == fname)
            return ctx.modules[i];

    let i = ctx.modules.len;
    ctx.modules.push(Module(modid: i, :fname));
    return ctx.modules[i];
}

pub fn setModule(
    implicit ref ctx: Context,
    module: Module)
{
    ref current = ctx.modules[module.modid];
    current.fname == module.fname || throw("setModule: module.fname mismatch");
    current = module.clone();
}


//

pub fn lookupUserType(
    implicit module: Module,
    implicit ctx: Context,
    scp: StructCanon)
{
    if (scp.modid == module.modid)
        return module.out.types[scp.index]
            || BUG();

    return ctx.modules[scp.modid].out.types[scp.index]
        || BUG();
}

pub fn lookupUserType(type: ValueType)
{
    return lookupUserType(parseStructCanon(type.canon));
}

pub fn is_trivial(type: ValueType)
    type.is_primitive
        || type.isStruct && !lookupUserType(type).non_triv_mask;

pub fn is_reinterpretable(type: ValueType)
{
    // TODO reconsider, might want only trivial+homogenous,
    //  or trivial+packed == no reading & writing into padding.
    //
    return type.is_trivial;
}


//

pub fn tryLookupUserType(type: ValueType): Struct
{
    if (type.isStruct || type.is_primitive && type.canon.quals::basePrimPrefixLen() < type.canon.len)
        return lookupUserType(type);

    return [];
}

pub fn lookupTypeImports(type: ValueType)
    tryLookupUserType(type).imports;

pub fn lookupTypeConverts(type: ValueType)
    tryLookupUserType(type).converts;


//

inline fn xorshift64(mut x: u64) {
    x ^= x << 13;
    x ^= x >> 7;
    x ^= x << 17;
    return x;
}

pub fn getShape(type: ValueType): Shape
{
    let s = tryLookupUserType(type);
    if (s)
        return s.shape;

    if (type.is_primitive)
        return Shape(
            basePrim:       type.canon,
            flatCount:      1,
            declDepth:      0,
            non_triv_mask:  0,
            hash:
            {
                mut hash: u64;
                for (mut i = type.canon.len; i --> 0; )
                    (hash <<= 8) |= type.canon[i].u64;

                hash
            });

    if_sliceable(type): |arrT|
    {
        let item_shape  = getShape(arrT);
        let hash        = xorshift64(item_shape.hash);

        return Shape(
            basePrim:   "",
            flatCount:  1,
            declDepth:  0,
            :hash,
            :item_shape.non_triv_mask | (1 << (hash & 63)));
    }

    // ZST.
    return Shape();
}

pub fn getFlatCount(type: ValueType): i32
{
    let s = tryLookupUserType(type);
    if (s)
        return s.flatCount;

    return type.is_primitive
        || type.is_sliceable ? 1 : 0;
}

pub fn is_zst(type: ValueType) {
    return !getFlatCount(type);
}


//

pub fn getShortModuleName(fname: string)
{
    // fname.ends(with: ".fu") || BUG();
    let end = fname.len - 3;

    mut found = false;
    for (mut i = end; i --> 0; )
    {
        let c = fname[i];
        if (c != '/')
            continue;

        if (found)
            return fname.slice(i + 1, end);

        found = true;
    }

    BUG();
}


//

pub fn serializeType(type: ValueType, debug!: string)
{
    type || throw("COMPILER BUG: serializeType: Falsy type in: " ~ debug);

    mut result: string;
    result.helpers::appendVarint(
        (type.quals & q_TAGS).u32);

    result ~= type.canon || throw(
        "COMPILER BUG: serializeType: No type.canon in: " ~ debug);

    return result;
}

pub fn parseType(str: byte[..]): ValueType
{
    mut offset: i32;

    let quals = Quals(helpers::parseVarint(offset, str));
    let canon = helpers::clone(str.slice(offset)); // TODO FIX SLICES clone

    mut type = ValueType(:canon, :quals);
    type.quals |= getMaxUsage(type.getFlatCount());

    if (SELF_TEST && type.is_primitive)
        bit::popcount(type.quals) == 2 || BUG(
            "parseType: Primitive.quals(" ~ quals ~ ").popcount(" ~ bit::popcount(quals) ~ ") != 2");

    return type;
}


//

pub fn if_sliceable(type: ValueType, hit)
{
    if (type.is_sliceable)
        hit(parseType(type.canon.slice(1, type.canon.len - 1)));
}

pub fn tryClear_sliceable(type: ValueType)
{
    if_sliceable(type): |vtype|
        return Type(:vtype);

    return [];
}

pub fn clear_sliceable(type: ValueType)
{
    if_sliceable(type): |vtype|
        return Type(:vtype);

    throw("COMPILER BUG: Not sliceable: " ~ type.canon);
}
