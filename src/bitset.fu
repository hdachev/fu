
pub struct BitSet
{
    _data: u8[];
};

pub fn add_once(using _: &mut BitSet, idx: i32): bool
{
    let no_neg = idx < 0 ? -1 : 0;
    let bucket = idx / 8 | no_neg;
    let bit    = idx % 8;
    let mask   = 1 << bit.u8;

    ref entry = _data.helpers::grow_if_oob(bucket);
    if !(entry & mask)
    {
        entry |= mask;
        return true;
    }

    // Already there.
    return false;
}

pub fn add(using _: &mut BitSet, idx: i32)
{
    let no_neg = idx < 0 ? -1 : 0;
    let bucket = idx / 8 | no_neg;
    let bit    = idx % 8;
    let mask   = 1 << bit.u8;

    _data.helpers::grow_if_oob(bucket) |= mask;
}

pub fn has(using _: BitSet, idx: i32)
{
    let no_neg = idx < 0 ? -1 : 0;
    let bucket = idx / 8 | no_neg;
    let bit    = idx % 8;
    let mask   = 1 << bit.u8;

    return _data.len > bucket
        && _data[bucket] & mask != 0;
}
